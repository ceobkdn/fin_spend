import pandas as pd
import matplotlib.pyplot as plt
import seaborn as sns
import numpy as np
from datetime import datetime, date, timedelta
import ipywidgets as widgets
from IPython.display import display, clear_output
import warnings
warnings.filterwarnings('ignore')

# Thi·∫øt l·∫≠p style
plt.style.use('default')
sns.set_palette("husl")
plt.rcParams['font.size'] = 10
plt.rcParams['figure.figsize'] = (12, 8)

class InvestmentPortfolioAnalyzer:
    def __init__(self):
        # Kh·ªüi t·∫°o d·ªØ li·ªáu
        self.investment_data = []
        self.current_prices = {}
        self.target_allocation = {}
        self.exchange_rate = 18.0  # KRW to VND
        
        # Mapping t·ª´ savings type sang investment category
        self.investment_mapping = {
            'ƒê·∫ßu t∆∞ ch·ª©ng kho√°n': 'C·ªï phi·∫øu',
            'Qu·ªπ ƒë·∫ßu t∆∞': 'Qu·ªπ',
            'Ti·∫øt ki·ªám ng√¢n h√†ng': 'Ti·ªÅn g·ª≠i',
            'V√†ng': 'V√†ng',
            'B·∫•t ƒë·ªông s·∫£n': 'B·∫•t ƒë·ªông s·∫£n',
            'Crypto': 'Crypto',
            'Kh√°c': 'Kh√°c'
        }
        
        # File paths
        self.data_files = {
            'savings': 'finance_data_savings.csv',
            'investment_prices': 'investment_current_prices.csv',
            'target_allocation': 'target_allocation.csv',
            'settings': 'investment_settings.csv'
        }
        
        # T·∫°o widgets
        self.create_widgets()
        
        # Load data
        self.load_data()
        
        # Create layout
        self.create_layout()
    
    def create_widgets(self):
        # Header
        self.title = widgets.HTML(
            value="<h2 style='text-align: center; color: #2E86AB;'>üìà PH√ÇN T√çCH DANH M·ª§C ƒê·∫¶U T∆Ø</h2>"
        )
        
        # Settings Section
        self.settings_header = widgets.HTML(
            value="<h3 style='color: #17A2B8;'>‚öôÔ∏è C√ÄI ƒê·∫∂T</h3>"
        )
        self.exchange_rate_input = widgets.FloatText(
            value=18.0,
            description="T·ª∑ gi√° (1 KRW =):",
            style={'description_width': 'initial'},
            layout={'width': '200px'}
        )
        self.exchange_rate_unit = widgets.HTML(value="<span style='margin-left: 5px;'>VND</span>")
        self.update_exchange_btn = widgets.Button(
            description="C·∫≠p nh·∫≠t T·ª∑ gi√°",
            button_style='info',
            icon='refresh'
        )
        
        self.currency_display = widgets.Dropdown(
            options=[('VND', 'VND'), ('KRW', 'KRW')],
            value='VND',
            description="Hi·ªÉn th·ªã:",
            style={'description_width': 'initial'}
        )
        
        # Data Import Section
        self.import_header = widgets.HTML(
            value="<h3 style='color: #28A745;'>üìÇ IMPORT D·ªÆ LI·ªÜU</h3>"
        )
        self.import_file_path = widgets.Text(
            value='finance_data_savings.csv',
            placeholder='Nh·∫≠p ƒë∆∞·ªùng d·∫´n file CSV...',
            description="File CSV:",
            style={'description_width': 'initial'},
            layout={'width': '400px'}
        )
        self.import_data_btn = widgets.Button(
            description="Import D·ªØ li·ªáu ƒê·∫ßu t∆∞",
            button_style='success',
            icon='upload'
        )
        
        # Current Price Management
        self.price_header = widgets.HTML(
            value="<h3 style='color: #FF6B35;'>üí∞ C·∫¨P NH·∫¨T GI√Å HI·ªÜN T·∫†I</h3>"
        )
        self.asset_dropdown = widgets.Dropdown(
            options=[('-- Ch·ªçn t√†i s·∫£n --', '')],
            description="T√†i s·∫£n:",
            style={'description_width': 'initial'},
            layout={'width': '300px'}
        )
        self.current_price_input = widgets.FloatText(
            value=0.0,
            description="Gi√° hi·ªán t·∫°i:",
            style={'description_width': 'initial'}
        )
        self.price_currency = widgets.Dropdown(
            options=[('VND', 'VND'), ('KRW', 'KRW')],
            value='VND',
            description="ƒê∆°n v·ªã:",
            style={'description_width': 'initial'}
        )
        self.price_date = widgets.DatePicker(
            description="Ng√†y:",
            value=date.today(),
            style={'description_width': 'initial'}
        )
        self.update_price_btn = widgets.Button(
            description="C·∫≠p nh·∫≠t Gi√°",
            button_style='warning',
            icon='edit'
        )
        
        # Target Allocation Management
        self.allocation_header = widgets.HTML(
            value="<h3 style='color: #6F42C1;'>üéØ PH√ÇN B·ªî M·ª§C TI√äU</h3>"
        )
        self.allocation_type = widgets.Dropdown(
            options=['C·ªï phi·∫øu', 'Qu·ªπ', 'Ti·ªÅn g·ª≠i', 'V√†ng', 'B·∫•t ƒë·ªông s·∫£n', 'Crypto', 'Kh√°c'],
            description="Lo·∫°i t√†i s·∫£n:",
            style={'description_width': 'initial'}
        )
        self.target_percent = widgets.FloatText(
            value=0.0,
            description="T·ª∑ l·ªá m·ª•c ti√™u (%):",
            style={'description_width': 'initial'}
        )
        self.set_allocation_btn = widgets.Button(
            description="Thi·∫øt l·∫≠p T·ª∑ l·ªá",
            button_style='info',
            icon='target'
        )
        self.clear_allocation_btn = widgets.Button(
            description="X√≥a T·∫•t c·∫£",
            button_style='danger',
            icon='trash'
        )
        
        # Analysis Buttons
        self.analysis_header = widgets.HTML(
            value="<h3 style='color: #DC3545;'>üìä PH√ÇN T√çCH DANH M·ª§C</h3>"
        )
        self.show_portfolio_overview_btn = widgets.Button(
            description="T·ªïng quan Danh m·ª•c",
            button_style='info',
            icon='chart-pie'
        )
        self.show_performance_btn = widgets.Button(
            description="Hi·ªáu su·∫•t ƒê·∫ßu t∆∞",
            button_style='success',
            icon='chart-line'
        )
        self.show_allocation_analysis_btn = widgets.Button(
            description="Ph√¢n t√≠ch Ph√¢n b·ªï",
            button_style='warning',
            icon='balance-scale'
        )
        self.show_rebalance_recommendation_btn = widgets.Button(
            description="Khuy·∫øn ngh·ªã C√¢n b·∫±ng",
            button_style='primary',
            icon='sync-alt'
        )
        self.show_risk_analysis_btn = widgets.Button(
            description="Ph√¢n t√≠ch R·ªßi ro",
            button_style='danger',
            icon='exclamation-triangle'
        )
        
        # Advanced Analysis
        self.advanced_header = widgets.HTML(
            value="<h3 style='color: #17A2B8;'>üî¨ PH√ÇN T√çCH N√ÇNG CAO</h3>"
        )
        self.time_period = widgets.Dropdown(
            options=[('3 th√°ng', 90), ('6 th√°ng', 180), ('1 nƒÉm', 365), ('2 nƒÉm', 730)],
            value=365,
            description="Th·ªùi gian:",
            style={'description_width': 'initial'}
        )
        self.show_trend_analysis_btn = widgets.Button(
            description="Xu h∆∞·ªõng ƒê·∫ßu t∆∞",
            button_style='info',
            icon='chart-area'
        )
        self.show_diversification_btn = widgets.Button(
            description="ƒêa d·∫°ng h√≥a",
            button_style='success',
            icon='sitemap'
        )
        self.export_report_btn = widgets.Button(
            description="Xu·∫•t B√°o c√°o",
            button_style='',
            icon='file-export'
        )
        
        # Data Management
        self.data_mgmt_header = widgets.HTML(
            value="<h3 style='color: #6C757D;'>üíæ QU·∫¢N L√ù D·ªÆ LI·ªÜU</h3>"
        )
        self.save_all_btn = widgets.Button(
            description="L∆∞u T·∫•t c·∫£",
            button_style='success',
            icon='save'
        )
        self.load_all_btn = widgets.Button(
            description="T·∫£i D·ªØ li·ªáu",
            button_style='info',
            icon='folder-open'
        )
        self.clear_all_btn = widgets.Button(
            description="X√≥a T·∫•t c·∫£",
            button_style='danger',
            icon='trash-alt'
        )
        
        # Output
        self.output = widgets.Output()
        
        # Bind events
        self.update_exchange_btn.on_click(self.update_exchange_rate)
        self.import_data_btn.on_click(self.import_investment_data)
        self.update_price_btn.on_click(self.update_current_price)
        self.set_allocation_btn.on_click(self.set_target_allocation)
        self.clear_allocation_btn.on_click(self.clear_target_allocation)
        
        # Analysis events
        self.show_portfolio_overview_btn.on_click(self.show_portfolio_overview)
        self.show_performance_btn.on_click(self.show_performance_analysis)
        self.show_allocation_analysis_btn.on_click(self.show_allocation_analysis)
        self.show_rebalance_recommendation_btn.on_click(self.show_rebalance_recommendation)
        self.show_risk_analysis_btn.on_click(self.show_risk_analysis)
        
        # Advanced analysis events
        self.show_trend_analysis_btn.on_click(self.show_trend_analysis)
        self.show_diversification_btn.on_click(self.show_diversification_analysis)
        self.export_report_btn.on_click(self.export_investment_report)
        
        # Data management events
        self.save_all_btn.on_click(self.save_all_data)
        self.load_all_btn.on_click(self.load_all_data)
        self.clear_all_btn.on_click(self.clear_all_data)
    
    def create_layout(self):
        # Settings tab
        settings_tab = widgets.VBox([
            self.settings_header,
            widgets.HBox([self.exchange_rate_input, self.exchange_rate_unit, self.update_exchange_btn]),
            widgets.HBox([self.currency_display]),
            
            self.import_header,
            widgets.HBox([self.import_file_path, self.import_data_btn]),
            
            self.price_header,
            widgets.HBox([self.asset_dropdown, self.current_price_input]),
            widgets.HBox([self.price_currency, self.price_date, self.update_price_btn]),
            
            self.allocation_header,
            widgets.HBox([self.allocation_type, self.target_percent]),
            widgets.HBox([self.set_allocation_btn, self.clear_allocation_btn])
        ])
        
        # Analysis tab
        analysis_tab = widgets.VBox([
            self.analysis_header,
            widgets.HBox([self.show_portfolio_overview_btn, self.show_performance_btn]),
            widgets.HBox([self.show_allocation_analysis_btn, self.show_rebalance_recommendation_btn]),
            widgets.HBox([self.show_risk_analysis_btn]),
            
            self.advanced_header,
            widgets.HBox([self.time_period, self.show_trend_analysis_btn]),
            widgets.HBox([self.show_diversification_btn, self.export_report_btn]),
            
            self.data_mgmt_header,
            widgets.HBox([self.save_all_btn, self.load_all_btn, self.clear_all_btn])
        ])
        
        # Create tabs
        tabs = widgets.Tab()
        tabs.children = [settings_tab, analysis_tab]
        tabs.titles = ['C√†i ƒë·∫∑t & D·ªØ li·ªáu', 'Ph√¢n t√≠ch Danh m·ª•c']
        
        self.main_layout = widgets.VBox([
            self.title,
            tabs,
            self.output
        ])
    
    def convert_currency(self, amount, from_currency, to_currency):
        """Chuy·ªÉn ƒë·ªïi ti·ªÅn t·ªá"""
        if from_currency == to_currency:
            return amount
        elif from_currency == 'KRW' and to_currency == 'VND':
            return amount * self.exchange_rate
        elif from_currency == 'VND' and to_currency == 'KRW':
            return amount / self.exchange_rate
        return amount
    
    def format_currency(self, amount, currency):
        """Format hi·ªÉn th·ªã ti·ªÅn t·ªá"""
        if currency == 'VND':
            return f"{amount:,.0f}ƒë"
        elif currency == 'KRW':
            return f"{amount:,.0f}‚Ç©"
        return f"{amount:,.0f}"
    
    def update_exchange_rate(self, button):
        """C·∫≠p nh·∫≠t t·ª∑ gi√°"""
        if self.exchange_rate_input.value > 0:
            self.exchange_rate = self.exchange_rate_input.value
            self.save_settings()
            
            with self.output:
                clear_output()
                print(f"‚úÖ ƒê√£ c·∫≠p nh·∫≠t t·ª∑ gi√°: 1 KRW = {self.exchange_rate} VND")
        else:
            with self.output:
                clear_output()
                print("‚ùå T·ª∑ gi√° ph·∫£i l·ªõn h∆°n 0!")
    
    def import_investment_data(self, button):
        """Import d·ªØ li·ªáu ƒë·∫ßu t∆∞ t·ª´ file CSV c·ªßa finance tracker"""
        try:
            file_path = self.import_file_path.value
            df = pd.read_csv(file_path, encoding='utf-8-sig')
            
            # Clear existing data
            self.investment_data = []
            
            # Process data
            for _, row in df.iterrows():
                investment_type = self.investment_mapping.get(row['type'], 'Kh√°c')
                
                self.investment_data.append({
                    'date': pd.to_datetime(row['date']).date(),
                    'type': investment_type,
                    'description': row['description'],
                    'amount': float(row['amount']),
                    'currency': row.get('currency', 'VND'),
                    'original_type': row['type']
                })
            
            # Update asset dropdown
            self.update_asset_dropdown()
            
            with self.output:
                clear_output()
                print(f"‚úÖ ƒê√£ import {len(self.investment_data)} b·∫£n ghi ƒë·∫ßu t∆∞ t·ª´ {file_path}")
                print("üìä Ph√¢n lo·∫°i ƒë·∫ßu t∆∞:")
                
                # Show investment breakdown
                type_summary = {}
                for inv in self.investment_data:
                    inv_type = inv['type']
                    amount_vnd = self.convert_currency(inv['amount'], inv['currency'], 'VND')
                    type_summary[inv_type] = type_summary.get(inv_type, 0) + amount_vnd
                
                for inv_type, total in type_summary.items():
                    print(f"   ‚Ä¢ {inv_type}: {total:,.0f}ƒë")
                    
        except Exception as e:
            with self.output:
                clear_output()
                print(f"‚ùå L·ªói khi import d·ªØ li·ªáu: {str(e)}")
    
    def update_asset_dropdown(self):
        """C·∫≠p nh·∫≠t dropdown danh s√°ch t√†i s·∫£n"""
        options = [('-- Ch·ªçn t√†i s·∫£n --', '')]
        
        # Group by type and description
        assets = set()
        for inv in self.investment_data:
            asset_key = f"{inv['type']} - {inv['description']}"
            assets.add(asset_key)
        
        for asset in sorted(assets):
            options.append((asset, asset))
        
        self.asset_dropdown.options = options
    
    def update_current_price(self, button):
        """C·∫≠p nh·∫≠t gi√° hi·ªán t·∫°i c·ªßa t√†i s·∫£n"""
        if self.asset_dropdown.value and self.current_price_input.value > 0:
            asset_key = self.asset_dropdown.value
            price_info = {
                'price': self.current_price_input.value,
                'currency': self.price_currency.value,
                'date': self.price_date.value
            }
            
            self.current_prices[asset_key] = price_info
            self.save_current_prices()
            
            with self.output:
                clear_output()
                formatted_price = self.format_currency(self.current_price_input.value, self.price_currency.value)
                print(f"‚úÖ ƒê√£ c·∫≠p nh·∫≠t gi√° {asset_key}: {formatted_price}")
        else:
            with self.output:
                clear_output()
                print("‚ùå Vui l√≤ng ch·ªçn t√†i s·∫£n v√† nh·∫≠p gi√° h·ª£p l·ªá!")
    
    def set_target_allocation(self, button):
        """Thi·∫øt l·∫≠p t·ª∑ l·ªá ph√¢n b·ªï m·ª•c ti√™u"""
        if self.target_percent.value >= 0:
            self.target_allocation[self.allocation_type.value] = self.target_percent.value
            self.save_target_allocation()
            
            with self.output:
                clear_output()
                print(f"‚úÖ ƒê√£ thi·∫øt l·∫≠p t·ª∑ l·ªá m·ª•c ti√™u cho {self.allocation_type.value}: {self.target_percent.value}%")
                
                # Show current allocation targets
                print("\nüéØ Ph√¢n b·ªï m·ª•c ti√™u hi·ªán t·∫°i:")
                total_percent = 0
                for asset_type, percent in self.target_allocation.items():
                    print(f"   ‚Ä¢ {asset_type}: {percent}%")
                    total_percent += percent
                print(f"   üìä T·ªïng: {total_percent}%")
                
                if total_percent != 100:
                    print(f"   ‚ö†Ô∏è  Ch∆∞a ƒë·∫°t 100% (c√≤n {100-total_percent}%)")
        else:
            with self.output:
                clear_output()
                print("‚ùå T·ª∑ l·ªá ph·∫ßn trƒÉm ph·∫£i >= 0!")
    
    def clear_target_allocation(self, button):
        """X√≥a t·∫•t c·∫£ t·ª∑ l·ªá ph√¢n b·ªï m·ª•c ti√™u"""
        self.target_allocation = {}
        self.save_target_allocation()
        
        with self.output:
            clear_output()
            print("üóëÔ∏è ƒê√£ x√≥a t·∫•t c·∫£ t·ª∑ l·ªá ph√¢n b·ªï m·ª•c ti√™u")
    
    def show_portfolio_overview(self, button):
        """Hi·ªÉn th·ªã t·ªïng quan danh m·ª•c ƒë·∫ßu t∆∞"""
        if not self.investment_data:
            with self.output:
                clear_output()
                print("‚ùå Ch∆∞a c√≥ d·ªØ li·ªáu ƒë·∫ßu t∆∞!")
            return
        
        display_currency = self.currency_display.value
        
        with self.output:
            clear_output()
            
            # Calculate portfolio summary
            portfolio_summary = {}
            total_value = 0
            
            for inv in self.investment_data:
                inv_type = inv['type']
                amount = self.convert_currency(inv['amount'], inv['currency'], display_currency)
                
                if inv_type not in portfolio_summary:
                    portfolio_summary[inv_type] = {
                        'original_cost': 0,
                        'count': 0,
                        'assets': {}
                    }
                
                portfolio_summary[inv_type]['original_cost'] += amount
                portfolio_summary[inv_type]['count'] += 1
                total_value += amount
                
                # Group by asset
                asset_key = f"{inv['type']} - {inv['description']}"
                if asset_key not in portfolio_summary[inv_type]['assets']:
                    portfolio_summary[inv_type]['assets'][asset_key] = 0
                portfolio_summary[inv_type]['assets'][asset_key] += amount
            
            print("="*60)
            print(f"üìä T·ªîNG QUAN DANH M·ª§C ƒê·∫¶U T∆Ø ({display_currency})")
            print("="*60)
            print(f"üí∞ T·ªïng gi√° tr·ªã g·ªëc: {self.format_currency(total_value, display_currency)}")
            print(f"üìà S·ªë lo·∫°i t√†i s·∫£n: {len(portfolio_summary)}")
            print(f"üè∑Ô∏è  T·ªïng s·ªë giao d·ªãch: {len(self.investment_data)}")
            print("-"*60)
            
            # Create visualization
            fig, ((ax1, ax2), (ax3, ax4)) = plt.subplots(2, 2, figsize=(16, 12))
            
            # 1. Pie chart - Portfolio allocation by type
            types = list(portfolio_summary.keys())
            values = [portfolio_summary[t]['original_cost'] for t in types]
            colors = plt.cm.Set3(np.linspace(0, 1, len(types)))
            
            wedges, texts, autotexts = ax1.pie(values, labels=types, autopct='%1.1f%%', 
                                              colors=colors, startangle=90)
            ax1.set_title('Ph√¢n B·ªï Danh M·ª•c Theo Lo·∫°i T√†i S·∫£n')
            
            # 2. Bar chart - Investment amounts by type
            ax2.bar(types, values, color=colors)
            ax2.set_title('Gi√° Tr·ªã ƒê·∫ßu T∆∞ Theo Lo·∫°i')
            ax2.set_ylabel(f'Gi√° tr·ªã ({display_currency})')
            ax2.tick_params(axis='x', rotation=45)
            
            # Add value labels on bars
            for i, v in enumerate(values):
                ax2.text(i, v + max(values)*0.01, f'{v:,.0f}', ha='center', va='bottom')
            
            # 3. Timeline of investments
            df_viz = pd.DataFrame(self.investment_data)
            df_viz['date'] = pd.to_datetime(df_viz['date'])
            df_viz['amount_display'] = df_viz.apply(
                lambda row: self.convert_currency(row['amount'], row['currency'], display_currency), 
                axis=1
            )
            
            monthly_investment = df_viz.groupby([df_viz['date'].dt.to_period('M'), 'type'])['amount_display'].sum().unstack(fill_value=0)
            
            if not monthly_investment.empty:
                monthly_investment.plot(kind='area', stacked=True, ax=ax3, alpha=0.7)
                ax3.set_title('Xu H∆∞·ªõng ƒê·∫ßu T∆∞ Theo Th·ªùi Gian')
                ax3.set_ylabel(f'Gi√° tr·ªã ({display_currency})')
                ax3.legend(bbox_to_anchor=(1.05, 1), loc='upper left')
            
            # 4. Top investments by value
            all_assets = {}
            for inv_type in portfolio_summary:
                for asset, value in portfolio_summary[inv_type]['assets'].items():
                    all_assets[asset] = value
            
            top_assets = sorted(all_assets.items(), key=lambda x: x[1], reverse=True)[:10]
            
            if top_assets:
                asset_names = [asset[0].split(' - ')[1][:20] + '...' if len(asset[0].split(' - ')[1]) > 20 
                              else asset[0].split(' - ')[1] for asset in top_assets]
                asset_values = [asset[1] for asset in top_assets]
                
                ax4.barh(asset_names, asset_values, color=plt.cm.viridis(np.linspace(0, 1, len(asset_names))))
                ax4.set_title('Top 10 Kho·∫£n ƒê·∫ßu T∆∞ L·ªõn Nh·∫•t')
                ax4.set_xlabel(f'Gi√° tr·ªã ({display_currency})')
            
            plt.tight_layout()
            plt.show()
            
            # Print detailed breakdown
            print("\nüìã CHI TI·∫æT THEO LO·∫†I T√ÄI S·∫¢N:")
            for inv_type, data in portfolio_summary.items():
                percentage = (data['original_cost'] / total_value) * 100
                print(f"\nüè∑Ô∏è  {inv_type}")
                print(f"   üí∞ Gi√° tr·ªã: {self.format_currency(data['original_cost'], display_currency)} ({percentage:.1f}%)")
                print(f"   üìä S·ªë giao d·ªãch: {data['count']}")
                
                # Top 3 assets in this category
                sorted_assets = sorted(data['assets'].items(), key=lambda x: x[1], reverse=True)[:3]
                print(f"   üîù Top t√†i s·∫£n:")
                for asset, value in sorted_assets:
                    asset_name = asset.split(' - ')[1]
                    print(f"      ‚Ä¢ {asset_name}: {self.format_currency(value, display_currency)}")
    
    def show_allocation_analysis(self, button):
        """Ph√¢n t√≠ch ph√¢n b·ªï danh m·ª•c so v·ªõi m·ª•c ti√™u"""
        if not self.investment_data:
            with self.output:
                clear_output()
                print("‚ùå Ch∆∞a c√≥ d·ªØ li·ªáu ƒë·∫ßu t∆∞!")
            return
        
        if not self.target_allocation:
            with self.output:
                clear_output()
                print("‚ùå Ch∆∞a thi·∫øt l·∫≠p t·ª∑ l·ªá ph√¢n b·ªï m·ª•c ti√™u!")
            return
        
        display_currency = self.currency_display.value
        
        with self.output:
            clear_output()
            
            # Calculate current allocation
            current_allocation = {}
            total_value = 0
            
            for inv in self.investment_data:
                inv_type = inv['type']
                amount = self.convert_currency(inv['amount'], inv['currency'], display_currency)
                
                current_allocation[inv_type] = current_allocation.get(inv_type, 0) + amount
                total_value += amount
            
            # Convert to percentages
            current_allocation_pct = {
                asset_type: (value / total_value) * 100 
                for asset_type, value in current_allocation.items()
            }
            
            print("="*70)
            print(f"üìà PH√ÇN T√çCH XU H∆Ø·ªöNG ƒê·∫¶U T∆Ø ({days} NG√ÄY QUA)")
            print("="*70)
            
            df = pd.DataFrame(filtered_data)
            df['date'] = pd.to_datetime(df['date'])
            df['amount_display'] = df.apply(
                lambda row: self.convert_currency(row['amount'], row['currency'], display_currency), 
                axis=1
            )
            df = df.sort_values('date')
            
            # Create trend visualizations
            fig, ((ax1, ax2), (ax3, ax4)) = plt.subplots(2, 2, figsize=(16, 12))
            
            # 1. Investment trend over time
            daily_investment = df.groupby('date')['amount_display'].sum()
            
            # Calculate moving averages
            ma_7 = daily_investment.rolling(window=7, min_periods=1).mean()
            ma_30 = daily_investment.rolling(window=30, min_periods=1).mean()
            
            ax1.plot(daily_investment.index, daily_investment.values, 'o-', alpha=0.6, label='H√†ng ng√†y')
            ax1.plot(ma_7.index, ma_7.values, '-', linewidth=2, label='MA 7 ng√†y')
            ax1.plot(ma_30.index, ma_30.values, '-', linewidth=2, label='MA 30 ng√†y')
            ax1.set_title('Xu H∆∞·ªõng ƒê·∫ßu T∆∞ Theo Th·ªùi Gian')
            ax1.set_ylabel(f'S·ªë ti·ªÅn ({display_currency})')
            ax1.legend()
            ax1.grid(True, alpha=0.3)
            
            # 2. Investment by type trend
            type_trend = df.groupby([df['date'].dt.to_period('W'), 'type'])['amount_display'].sum().unstack(fill_value=0)
            if not type_trend.empty:
                type_trend.plot(kind='area', stacked=True, ax=ax2, alpha=0.7)
                ax2.set_title('Xu H∆∞·ªõng Theo Lo·∫°i T√†i S·∫£n (Theo Tu·∫ßn)')
                ax2.set_ylabel(f'S·ªë ti·ªÅn ({display_currency})')
                ax2.legend(bbox_to_anchor=(1.05, 1), loc='upper left')
            
            # 3. Investment frequency analysis
            df['day_of_week'] = df['date'].dt.day_name()
            df['week_of_year'] = df['date'].dt.isocalendar().week
            
            weekly_frequency = df.groupby('week_of_year').size()
            ax3.bar(weekly_frequency.index, weekly_frequency.values, alpha=0.7, color='lightblue')
            ax3.set_title('T·∫ßn Su·∫•t ƒê·∫ßu T∆∞ Theo Tu·∫ßn')
            ax3.set_ylabel('S·ªë l·∫ßn giao d·ªãch')
            ax3.set_xlabel('Tu·∫ßn trong nƒÉm')
            
            # 4. Cumulative investment with trend line
            df_sorted = df.sort_values('date')
            df_sorted['cumulative'] = df_sorted['amount_display'].cumsum()
            df_sorted['days_from_start'] = (df_sorted['date'] - df_sorted['date'].min()).dt.days
            
            ax4.scatter(df_sorted['days_from_start'], df_sorted['cumulative'], alpha=0.6, color='blue')
            
            # Add trend line
            if len(df_sorted) > 1:
                z = np.polyfit(df_sorted['days_from_start'], df_sorted['cumulative'], 1)
                p = np.poly1d(z)
                ax4.plot(df_sorted['days_from_start'], p(df_sorted['days_from_start']), "r--", alpha=0.8, linewidth=2)
            
            ax4.set_title('T√≠ch L≈©y ƒê·∫ßu T∆∞ & Xu H∆∞·ªõng')
            ax4.set_xlabel('Ng√†y t·ª´ l√∫c b·∫Øt ƒë·∫ßu')
            ax4.set_ylabel(f'T·ªïng t√≠ch l≈©y ({display_currency})')
            ax4.grid(True, alpha=0.3)
            
            plt.tight_layout()
            plt.show()
            
            # Calculate trend statistics
            total_invested = df['amount_display'].sum()
            avg_daily = total_invested / days
            
            # Investment momentum
            first_half = df[df['date'] <= df['date'].min() + timedelta(days=days//2)]['amount_display'].sum()
            second_half = df[df['date'] > df['date'].min() + timedelta(days=days//2)]['amount_display'].sum()
            
            momentum = ((second_half - first_half) / max(first_half, 1)) * 100 if first_half > 0 else 0
            
            print(f"üí∞ T·ªïng ƒë·∫ßu t∆∞ trong {days} ng√†y: {self.format_currency(total_invested, display_currency)}")
            print(f"üìä Trung b√¨nh m·ªói ng√†y: {self.format_currency(avg_daily, display_currency)}")
            print(f"üöÄ Momentum ƒë·∫ßu t∆∞: {momentum:+.1f}%")
            
            if momentum > 20:
                print("   üìà Xu h∆∞·ªõng tƒÉng m·∫°nh - b·∫°n ƒëang ƒë·∫ßu t∆∞ t√≠ch c·ª±c h∆°n!")
            elif momentum > 5:
                print("   üìä Xu h∆∞·ªõng tƒÉng nh·∫π - duy tr√¨ ƒë√† t·ªët!")
            elif momentum > -5:
                print("   ‚öñÔ∏è  Xu h∆∞·ªõng ·ªïn ƒë·ªãnh - ƒë·∫ßu t∆∞ ƒë·ªÅu ƒë·∫∑n")
            else:
                print("   üìâ Xu h∆∞·ªõng gi·∫£m - c√≥ th·ªÉ c·∫ßn tƒÉng c∆∞·ªùng ƒë·∫ßu t∆∞")
            
            # Best performing periods
            if len(daily_investment) > 7:
                best_week = daily_investment.rolling(7).sum().idxmax()
                best_week_amount = daily_investment.rolling(7).sum().max()
                
                print(f"\nüèÜ Tu·∫ßn ƒë·∫ßu t∆∞ m·∫°nh nh·∫•t: {best_week.strftime('%d/%m/%Y')}")
                print(f"   üí∞ S·ªë ti·ªÅn: {self.format_currency(best_week_amount, display_currency)}")
            
            # Investment consistency
            investment_days = df.groupby('date')['amount_display'].sum()
            if len(investment_days) > 1:
                consistency = len(investment_days) / days * 100
                print(f"\nüìÖ T·∫ßn su·∫•t ƒë·∫ßu t∆∞: {consistency:.1f}% s·ªë ng√†y ({len(investment_days)}/{days} ng√†y)")
                
                if consistency > 20:
                    print("   üéØ R·∫•t th∆∞·ªùng xuy√™n!")
                elif consistency > 10:
                    print("   üëç Kh√° ƒë·ªÅu ƒë·∫∑n")
                elif consistency > 5:
                    print("   üìä Trung b√¨nh")
                else:
                    print("   üí° C√≥ th·ªÉ tƒÉng t·∫ßn su·∫•t ƒë·∫ßu t∆∞")
    
    def show_diversification_analysis(self, button):
        """Ph√¢n t√≠ch ƒëa d·∫°ng h√≥a danh m·ª•c"""
        if not self.investment_data:
            with self.output:
                clear_output()
                print("‚ùå Ch∆∞a c√≥ d·ªØ li·ªáu ƒë·∫ßu t∆∞!")
            return
        
        display_currency = self.currency_display.value
        
        with self.output:
            clear_output()
            
            print("="*70)
            print("üåê PH√ÇN T√çCH ƒêA D·∫†NG H√ìA DANH M·ª§C")
            print("="*70)
            
            # Calculate diversification metrics
            portfolio_summary = {}
            asset_details = {}
            total_value = 0
            
            for inv in self.investment_data:
                inv_type = inv['type']
                asset_key = f"{inv['type']} - {inv['description']}"
                amount = self.convert_currency(inv['amount'], inv['currency'], display_currency)
                
                portfolio_summary[inv_type] = portfolio_summary.get(inv_type, 0) + amount
                asset_details[asset_key] = asset_details.get(asset_key, 0) + amount
                total_value += amount
            
            # Diversification scores
            num_asset_types = len(portfolio_summary)
            num_individual_assets = len(asset_details)
            
            # Calculate Herfindahl Index (concentration measure)
            type_weights = [(value/total_value)**2 for value in portfolio_summary.values()]
            herfindahl_types = sum(type_weights)
            
            asset_weights = [(value/total_value)**2 for value in asset_details.values()]
            herfindahl_assets = sum(asset_weights)
            
            # Diversification scores (lower HHI = better diversification)
            type_diversification = (1 - herfindahl_types) * 100
            asset_diversification = (1 - herfindahl_assets) * 100
            
            # Create diversification visualizations
            fig, ((ax1, ax2), (ax3, ax4)) = plt.subplots(2, 2, figsize=(16, 12))
            
            # 1. Asset type concentration
            types = list(portfolio_summary.keys())
            type_values = list(portfolio_summary.values())
            type_percentages = [(v/total_value)*100 for v in type_values]
            
            colors = plt.cm.Set3(np.linspace(0, 1, len(types)))
            ax1.pie(type_values, labels=types, autopct='%1.1f%%', colors=colors, startangle=90)
            ax1.set_title('ƒêa D·∫°ng H√≥a Theo Lo·∫°i T√†i S·∫£n')
            
            # 2. Individual asset concentration (top 10)
            sorted_assets = sorted(asset_details.items(), key=lambda x: x[1], reverse=True)[:10]
            asset_names = [asset[0].split(' - ')[1][:15] + '...' if len(asset[0].split(' - ')[1]) > 15 
                          else asset[0].split(' - ')[1] for asset in sorted_assets]
            asset_amounts = [asset[1] for asset in sorted_assets]
            
            ax2.barh(asset_names, asset_amounts, color=plt.cm.viridis(np.linspace(0, 1, len(asset_names))))
            ax2.set_title('Top 10 T√†i S·∫£n C√° Bi·ªát')
            ax2.set_xlabel(f'Gi√° tr·ªã ({display_currency})')
            
            # 3. Diversification scores
            diversification_metrics = {
                'S·ªë lo·∫°i t√†i s·∫£n': min(num_asset_types * 20, 100),  # Max 5 types = 100%
                'Ph√¢n b·ªï lo·∫°i TS': type_diversification,
                'S·ªë t√†i s·∫£n c√° bi·ªát': min(num_individual_assets * 5, 100),  # Max 20 assets = 100%
                'Ph√¢n b·ªï c√° bi·ªát': asset_diversification,
                'T·ªïng th·ªÉ': (type_diversification + asset_diversification + 
                            min(num_asset_types * 20, 100) + min(num_individual_assets * 5, 100)) / 4
            }
            
            metrics = list(diversification_metrics.keys())
            scores = list(diversification_metrics.values())
            
            bars = ax3.barh(metrics, scores, color=['blue', 'green', 'orange', 'red', 'purple'])
            ax3.set_title('ƒêi·ªÉm S·ªë ƒêa D·∫°ng H√≥a')
            ax3.set_xlabel('ƒêi·ªÉm (%)')
            ax3.set_xlim(0, 100)
            
            # Add score labels and color coding
            for i, (bar, score) in enumerate(zip(bars, scores)):
                if score >= 80:
                    color = 'green'
                    status = '‚úÖ'
                elif score >= 60:
                    color = 'orange'
                    status = 'üü°'
                else:
                    color = 'red'
                    status = 'üî¥'
                
                ax3.text(score + 2, i, f'{status} {score:.1f}%', va='center', color=color, fontweight='bold')
            
            # 4. Concentration risk analysis
            # Calculate what percentage is held in top assets
            sorted_asset_values = sorted(asset_details.values(), reverse=True)
            top_1_concentration = (sorted_asset_values[0] / total_value * 100) if len(sorted_asset_values) >= 1 else 0
            top_3_concentration = (sum(sorted_asset_values[:3]) / total_value * 100) if len(sorted_asset_values) >= 3 else top_1_concentration
            top_5_concentration = (sum(sorted_asset_values[:5]) / total_value * 100) if len(sorted_asset_values) >= 5 else top_3_concentration
            
            concentration_data = {
                'Top 1 t√†i s·∫£n': top_1_concentration,
                'Top 3 t√†i s·∫£n': top_3_concentration,
                'Top 5 t√†i s·∫£n': top_5_concentration,
                'C√≤n l·∫°i': 100 - top_5_concentration
            }
            
            ax4.pie(concentration_data.values(), labels=concentration_data.keys(), 
                   autopct='%1.1f%%', startangle=90)
            ax4.set_title('T·∫≠p Trung R·ªßi Ro')
            
            plt.tight_layout()
            plt.show()
            
            # Print detailed analysis
            print(f"üìä ƒêI·ªÇM S·ªê ƒêA D·∫†NG H√ìA T·ªîNG TH·ªÇ: {diversification_metrics['T·ªïng th·ªÉ']:.1f}/100")
            
            if diversification_metrics['T·ªïng th·ªÉ'] >= 80:
                overall_rating = "üü¢ Xu·∫•t s·∫Øc"
            elif diversification_metrics['T·ªïng th·ªÉ'] >= 60:
                overall_rating = "üü° T·ªët"
            elif diversification_metrics['T·ªïng th·ªÉ'] >= 40:
                overall_rating = "üü† Trung b√¨nh"
            else:
                overall_rating = "üî¥ C·∫ßn c·∫£i thi·ªán"
            
            print(f"üèÜ ƒê√°nh gi√°: {overall_rating}")
            print("-"*70)
            
            print(f"üìà Chi ti·∫øt ph√¢n t√≠ch:")
            print(f"   üè∑Ô∏è  S·ªë lo·∫°i t√†i s·∫£n: {num_asset_types}")
            print(f"   üéØ S·ªë t√†i s·∫£n c√° bi·ªát: {num_individual_assets}")
            print(f"   üìä Herfindahl Index (lo·∫°i): {herfindahl_types:.3f}")
            print(f"   üìä Herfindahl Index (c√° bi·ªát): {herfindahl_assets:.3f}")
            
            print(f"\nüéØ PH√ÇN B·ªî THEO LO·∫†I T√ÄI S·∫¢N:")
            for inv_type, value in sorted(portfolio_summary.items(), key=lambda x: x[1], reverse=True):
                percentage = (value / total_value) * 100
                if percentage > 40:
                    status = "üî¥ Qu√° t·∫≠p trung"
                elif percentage > 25:
                    status = "üü† T·∫≠p trung cao"
                elif percentage > 10:
                    status = "üü° H·ª£p l√Ω"
                else:
                    status = "üü¢ C√¢n b·∫±ng"
                
                print(f"   ‚Ä¢ {inv_type:<20}: {percentage:>6.1f}% {status}")
            
            print(f"\n‚ö†Ô∏è  PH√ÇN T√çCH R·ª¶I RO T·∫¨P TRUNG:")
            print(f"   ‚Ä¢ T√†i s·∫£n l·ªõn nh·∫•t chi·∫øm: {top_1_concentration:.1f}%")
            print(f"   ‚Ä¢ Top 3 t√†i s·∫£n chi·∫øm: {top_3_concentration:.1f}%")
            print(f"   ‚Ä¢ Top 5 t√†i s·∫£n chi·∫øm: {top_5_concentration:.1f}%")
            
            # Risk assessment
            if top_1_concentration > 50:
                print("   üî¥ R·ªßi ro t·∫≠p trung r·∫•t cao - m·ªôt t√†i s·∫£n chi·∫øm qu√° 50%")
            elif top_1_concentration > 30:
                print("   üü† R·ªßi ro t·∫≠p trung cao - n√™n gi·∫£m t·ª∑ tr·ªçng t√†i s·∫£n l·ªõn nh·∫•t")
            elif top_3_concentration > 70:
                print("   üü° C√≥ m·ªôt √≠t t·∫≠p trung ·ªü top 3 t√†i s·∫£n")
            else:
                print("   üü¢ Ph√¢n b·ªï t∆∞∆°ng ƒë·ªëi c√¢n b·∫±ng")
            
            # Recommendations
            print(f"\nüí° KHUY·∫æN NGH·ªä TƒÇNG C∆Ø·ªúNG ƒêA D·∫†NG H√ìA:")
            
            if num_asset_types < 4:
                print("   üìä Th√™m c√°c lo·∫°i t√†i s·∫£n m·ªõi (c·ªï phi·∫øu, qu·ªπ, v√†ng, b·∫•t ƒë·ªông s·∫£n)")
            
            if num_individual_assets < 10:
                print("   üéØ TƒÉng s·ªë l∆∞·ª£ng t√†i s·∫£n c√° bi·ªát trong m·ªói lo·∫°i")
            
            if top_1_concentration > 25:
                largest_asset = max(asset_details, key=asset_details.get)
                print(f"   ‚öñÔ∏è  Gi·∫£m t·ª∑ tr·ªçng '{largest_asset.split(' - ')[1]}' xu·ªëng d∆∞·ªõi 25%")
            
            if type_diversification < 60:
                print("   üåê C√¢n b·∫±ng l·∫°i t·ª∑ tr·ªçng gi·ªØa c√°c lo·∫°i t√†i s·∫£n")
            
            # Geographic diversification suggestion
            print(f"\nüåç KHUY·∫æN NGH·ªä ƒêA D·∫†NG H√ìA ƒê·ªäA L√ù:")
            print("   ‚Ä¢ Xem x√©t ƒë·∫ßu t∆∞ c·∫£ trong n∆∞·ªõc v√† qu·ªëc t·∫ø")
            print("   ‚Ä¢ ƒêa d·∫°ng h√≥a theo th·ªã tr∆∞·ªùng (Vi·ªát Nam, H√†n Qu·ªëc, M·ªπ, ch√¢u √Çu)")
            print("   ‚Ä¢ C√¢n nh·∫Øc ETF to√†n c·∫ßu ƒë·ªÉ tƒÉng ƒëa d·∫°ng h√≥a")
    
    def show_total_assets(self, button):
        """Hi·ªÉn th·ªã t·ªïng t√†i s·∫£n v·ªõi quy ƒë·ªïi ti·ªÅn t·ªá"""
        if not self.investment_data:
            with self.output:
                clear_output()
                print("‚ùå Ch∆∞a c√≥ d·ªØ li·ªáu ƒë·∫ßu t∆∞!")
            return
        
        with self.output:
            clear_output()
            
            print("="*80)
            print("üí∞ T·ªîNG H·ª¢P T√ÄI S·∫¢N ƒê·∫¶U T∆Ø")
            print("="*80)
            print(f"üí± T·ª∑ gi√° hi·ªán t·∫°i: 1 KRW = {self.exchange_rate} VND")
            print("-"*80)
            
            # Calculate totals in both currencies
            total_vnd = 0
            total_krw = 0
            asset_summary_vnd = {}
            asset_summary_krw = {}
            
            for inv in self.investment_data:
                inv_type = inv['type']
                amount_vnd = self.convert_currency(inv['amount'], inv['currency'], 'VND')
                amount_krw = self.convert_currency(inv['amount'], inv['currency'], 'KRW')
                
                total_vnd += amount_vnd
                total_krw += amount_krw
                
                asset_summary_vnd[inv_type] = asset_summary_vnd.get(inv_type, 0) + amount_vnd
                asset_summary_krw[inv_type] = asset_summary_krw.get(inv_type, 0) + amount_krw
            
            # Display totals
            print(f"üèÜ T·ªîNG T√ÄI S·∫¢N ƒê·∫¶U T∆Ø:")
            print(f"   üíµ VND: {total_vnd:>20,.0f}ƒë")
            print(f"   üí¥ KRW: {total_krw:>20,.0f}‚Ç©")
            print("-"*50)
            
            # Create visualization
            fig, ((ax1, ax2), (ax3, ax4)) = plt.subplots(2, 2, figsize=(16, 10))
            
            # 1. Total assets comparison
            currencies = ['VND', 'KRW']
            totals = [total_vnd, total_krw]
            
            bars = ax1.bar(currencies, totals, color=['red', 'blue'], alpha=0.7)
            ax1.set_title('T·ªïng T√†i S·∫£n Theo Ti·ªÅn T·ªá')
            ax1.set_ylabel('Gi√° tr·ªã')
            
            # Add value labels
            for bar, total in zip(bars, totals):
                ax1.text(bar.get_x() + bar.get_width()/2., bar.get_height() + max(totals)*0.02,
                        f'{total:,.0f}', ha='center', va='bottom', fontweight='bold')
            
            # 2. Asset allocation in VND
            types_vnd = list(asset_summary_vnd.keys())
            values_vnd = list(asset_summary_vnd.values())
            
            ax2.pie(values_vnd, labels=types_vnd, autopct='%1.1f%%', startangle=90)
            ax2.set_title('Ph√¢n B·ªï T√†i S·∫£n (VND)')
            
            # 3. Asset allocation in KRW
            types_krw = list(asset_summary_krw.keys())
            values_krw = list(asset_summary_krw.values())
            
            ax3.pie(values_krw, labels=types_krw, autopct='%1.1f%%', startangle=90)
            ax3.set_title('Ph√¢n B·ªï T√†i S·∫£n (KRW)')
            
            # 4. Exchange rate impact analysis
            # Show how much each asset type would change with ¬±10% exchange rate
            exchange_impact = {}
            for inv_type in asset_summary_vnd.keys():
                # Original values
                vnd_value = asset_summary_vnd[inv_type]
                krw_value = asset_summary_krw[inv_type]
                
                # Calculate impact of exchange rate change
                # If KRW portion exists, calculate impact
                krw_portion = 0
                for inv in self.investment_data:
                    if inv['type'] == inv_type and inv['currency'] == 'KRW':
                        krw_portion += inv['amount']
                
                # Impact of ¬±10% exchange rate change on VND value
                impact_10_percent = krw_portion * self.exchange_rate * 0.1
                exchange_impact[inv_type] = impact_10_percent
            
            if any(impact > 0 for impact in exchange_impact.values()):
                impact_types = list(exchange_impact.keys())
                impact_values = list(exchange_impact.values())
                
                ax4.barh(impact_types, impact_values, color='orange', alpha=0.7)
                ax4.set_title('T√°c ƒê·ªông T·ª∑ Gi√° ¬±10% (VND)')
                ax4.set_xlabel('Thay ƒë·ªïi gi√° tr·ªã (VND)')
            else:
                ax4.text(0.5, 0.5, 'Kh√¥ng c√≥ t√†i s·∫£n KRW\nho·∫∑c t√°c ƒë·ªông nh·ªè', 
                        ha='center', va='center', transform=ax4.transAxes)
                ax4.set_title('T√°c ƒê·ªông T·ª∑ Gi√°')
            
            plt.tight_layout()
            plt.show()
            
            # Detailed breakdown
            print(f"üìä CHI TI·∫æT THEO LO·∫†I T√ÄI S·∫¢N:")
            print(f"{'Lo·∫°i t√†i s·∫£n':<20} {'VND':<20} {'KRW':<20} {'% T·ªïng':<10}")
            print("-"*75)
            
            for inv_type in sorted(asset_summary_vnd.keys(), key=lambda x: asset_summary_vnd[x], reverse=True):
                vnd_value = asset_summary_vnd[inv_type]
                krw_value = asset_summary_krw[inv_type]
                percentage = (vnd_value / total_vnd) * 100
                
                print(f"{inv_type:<20} {vnd_value:>15,.0f}ƒë {krw_value:>15,.0f}‚Ç© {percentage:>6.1f}%")
            
            # Currency composition analysis
            print(f"\nüí± PH√ÇN T√çCH TH√ÄNH PH·∫¶N TI·ªÄN T·ªÜ:")
            
            vnd_investments = sum(1 for inv in self.investment_data if inv['currency'] == 'VND')
            krw_investments = sum(1 for inv in self.investment_data if inv['currency'] == 'KRW')
            total_investments = len(self.investment_data)
            
            vnd_value_original = sum(inv['amount'] for inv in self.investment_data if inv['currency'] == 'VND')
            krw_value_original = sum(inv['amount'] for inv in self.investment_data if inv['currency'] == 'KRW')
            
            print(f"   üìä S·ªë giao d·ªãch VND: {vnd_investments} ({vnd_investments/total_investments*100:.1f}%)")
            print(f"   üìä S·ªë giao d·ªãch KRW: {krw_investments} ({krw_investments/total_investments*100:.1f}%)")
            print(f"   üí∞ Gi√° tr·ªã g·ªëc VND: {vnd_value_original:,.0f}ƒë")
            print(f"   üí∞ Gi√° tr·ªã g·ªëc KRW: {krw_value_original:,.0f}‚Ç©")
            
            # Exchange rate sensitivity
            if krw_value_original > 0:
                sensitivity = (krw_value_original * self.exchange_rate) / total_vnd * 100
                print(f"\n‚öñÔ∏è  ƒê·ªò NH·∫†Y C·∫¢M T·ª∂ GI√Å:")
                print(f"   üìà {sensitivity:.1f}% danh m·ª•c ch·ªãu ·∫£nh h∆∞·ªüng t·ª∑ gi√° KRW/VND")
                
                if sensitivity > 50:
                    print("   üî¥ R·ªßi ro t·ª∑ gi√° cao - c·∫ßn c√¢n nh·∫Øc hedging")
                elif sensitivity > 25:
                    print("   üü° R·ªßi ro t·ª∑ gi√° v·ª´a ph·∫£i - theo d√µi th∆∞·ªùng xuy√™n")
                else:
                    print("   üü¢ R·ªßi ro t·ª∑ gi√° th·∫•p")
                
                # Show impact scenarios
                print(f"\nüìä K·ªäCH B·∫¢N T·ª∂ GI√Å:")
                scenarios = [0.9, 0.95, 1.0, 1.05, 1.1]
                print(f"   {'T·ª∑ gi√°':<10} {'T·ªïng VND':<20} {'Thay ƒë·ªïi':<15}")
                print("   " + "-"*45)
                
                for scenario in scenarios:
                    new_rate = self.exchange_rate * scenario
                    new_total_vnd = vnd_value_original + (krw_value_original * new_rate)
                    change = ((new_total_vnd - total_vnd) / total_vnd) * 100
                    
                    print(f"   {new_rate:>7.1f} {new_total_vnd:>15,.0f}ƒë {change:>+10.1f}%")
    
    def export_investment_report(self, button):
        """Xu·∫•t b√°o c√°o ƒë·∫ßu t∆∞ chi ti·∫øt"""
        if not self.investment_data:
            with self.output:
                clear_output()
                print("‚ùå Ch∆∞a c√≥ d·ªØ li·ªáu ƒë·ªÉ xu·∫•t b√°o c√°o!")
            return
        
        try:
            filename = f'BaoCaoPhongMucDauTu_{datetime.now().strftime("%Y%m%d_%H%M%S")}.xlsx'
            
            with pd.ExcelWriter(filename) as writer:
                # Sheet 1: Raw investment data
                df_raw = pd.DataFrame(self.investment_data)
                df_raw['amount_vnd'] = df_raw.apply(
                    lambda row: self.convert_currency(row['amount'], row['currency'], 'VND'), axis=1
                )
                df_raw['amount_krw'] = df_raw.apply(
                    lambda row: self.convert_currency(row['amount'], row['currency'], 'KRW'), axis=1
                )
                df_raw.to_excel(writer, sheet_name='D·ªØ li·ªáu G·ªëc', index=False)
                
                # Sheet 2: Portfolio summary
                portfolio_summary = {}
                for inv in self.investment_data:
                    inv_type = inv['type']
                    amount_vnd = self.convert_currency(inv['amount'], inv['currency'], 'VND')
                    amount_krw = self.convert_currency(inv['amount'], inv['currency'], 'KRW')
                    
                    if inv_type not in portfolio_summary:
                        portfolio_summary[inv_type] = {'vnd': 0, 'krw': 0, 'count': 0}
                    
                    portfolio_summary[inv_type]['vnd'] += amount_vnd
                    portfolio_summary[inv_type]['krw'] += amount_krw
                    portfolio_summary[inv_type]['count'] += 1
                
                summary_df = pd.DataFrame([
                    {
                        'Lo·∫°i t√†i s·∫£n': inv_type,
                        'Gi√° tr·ªã VND': data['vnd'],
                        'Gi√° tr·ªã KRW': data['krw'],
                        'S·ªë giao d·ªãch': data['count'],
                        'T·ª∑ tr·ªçng (%)': (data['vnd'] / sum(d['vnd'] for d in portfolio_summary.values())) * 100
                    } for inv_type, data in portfolio_summary.items()
                ])
                summary_df.to_excel(writer, sheet_name='T·ªïng h·ª£p Danh m·ª•c', index=False)
                
                # Sheet 3: Target allocation vs Current
                if self.target_allocation:
                    allocation_data = []
                    total_value = sum(data['vnd'] for data in portfolio_summary.values())
                    
                    all_types = set(list(portfolio_summary.keys()) + list(self.target_allocation.keys()))
                    for asset_type in all_types:
                        current_value = portfolio_summary.get(asset_type, {}).get('vnd', 0)
                        current_pct = (current_value / total_value * 100) if total_value > 0 else 0
                        target_pct = self.target_allocation.get(asset_type, 0)
                        deviation = current_pct - target_pct
                        
                        allocation_data.append({
                            'Lo·∫°i t√†i s·∫£n': asset_type,
                            'Hi·ªán t·∫°i (%)': current_pct,
                            'M·ª•c ti√™u (%)': target_pct,
                            'ƒê·ªô l·ªách (%)': deviation,
                            'Gi√° tr·ªã hi·ªán t·∫°i (VND)': current_value,
                            'Gi√° tr·ªã m·ª•c ti√™u (VND)': (target_pct / 100) * total_value,
                            'C·∫ßn ƒëi·ªÅu ch·ªânh (VND)': ((target_pct / 100) * total_value) - current_value
                        })
                    
                    allocation_df = pd.DataFrame(allocation_data)
                    allocation_df.to_excel(writer, sheet_name='Ph√¢n t√≠ch Ph√¢n b·ªï', index=False)
                
                # Sheet 4: Performance metrics
                df_perf = pd.DataFrame(self.investment_data)
                df_perf['date'] = pd.to_datetime(df_perf['date'])
                df_perf = df_perf.sort_values('date')
                df_perf['amount_vnd'] = df_perf.apply(
                    lambda row: self.convert_currency(row['amount'], row['currency'], 'VND'), axis=1
                )
                df_perf['cumulative_vnd'] = df_perf['amount_vnd'].cumsum()
                
                # Monthly summary
                monthly_perf = df_perf.groupby(df_perf['date'].dt.to_period('M')).agg({
                    'amount_vnd': ['sum', 'count', 'mean'],
                    'type': lambda x: ', '.join(x.unique())
                }).round(0)
                
                monthly_perf.columns = ['T·ªïng ƒë·∫ßu t∆∞ (VND)', 'S·ªë giao d·ªãch', 'TB/giao d·ªãch (VND)', 'Lo·∫°i t√†i s·∫£n']
                monthly_perf.to_excel(writer, sheet_name='Hi·ªáu su·∫•t H√†ng th√°ng')
                
                # Sheet 5: Current prices (if any)
                if self.current_prices:
                    prices_data = []
                    for asset_key, price_info in self.current_prices.items():
                        prices_data.append({
                            'T√†i s·∫£n': asset_key,
                            'Gi√° hi·ªán t·∫°i': price_info['price'],
                            'ƒê∆°n v·ªã': price_info['currency'],
                            'Ng√†y c·∫≠p nh·∫≠t': price_info['date'],
                            'Gi√° quy ƒë·ªïi VND': self.convert_currency(price_info['price'], price_info['currency'], 'VND'),
                            'Gi√° quy ƒë·ªïi KRW': self.convert_currency(price_info['price'], price_info['currency'], 'KRW')
                        })
                    
                    prices_df = pd.DataFrame(prices_data)
                    prices_df.to_excel(writer, sheet_name='Gi√° Hi·ªán t·∫°i', index=False)
                
                # Sheet 6: Settings
                settings_data = [{
                    'Tham s·ªë': 'T·ª∑ gi√° KRW/VND',
                    'Gi√° tr·ªã': self.exchange_rate,
                    'ƒê∆°n v·ªã': 'VND per KRW',
                    'Ng√†y c·∫≠p nh·∫≠t': datetime.now().date()
                }]
                
                if self.target_allocation:
                    for asset_type, target_pct in self.target_allocation.items():
                        settings_data.append({
                            'Tham s·ªë': f'T·ª∑ l·ªá m·ª•c ti√™u - {asset_type}',
                            'Gi√° tr·ªã': target_pct,
                            'ƒê∆°n v·ªã': '%',
                            'Ng√†y c·∫≠p nh·∫≠t': datetime.now().date()
                        })
                
                settings_df = pd.DataFrame(settings_data)
                settings_df.to_excel(writer, sheet_name='C√†i ƒë·∫∑t', index=False)
            
            with self.output:
                clear_output()
                print(f"‚úÖ ƒê√£ xu·∫•t b√°o c√°o ƒë·∫ßu t∆∞ chi ti·∫øt: {filename}")
                print("üìä File bao g·ªìm c√°c sheet:")
                print("   ‚Ä¢ D·ªØ li·ªáu G·ªëc - T·∫•t c·∫£ giao d·ªãch ƒë·∫ßu t∆∞")
                print("   ‚Ä¢ T·ªïng h·ª£p Danh m·ª•c - Ph√¢n b·ªï theo lo·∫°i t√†i s·∫£n")
                if self.target_allocation:
                    print("   ‚Ä¢ Ph√¢n t√≠ch Ph√¢n b·ªï - So s√°nh v·ªõi m·ª•c ti√™u")
                print("   ‚Ä¢ Hi·ªáu su·∫•t H√†ng th√°ng - Th·ªëng k√™ theo th√°ng")
                if self.current_prices:
                    print("   ‚Ä¢ Gi√° Hi·ªán t·∫°i - Gi√° t√†i s·∫£n c·∫≠p nh·∫≠t")
                print("   ‚Ä¢ C√†i ƒë·∫∑t - T·ª∑ gi√° v√† m·ª•c ti√™u ph√¢n b·ªï")
                
        except Exception as e:
            with self.output:
                clear_output()
                print(f"‚ùå L·ªói khi xu·∫•t b√°o c√°o: {str(e)}")
    
    def save_settings(self):
        """L∆∞u c√†i ƒë·∫∑t t·ª∑ gi√°"""
        try:
            settings_df = pd.DataFrame([{
                'parameter': 'exchange_rate',
                'value': self.exchange_rate,
                'updated_date': datetime.now().date()
            }])
            settings_df.to_csv(self.data_files['settings'], index=False, encoding='utf-8-sig')
        except Exception as e:
            print(f"L·ªói khi l∆∞u c√†i ƒë·∫∑t: {str(e)}")
    
    def save_current_prices(self):
        """L∆∞u gi√° hi·ªán t·∫°i"""
        try:
            if self.current_prices:
                prices_data = []
                for asset_key, price_info in self.current_prices.items():
                    prices_data.append({
                        'asset': asset_key,
                        'price': price_info['price'],
                        'currency': price_info['currency'],
                        'date': price_info['date']
                    })
                
                prices_df = pd.DataFrame(prices_data)
                prices_df.to_csv(self.data_files['investment_prices'], index=False, encoding='utf-8-sig')
        except Exception as e:
            print(f"L·ªói khi l∆∞u gi√°: {str(e)}")
    
    def save_target_allocation(self):
        """L∆∞u t·ª∑ l·ªá ph√¢n b·ªï m·ª•c ti√™u"""
        try:
            if self.target_allocation:
                allocation_data = []
                for asset_type, target_pct in self.target_allocation.items():
                    allocation_data.append({
                        'asset_type': asset_type,
                        'target_percent': target_pct
                    })
                
                allocation_df = pd.DataFrame(allocation_data)
                allocation_df.to_csv(self.data_files['target_allocation'], index=False, encoding='utf-8-sig')
        except Exception as e:
            print(f"L·ªói khi l∆∞u ph√¢n b·ªï m·ª•c ti√™u: {str(e)}")
    
    def load_data(self):
        """T·∫£i d·ªØ li·ªáu t·ª´ c√°c file"""
        # Load settings
        try:
            df = pd.read_csv(self.data_files['settings'], encoding='utf-8-sig')
            for _, row in df.iterrows():
                if row['parameter'] == 'exchange_rate':
                    self.exchange_rate = float(row['value'])
                    self.exchange_rate_input.value = self.exchange_rate
            print(f"‚úÖ ƒê√£ load c√†i ƒë·∫∑t t·ª∑ gi√°: {self.exchange_rate}")
        except FileNotFoundError:
            print("üìù Ch∆∞a c√≥ file c√†i ƒë·∫∑t - s·ª≠ d·ª•ng m·∫∑c ƒë·ªãnh")
        except Exception as e:
            print(f"‚ö†Ô∏è  L·ªói khi load c√†i ƒë·∫∑t: {str(e)}")
        
        # Load current prices
        try:
            df = pd.read_csv(self.data_files['investment_prices'], encoding='utf-8-sig')
            self.current_prices = {}
            for _, row in df.iterrows():
                self.current_prices[row['asset']] = {
                    'price': float(row['price']),
                    'currency': row['currency'],
                    'date': pd.to_datetime(row['date']).date()
                }
            print(f"‚úÖ ƒê√£ load {len(self.current_prices)} gi√° t√†i s·∫£n")
        except FileNotFoundError:
            print("üìù Ch∆∞a c√≥ file gi√° t√†i s·∫£n")
        except Exception as e:
            print(f"‚ö†Ô∏è  L·ªói khi load gi√°: {str(e)}")
        
        # Load target allocation
        try:
            df = pd.read_csv(self.data_files['target_allocation'], encoding='utf-8-sig')
            self.target_allocation = {}
            for _, row in df.iterrows():
                self.target_allocation[row['asset_type']] = float(row['target_percent'])
            print(f"‚úÖ ƒê√£ load t·ª∑ l·ªá ph√¢n b·ªï m·ª•c ti√™u cho {len(self.target_allocation)} lo·∫°i t√†i s·∫£n")
        except FileNotFoundError:
            print("üìù Ch∆∞a c√≥ file ph√¢n b·ªï m·ª•c ti√™u")
        except Exception as e:
            print(f"‚ö†Ô∏è  L·ªói khi load ph√¢n b·ªï m·ª•c ti√™u: {str(e)}")
    
    def save_all_data(self, button):
        """L∆∞u t·∫•t c·∫£ d·ªØ li·ªáu"""
        try:
            self.save_settings()
            self.save_current_prices()
            self.save_target_allocation()
            
            with self.output:
                clear_output()
                print("‚úÖ ƒê√£ l∆∞u t·∫•t c·∫£ d·ªØ li·ªáu!")
                print("üìÅ C√°c file ƒë∆∞·ª£c t·∫°o:")
                print("   ‚Ä¢ investment_settings.csv - C√†i ƒë·∫∑t t·ª∑ gi√°")
                print("   ‚Ä¢ investment_current_prices.csv - Gi√° hi·ªán t·∫°i")
                print("   ‚Ä¢ target_allocation.csv - Ph√¢n b·ªï m·ª•c ti√™u")
        except Exception as e:
            with self.output:
                clear_output()
                print(f"‚ùå L·ªói khi l∆∞u d·ªØ li·ªáu: {str(e)}")
    
    def load_all_data(self, button):
        """T·∫£i l·∫°i t·∫•t c·∫£ d·ªØ li·ªáu"""
        try:
            self.load_data()
            self.update_asset_dropdown()
            
            with self.output:
                clear_output()
                print("‚úÖ ƒê√£ t·∫£i l·∫°i t·∫•t c·∫£ d·ªØ li·ªáu!")
                print(f"üìä T·ª∑ gi√°: 1 KRW = {self.exchange_rate} VND")
                print(f"üìä Gi√° t√†i s·∫£n: {len(self.current_prices)} m·ª•c")
                print(f"üìä Ph√¢n b·ªï m·ª•c ti√™u: {len(self.target_allocation)} lo·∫°i")
        except Exception as e:
            with self.output:
                clear_output()
                print(f"‚ùå L·ªói khi t·∫£i d·ªØ li·ªáu: {str(e)}")
    
    def clear_all_data(self, button):
        """X√≥a t·∫•t c·∫£ d·ªØ li·ªáu"""
        import os
        
        try:
            # Clear memory data
            self.investment_data = []
            self.current_prices = {}
            self.target_allocation = {}
            self.exchange_rate = 18.0
            
            # Update UI
            self.exchange_rate_input.value = 18.0
            self.update_asset_dropdown()
            
            # Remove files
            for filename in self.data_files.values():
                if os.path.exists(filename):
                    os.remove(filename)
            
            with self.output:
                clear_output()
                print("‚ö†Ô∏è  ƒê√£ x√≥a to√†n b·ªô d·ªØ li·ªáu v√† file!")
                print("üìù B·∫°n c√≥ th·ªÉ b·∫Øt ƒë·∫ßu import d·ªØ li·ªáu m·ªõi.")
        except Exception as e:
            with self.output:
                clear_output()
                print(f"‚ùå L·ªói khi x√≥a d·ªØ li·ªáu: {str(e)}")
    
    def display(self):
        return self.main_layout

# H√†m t·∫°o ·ª©ng d·ª•ng
def create_investment_analyzer():
    """
    H√†m kh·ªüi t·∫°o ·ª©ng d·ª•ng ph√¢n t√≠ch danh m·ª•c ƒë·∫ßu t∆∞
    """
    analyzer = InvestmentPortfolioAnalyzer()
    return analyzer.display()

# H∆∞·ªõng d·∫´n s·ª≠ d·ª•ng
def show_usage_guide():
    """
    Hi·ªÉn th·ªã h∆∞·ªõng d·∫´n s·ª≠ d·ª•ng ·ª©ng d·ª•ng
    """
    guide = """
    üìñ H∆Ø·ªöNG D·∫™N S·ª¨ D·ª§NG ·ª®NG D·ª§NG PH√ÇN T√çCH DANH M·ª§C ƒê·∫¶U T∆Ø
    
    üîß B∆Ø·ªöC 1: C√ÄI ƒê·∫∂T BAN ƒê·∫¶U
    ‚îú‚îÄ‚îÄ C·∫≠p nh·∫≠t t·ª∑ gi√° KRW/VND hi·ªán t·∫°i
    ‚îú‚îÄ‚îÄ Import d·ªØ li·ªáu t·ª´ file finance_data_savings.csv
    ‚îî‚îÄ‚îÄ Thi·∫øt l·∫≠p t·ª∑ l·ªá ph√¢n b·ªï m·ª•c ti√™u cho t·ª´ng lo·∫°i t√†i s·∫£n
    
    üí∞ B∆Ø·ªöC 2: C·∫¨P NH·∫¨T GI√Å T√ÄI S·∫¢N (t√πy ch·ªçn)
    ‚îú‚îÄ‚îÄ Ch·ªçn t√†i s·∫£n t·ª´ dropdown
    ‚îú‚îÄ‚îÄ Nh·∫≠p gi√° hi·ªán t·∫°i v√† ƒë∆°n v·ªã ti·ªÅn t·ªá
    ‚îî‚îÄ‚îÄ C·∫≠p nh·∫≠t ƒë·ªÉ ph√¢n t√≠ch hi·ªáu su·∫•t ch√≠nh x√°c
    
    üìä B∆Ø·ªöC 3: PH√ÇN T√çCH DANH M·ª§C
    ‚îú‚îÄ‚îÄ T·ªïng quan Danh m·ª•c - Xem ph√¢n b·ªï t·ªïng th·ªÉ
    ‚îú‚îÄ‚îÄ Hi·ªáu su·∫•t ƒê·∫ßu t∆∞ - Ph√¢n t√≠ch xu h∆∞·ªõng ƒë·∫ßu t∆∞
    ‚îú‚îÄ‚îÄ Ph√¢n t√≠ch Ph√¢n b·ªï - So s√°nh v·ªõi m·ª•c ti√™u
    ‚îú‚îÄ‚îÄ Khuy·∫øn ngh·ªã C√¢n b·∫±ng - H√†nh ƒë·ªông c·∫ßn th·ª±c hi·ªán
    ‚îî‚îÄ‚îÄ Ph√¢n t√≠ch R·ªßi ro - ƒê√°nh gi√° m·ª©c ƒë·ªô r·ªßi ro
    
    üî¨ B∆Ø·ªöC 4: PH√ÇN T√çCH N√ÇNG CAO
    ‚îú‚îÄ‚îÄ Xu h∆∞·ªõng ƒê·∫ßu t∆∞ - Ph√¢n t√≠ch theo th·ªùi gian
    ‚îú‚îÄ‚îÄ ƒêa d·∫°ng h√≥a - ƒê√°nh gi√° m·ª©c ƒë·ªô ƒëa d·∫°ng
    ‚îî‚îÄ‚îÄ T·ªïng T√†i s·∫£n - Quy ƒë·ªïi ti·ªÅn t·ªá
    
    üìÑ B∆Ø·ªöC 5: XU·∫§T B√ÅO C√ÅO
    ‚îî‚îÄ‚îÄ Xu·∫•t file Excel chi ti·∫øt v·ªõi t·∫•t c·∫£ ph√¢n t√≠ch
    
    üíæ L∆ØU √ù:
    ‚Ä¢ D·ªØ li·ªáu s·∫Ω ƒë∆∞·ª£c l∆∞u t·ª± ƒë·ªông v√†o c√°c file CSV
    ‚Ä¢ C√≥ th·ªÉ import d·ªØ li·ªáu t·ª´ ·ª©ng d·ª•ng finance tracker
    ‚Ä¢ H·ªó tr·ª£ ƒë·∫ßy ƒë·ªß VND v√† KRW v·ªõi t·ª∑ gi√° linh ho·∫°t
    """
    
    print(guide)

# Kh·ªüi ch·∫°y ·ª©ng d·ª•ng
if __name__ == "__main__":
    print("üöÄ Kh·ªüi ƒë·ªông ·ª©ng d·ª•ng ph√¢n t√≠ch danh m·ª•c ƒë·∫ßu t∆∞...")
    show_usage_guide()
    print("\n" + "="*50)
    print("üì± Ch·∫°y l·ªánh sau ƒë·ªÉ b·∫Øt ƒë·∫ßu:")
    print("investment_app = create_investment_analyzer()")
    print("display(investment_app)")
    print("="*50)
            print(f"üéØ PH√ÇN T√çCH PH√ÇN B·ªî DANH M·ª§C ({display_currency})")
            print("="*70)
            print(f"üí∞ T·ªïng gi√° tr·ªã danh m·ª•c: {self.format_currency(total_value, display_currency)}")
            print("-"*70)
            
            # Create comparison visualization
            fig, (ax1, ax2) = plt.subplots(1, 2, figsize=(16, 8))
            
            # Prepare data for comparison
            all_types = set(list(current_allocation_pct.keys()) + list(self.target_allocation.keys()))
            
            current_values = [current_allocation_pct.get(t, 0) for t in all_types]
            target_values = [self.target_allocation.get(t, 0) for t in all_types]
            
            # Bar chart comparison
            x = np.arange(len(all_types))
            width = 0.35
            
            bars1 = ax1.bar(x - width/2, current_values, width, label='Hi·ªán t·∫°i', alpha=0.8, color='lightblue')
            bars2 = ax1.bar(x + width/2, target_values, width, label='M·ª•c ti√™u', alpha=0.8, color='orange')
            
            ax1.set_title('So S√°nh Ph√¢n B·ªï Hi·ªán T·∫°i vs M·ª•c Ti√™u')
            ax1.set_ylabel('T·ª∑ l·ªá (%)')
            ax1.set_xticks(x)
            ax1.set_xticklabels(all_types, rotation=45)
            ax1.legend()
            ax1.grid(axis='y', alpha=0.3)
            
            # Add value labels
            for bar in bars1:
                height = bar.get_height()
                ax1.text(bar.get_x() + bar.get_width()/2., height + 0.5,
                        f'{height:.1f}%', ha='center', va='bottom', fontsize=8)
            
            for bar in bars2:
                height = bar.get_height()
                ax1.text(bar.get_x() + bar.get_width()/2., height + 0.5,
                        f'{height:.1f}%', ha='center', va='bottom', fontsize=8)
            
            # Deviation analysis
            deviations = []
            for asset_type in all_types:
                current_pct = current_allocation_pct.get(asset_type, 0)
                target_pct = self.target_allocation.get(asset_type, 0)
                deviation = current_pct - target_pct
                deviations.append((asset_type, deviation))
            
            # Sort by absolute deviation
            deviations.sort(key=lambda x: abs(x[1]), reverse=True)
            
            # Plot deviations
            deviation_types = [d[0] for d in deviations]
            deviation_values = [d[1] for d in deviations]
            colors = ['red' if x < 0 else 'green' for x in deviation_values]
            
            ax2.barh(deviation_types, deviation_values, color=colors, alpha=0.7)
            ax2.set_title('ƒê·ªô L·ªách So V·ªõi M·ª•c Ti√™u')
            ax2.set_xlabel('ƒê·ªô l·ªách (%)')
            ax2.axvline(x=0, color='black', linestyle='-', alpha=0.5)
            ax2.grid(axis='x', alpha=0.3)
            
            plt.tight_layout()
            plt.show()
            
            # Print detailed analysis
            print("\nüìä PH√ÇN T√çCH CHI TI·∫æT:")
            print(f"{'Lo·∫°i t√†i s·∫£n':<20} {'Hi·ªán t·∫°i':<12} {'M·ª•c ti√™u':<12} {'ƒê·ªô l·ªách':<12} {'Tr·∫°ng th√°i':<15}")
            print("-"*75)
            
            total_deviation = 0
            for asset_type in all_types:
                current_pct = current_allocation_pct.get(asset_type, 0)
                target_pct = self.target_allocation.get(asset_type, 0)
                deviation = current_pct - target_pct
                total_deviation += abs(deviation)
                
                if deviation > 5:
                    status = "üî¥ Th·ª´a nhi·ªÅu"
                elif deviation > 1:
                    status = "üü° Th·ª´a √≠t"
                elif deviation < -5:
                    status = "üîµ Thi·∫øu nhi·ªÅu"
                elif deviation < -1:
                    status = "üü† Thi·∫øu √≠t"
                else:
                    status = "‚úÖ C√¢n b·∫±ng"
                
                current_value = current_allocation.get(asset_type, 0)
                print(f"{asset_type:<20} {current_pct:>8.1f}% {target_pct:>8.1f}% {deviation:>+8.1f}% {status:<15}")
                print(f"{'':>20} {self.format_currency(current_value, display_currency)}")
            
            print("-"*75)
            print(f"üìà T·ªïng ƒë·ªô l·ªách tuy·ªát ƒë·ªëi: {total_deviation:.1f}%")
            
            if total_deviation < 5:
                print("‚úÖ Danh m·ª•c ƒë√£ c√¢n b·∫±ng t·ªët!")
            elif total_deviation < 15:
                print("üü° Danh m·ª•c c·∫ßn ƒëi·ªÅu ch·ªânh nh·∫π")
            else:
                print("üî¥ Danh m·ª•c c·∫ßn c√¢n b·∫±ng l·∫°i!")
    
    def show_rebalance_recommendation(self, button):
        """ƒê∆∞a ra khuy·∫øn ngh·ªã c√¢n b·∫±ng l·∫°i danh m·ª•c"""
        if not self.investment_data or not self.target_allocation:
            with self.output:
                clear_output()
                print("‚ùå C·∫ßn c√≥ d·ªØ li·ªáu ƒë·∫ßu t∆∞ v√† t·ª∑ l·ªá ph√¢n b·ªï m·ª•c ti√™u!")
            return
        
        display_currency = self.currency_display.value
        
        with self.output:
            clear_output()
            
            # Calculate current allocation
            current_allocation = {}
            total_value = 0
            
            for inv in self.investment_data:
                inv_type = inv['type']
                amount = self.convert_currency(inv['amount'], inv['currency'], display_currency)
                current_allocation[inv_type] = current_allocation.get(inv_type, 0) + amount
                total_value += amount
            
            print("="*80)
            print("üîÑ KHUY·∫æN NGH·ªä C√ÇN B·∫∞NG L·∫†I DANH M·ª§C ƒê·∫¶U T∆Ø")
            print("="*80)
            print(f"üí∞ T·ªïng gi√° tr·ªã danh m·ª•c: {self.format_currency(total_value, display_currency)}")
            print("-"*80)
            
            # Calculate target values and recommendations
            recommendations = []
            
            for asset_type, target_pct in self.target_allocation.items():
                target_value = (target_pct / 100) * total_value
                current_value = current_allocation.get(asset_type, 0)
                difference = target_value - current_value
                
                recommendations.append({
                    'type': asset_type,
                    'current': current_value,
                    'target': target_value,
                    'difference': difference,
                    'action': 'Mua th√™m' if difference > 0 else 'B√°n b·ªõt'
                })
            
            # Sort by absolute difference
            recommendations.sort(key=lambda x: abs(x['difference']), reverse=True)
            
            # Create visualization
            fig, (ax1, ax2) = plt.subplots(1, 2, figsize=(16, 8))
            
            # Current vs Target values
            asset_types = [r['type'] for r in recommendations]
            current_values = [r['current'] for r in recommendations]
            target_values = [r['target'] for r in recommendations]
            
            x = np.arange(len(asset_types))
            width = 0.35
            
            ax1.bar(x - width/2, current_values, width, label='Hi·ªán t·∫°i', alpha=0.8)
            ax1.bar(x + width/2, target_values, width, label='M·ª•c ti√™u', alpha=0.8)
            ax1.set_title('Gi√° Tr·ªã Hi·ªán T·∫°i vs M·ª•c Ti√™u')
            ax1.set_ylabel(f'Gi√° tr·ªã ({display_currency})')
            ax1.set_xticks(x)
            ax1.set_xticklabels(asset_types, rotation=45)
            ax1.legend()
            
            # Rebalance actions
            differences = [r['difference'] for r in recommendations]
            colors = ['green' if x > 0 else 'red' for x in differences]
            
            ax2.barh(asset_types, differences, color=colors, alpha=0.7)
            ax2.set_title('H√†nh ƒê·ªông C·∫ßn Th·ª±c Hi·ªán')
            ax2.set_xlabel(f'S·ªë ti·ªÅn c·∫ßn ƒëi·ªÅu ch·ªânh ({display_currency})')
            ax2.axvline(x=0, color='black', linestyle='-', alpha=0.5)
            
            plt.tight_layout()
            plt.show()
            
            # Print detailed recommendations
            print("\nüéØ KHUY·∫æN NGH·ªä CHI TI·∫æT:")
            print("-"*80)
            
            total_buy = 0
            total_sell = 0
            
            for rec in recommendations:
                if abs(rec['difference']) < total_value * 0.01:  # Less than 1% of portfolio
                    continue
                
                print(f"\nüìä {rec['type']}:")
                print(f"   üí∞ Gi√° tr·ªã hi·ªán t·∫°i: {self.format_currency(rec['current'], display_currency)}")
                print(f"   üéØ Gi√° tr·ªã m·ª•c ti√™u:  {self.format_currency(rec['target'], display_currency)}")
                
                if rec['difference'] > 0:
                    print(f"   üü¢ {rec['action']}: {self.format_currency(rec['difference'], display_currency)}")
                    total_buy += rec['difference']
                    
                    # Suggest specific actions
                    if rec['type'] == 'C·ªï phi·∫øu':
                        print(f"      üí° G·ª£i √Ω: Mua th√™m c·ªï phi·∫øu blue-chip ho·∫∑c ETF")
                    elif rec['type'] == 'Qu·ªπ':
                        print(f"      üí° G·ª£i √Ω: ƒê·∫ßu t∆∞ th√™m v√†o qu·ªπ ƒëang c√≥ hi·ªáu su·∫•t t·ªët")
                    elif rec['type'] == 'Ti·ªÅn g·ª≠i':
                        print(f"      üí° G·ª£i √Ω: G·ª≠i ti·∫øt ki·ªám k·ª≥ h·∫°n c√≥ l√£i su·∫•t cao")
                else:
                    print(f"   üî¥ {rec['action']}: {self.format_currency(abs(rec['difference']), display_currency)}")
                    total_sell += abs(rec['difference'])
                    
                    # Suggest specific actions
                    if rec['type'] == 'C·ªï phi·∫øu':
                        print(f"      üí° G·ª£i √Ω: B√°n c·ªï phi·∫øu ƒë√£ l√£i ho·∫∑c c·∫Øt l·ªó")
                    elif rec['type'] == 'Qu·ªπ':
                        print(f"      üí° G·ª£i √Ω: R√∫t m·ªôt ph·∫ßn t·ª´ qu·ªπ c√≥ hi·ªáu su·∫•t th·∫•p")
            
            print("\n" + "="*80)
            print("üìã T·ªîNG K·∫æT H√ÄNH ƒê·ªòNG:")
            print(f"üü¢ T·ªïng s·ªë ti·ªÅn c·∫ßn mua th√™m: {self.format_currency(total_buy, display_currency)}")
            print(f"üî¥ T·ªïng s·ªë ti·ªÅn c·∫ßn b√°n b·ªõt:  {self.format_currency(total_sell, display_currency)}")
            
            if abs(total_buy - total_sell) < total_value * 0.001:
                print("‚úÖ Danh m·ª•c s·∫Ω ƒë∆∞·ª£c c√¢n b·∫±ng ho√†n h·∫£o!")
            else:
                net_cash_needed = total_buy - total_sell
                if net_cash_needed > 0:
                    print(f"üí∞ C·∫ßn th√™m ti·ªÅn m·∫∑t: {self.format_currency(net_cash_needed, display_currency)}")
                else:
                    print(f"üí∏ S·∫Ω c√≥ ti·ªÅn m·∫∑t d∆∞: {self.format_currency(abs(net_cash_needed), display_currency)}")
            
            # Timeline recommendation
            print("\n‚è∞ KHUY·∫æN NGH·ªä TH·ªúI GIAN:")
            print("   ‚Ä¢ Th·ª±c hi·ªán c√¢n b·∫±ng l·∫°i t·ª´ t·ª´ trong 2-4 tu·∫ßn")
            print("   ‚Ä¢ ∆Øu ti√™n ƒëi·ªÅu ch·ªânh c√°c t√†i s·∫£n c√≥ ƒë·ªô l·ªách l·ªõn nh·∫•t tr∆∞·ªõc")
            print("   ‚Ä¢ T·∫≠n d·ª•ng th·ªùi ƒëi·ªÉm th·ªã tr∆∞·ªùng bi·∫øn ƒë·ªông ƒë·ªÉ mua/b√°n")
            print("   ‚Ä¢ Xem x√©t chi ph√≠ giao d·ªãch khi th·ª±c hi·ªán")
    
    def show_performance_analysis(self, button):
        """Ph√¢n t√≠ch hi·ªáu su·∫•t ƒë·∫ßu t∆∞"""
        if not self.investment_data:
            with self.output:
                clear_output()
                print("‚ùå Ch∆∞a c√≥ d·ªØ li·ªáu ƒë·∫ßu t∆∞!")
            return
        
        display_currency = self.currency_display.value
        
        with self.output:
            clear_output()
            
            # Calculate performance metrics
            df = pd.DataFrame(self.investment_data)
            df['date'] = pd.to_datetime(df['date'])
            df['amount_display'] = df.apply(
                lambda row: self.convert_currency(row['amount'], row['currency'], display_currency), 
                axis=1
            )
            
            # Sort by date
            df = df.sort_values('date')
            
            print("="*70)
            print(f"üìà PH√ÇN T√çCH HI·ªÜU SU·∫§T ƒê·∫¶U T∆Ø ({display_currency})")
            print("="*70)
            
            # Create visualizations
            fig, ((ax1, ax2), (ax3, ax4)) = plt.subplots(2, 2, figsize=(16, 12))
            
            # 1. Cumulative investment over time
            df['cumulative'] = df['amount_display'].cumsum()
            ax1.plot(df['date'], df['cumulative'], marker='o', linewidth=2, markersize=4)
            ax1.set_title('T√≠ch L≈©y ƒê·∫ßu T∆∞ Theo Th·ªùi Gian')
            ax1.set_ylabel(f'T·ªïng ƒë·∫ßu t∆∞ ({display_currency})')
            ax1.grid(True, alpha=0.3)
            
            # 2. Monthly investment pattern
            monthly_investment = df.groupby(df['date'].dt.to_period('M'))['amount_display'].sum()
            ax2.bar(range(len(monthly_investment)), monthly_investment.values, alpha=0.7)
            ax2.set_title('M√¥ H√¨nh ƒê·∫ßu T∆∞ H√†ng Th√°ng')
            ax2.set_ylabel(f'S·ªë ti·ªÅn ƒë·∫ßu t∆∞ ({display_currency})')
            ax2.set_xlabel('Th√°ng')
            
            # Set month labels
            month_labels = [str(period) for period in monthly_investment.index[::max(1, len(monthly_investment)//6)]]
            ax2.set_xticks(range(0, len(monthly_investment), max(1, len(monthly_investment)//6)))
            ax2.set_xticklabels(month_labels, rotation=45)
            
            # 3. Investment by type over time
            type_timeline = df.groupby([df['date'].dt.to_period('M'), 'type'])['amount_display'].sum().unstack(fill_value=0)
            if not type_timeline.empty:
                type_timeline.plot(kind='area', stacked=True, ax=ax3, alpha=0.7)
                ax3.set_title('Ph√¢n B·ªï ƒê·∫ßu T∆∞ Theo Lo·∫°i Theo Th·ªùi Gian')
                ax3.set_ylabel(f'S·ªë ti·ªÅn ({display_currency})')
                ax3.legend(bbox_to_anchor=(1.05, 1), loc='upper left')
            
            # 4. Average investment by day of week
            df['day_of_week'] = df['date'].dt.day_name()
            day_avg = df.groupby('day_of_week')['amount_display'].mean()
            
            # Reorder days
            day_order = ['Monday', 'Tuesday', 'Wednesday', 'Thursday', 'Friday', 'Saturday', 'Sunday']
            day_avg_ordered = day_avg.reindex([day for day in day_order if day in day_avg.index])
            
            ax4.bar(range(len(day_avg_ordered)), day_avg_ordered.values, alpha=0.7, color='skyblue')
            ax4.set_title('S·ªë Ti·ªÅn ƒê·∫ßu T∆∞ Trung B√¨nh Theo Th·ª©')
            ax4.set_ylabel(f'Trung b√¨nh ({display_currency})')
            ax4.set_xticks(range(len(day_avg_ordered)))
            ax4.set_xticklabels([day[:3] for day in day_avg_ordered.index], rotation=45)
            
            plt.tight_layout()
            plt.show()
            
            # Calculate key metrics
            total_invested = df['amount_display'].sum()
            investment_period = (df['date'].max() - df['date'].min()).days
            avg_monthly_investment = monthly_investment.mean() if not monthly_investment.empty else 0
            
            print(f"üí∞ T·ªïng s·ªë ti·ªÅn ƒë√£ ƒë·∫ßu t∆∞: {self.format_currency(total_invested, display_currency)}")
            print(f"‚è∞ Th·ªùi gian ƒë·∫ßu t∆∞: {investment_period} ng√†y ({investment_period/30:.1f} th√°ng)")
            print(f"üìä ƒê·∫ßu t∆∞ trung b√¨nh/th√°ng: {self.format_currency(avg_monthly_investment, display_currency)}")
            print(f"üìà S·ªë l·∫ßn giao d·ªãch: {len(df)}")
            
            # Investment frequency analysis
            print("\nüìä PH√ÇN T√çCH T·∫¶N SU·∫§T ƒê·∫¶U T∆Ø:")
            
            if investment_period > 0:
                frequency = len(df) / (investment_period / 30)  # transactions per month
                print(f"   üîÑ T·∫ßn su·∫•t giao d·ªãch: {frequency:.1f} l·∫ßn/th√°ng")
                
                if frequency > 4:
                    print("   üí° B·∫°n ƒë·∫ßu t∆∞ kh√° th∆∞·ªùng xuy√™n - t·ªët cho DCA!")
                elif frequency > 1:
                    print("   üí° T·∫ßn su·∫•t ƒë·∫ßu t∆∞ v·ª´a ph·∫£i - c√≥ th·ªÉ tƒÉng frequency")
                else:
                    print("   üí° ƒê·∫ßu t∆∞ √≠t - c√¢n nh·∫Øc tƒÉng t·∫ßn su·∫•t ƒë·ªÉ DCA hi·ªáu qu·∫£")
            
            # Best and worst performing months
            if len(monthly_investment) > 1:
                best_month = monthly_investment.idxmax()
                worst_month = monthly_investment.idxmin()
                
                print(f"\nüèÜ Th√°ng ƒë·∫ßu t∆∞ nhi·ªÅu nh·∫•t: {best_month} - {self.format_currency(monthly_investment[best_month], display_currency)}")
                print(f"üìâ Th√°ng ƒë·∫ßu t∆∞ √≠t nh·∫•t: {worst_month} - {self.format_currency(monthly_investment[worst_month], display_currency)}")
            
            # Investment consistency analysis
            if len(monthly_investment) > 2:
                std_dev = monthly_investment.std()
                consistency = (avg_monthly_investment - std_dev) / avg_monthly_investment * 100
                
                print(f"\nüìä ƒê·ªô ·ªïn ƒë·ªãnh ƒë·∫ßu t∆∞: {consistency:.1f}%")
                if consistency > 70:
                    print("   ‚úÖ ƒê·∫ßu t∆∞ r·∫•t ·ªïn ƒë·ªãnh!")
                elif consistency > 40:
                    print("   üü° ƒê·∫ßu t∆∞ t∆∞∆°ng ƒë·ªëi ·ªïn ƒë·ªãnh")
                else:
                    print("   üî¥ ƒê·∫ßu t∆∞ ch∆∞a ·ªïn ƒë·ªãnh, c·∫ßn c√≥ k·∫ø ho·∫°ch r√µ r√†ng h∆°n")
    
    def show_risk_analysis(self, button):
        """Ph√¢n t√≠ch r·ªßi ro danh m·ª•c"""
        if not self.investment_data:
            with self.output:
                clear_output()
                print("‚ùå Ch∆∞a c√≥ d·ªØ li·ªáu ƒë·∫ßu t∆∞!")
            return
        
        display_currency = self.currency_display.value
        
        with self.output:
            clear_output()
            
            # Calculate risk metrics
            portfolio_summary = {}
            total_value = 0
            
            for inv in self.investment_data:
                inv_type = inv['type']
                amount = self.convert_currency(inv['amount'], inv['currency'], display_currency)
                portfolio_summary[inv_type] = portfolio_summary.get(inv_type, 0) + amount
                total_value += amount
            
            # Risk levels by asset type
            risk_levels = {
                'Ti·ªÅn g·ª≠i': 1,
                'V√†ng': 2,
                'Qu·ªπ': 3,
                'B·∫•t ƒë·ªông s·∫£n': 3,
                'C·ªï phi·∫øu': 4,
                'Crypto': 5,
                'Kh√°c': 3
            }
            
            print("="*70)
            print("‚ö†Ô∏è  PH√ÇN T√çCH R·ª¶I RO DANH M·ª§C ƒê·∫¶U T∆Ø")
            print("="*70)
            
            # Calculate portfolio risk score
            weighted_risk = 0
            for asset_type, value in portfolio_summary.items():
                weight = value / total_value
                risk = risk_levels.get(asset_type, 3)
                weighted_risk += weight * risk
            
            print(f"üìä ƒêi·ªÉm r·ªßi ro danh m·ª•c: {weighted_risk:.2f}/5.0")
            
            # Risk assessment
            if weighted_risk <= 2.0:
                risk_level = "üü¢ Th·∫•p"
                risk_desc = "Danh m·ª•c b·∫£o th·ªß, √≠t bi·∫øn ƒë·ªông"
            elif weighted_risk <= 3.0:
                risk_level = "üü° V·ª´a ph·∫£i"
                risk_desc = "Danh m·ª•c c√¢n b·∫±ng, r·ªßi ro h·ª£p l√Ω"
            elif weighted_risk <= 4.0:
                risk_level = "üü† Cao"
                risk_desc = "Danh m·ª•c t√≠ch c·ª±c, bi·∫øn ƒë·ªông l·ªõn"
            else:
                risk_level = "üî¥ R·∫•t cao"
                risk_desc = "Danh m·ª•c m·∫°o hi·ªÉm, r·ªßi ro cao"
            
            print(f"üìà M·ª©c ƒë·ªô r·ªßi ro: {risk_level}")
            print(f"üí≠ ƒê√°nh gi√°: {risk_desc}")
            
            # Create risk visualization
            fig, ((ax1, ax2), (ax3, ax4)) = plt.subplots(2, 2, figsize=(16, 12))
            
            # 1. Risk distribution pie chart
            risk_data = {}
            for asset_type, value in portfolio_summary.items():
                risk = risk_levels.get(asset_type, 3)
                risk_label = f"R·ªßi ro {risk}/5"
                risk_data[risk_label] = risk_data.get(risk_label, 0) + value
            
            ax1.pie(risk_data.values(), labels=risk_data.keys(), autopct='%1.1f%%', startangle=90)
            ax1.set_title('Ph√¢n B·ªë R·ªßi Ro Danh M·ª•c')
            
            # 2. Asset allocation with risk colors
            asset_types = list(portfolio_summary.keys())
            asset_values = list(portfolio_summary.values())
            risk_colors = []
            
            for asset_type in asset_types:
                risk = risk_levels.get(asset_type, 3)
                if risk == 1:
                    risk_colors.append('green')
                elif risk == 2:
                    risk_colors.append('lightgreen')
                elif risk == 3:
                    risk_colors.append('yellow')
                elif risk == 4:
                    risk_colors.append('orange')
                else:
                    risk_colors.append('red')
            
            bars = ax2.bar(asset_types, asset_values, color=risk_colors, alpha=0.7)
            ax2.set_title('Ph√¢n B·ªï T√†i S·∫£n Theo M·ª©c R·ªßi Ro')
            ax2.set_ylabel(f'Gi√° tr·ªã ({display_currency})')
            ax2.tick_params(axis='x', rotation=45)
            
            # Add risk level labels
            for bar, asset_type in zip(bars, asset_types):
                risk = risk_levels.get(asset_type, 3)
                ax2.text(bar.get_x() + bar.get_width()/2., bar.get_height() + max(asset_values)*0.01,
                        f'R{risk}', ha='center', va='bottom', fontweight='bold')
            
            # 3. Risk concentration analysis
            risk_concentration = {}
            for asset_type, value in portfolio_summary.items():
                risk = risk_levels.get(asset_type, 3)
                risk_concentration[risk] = risk_concentration.get(risk, 0) + value
            
            risk_labels = [f'R·ªßi ro {r}' for r in sorted(risk_concentration.keys())]
            risk_values = [risk_concentration[r] for r in sorted(risk_concentration.keys())]
            
            ax3.barh(risk_labels, risk_values, color=['green', 'lightgreen', 'yellow', 'orange', 'red'][:len(risk_values)])
            ax3.set_title('T·∫≠p Trung R·ªßi Ro')
            ax3.set_xlabel(f'Gi√° tr·ªã ({display_currency})')
            
            # 4. Diversification analysis
            num_assets = len(portfolio_summary)
            gini_coefficient = self.calculate_gini_coefficient(list(portfolio_summary.values()))
            
            # Create diversification score visualization
            diversification_metrics = {
                'S·ªë lo·∫°i t√†i s·∫£n': min(num_assets / 5 * 100, 100),
                'Ph√¢n b·ªï ƒë·ªÅu': (1 - gini_coefficient) * 100,
                'ƒêa d·∫°ng r·ªßi ro': min(len(set(risk_levels[t] for t in portfolio_summary.keys())) / 5 * 100, 100)
            }
            
            metrics = list(diversification_metrics.keys())
            scores = list(diversification_metrics.values())
            
            ax4.barh(metrics, scores, color=['blue', 'green', 'purple'])
            ax4.set_title('ƒêi·ªÉm ƒêa D·∫°ng H√≥a')
            ax4.set_xlabel('ƒêi·ªÉm (%)')
            ax4.set_xlim(0, 100)
            
            # Add score labels
            for i, score in enumerate(scores):
                ax4.text(score + 2, i, f'{score:.1f}%', va='center')
            
            plt.tight_layout()
            plt.show()
            
            # Detailed risk analysis
            print(f"\nüìä PH√ÇN T√çCH CHI TI·∫æT:")
            print(f"{'Lo·∫°i t√†i s·∫£n':<20} {'Gi√° tr·ªã':<15} {'T·ª∑ tr·ªçng':<10} {'R·ªßi ro':<8} {'ƒê√°nh gi√°':<15}")
            print("-"*70)
            
            for asset_type, value in sorted(portfolio_summary.items(), key=lambda x: x[1], reverse=True):
                percentage = (value / total_value) * 100
                risk = risk_levels.get(asset_type, 3)
                
                if risk == 1:
                    risk_desc = "üü¢ R·∫•t th·∫•p"
                elif risk == 2:
                    risk_desc = "üü° Th·∫•p"
                elif risk == 3:
                    risk_desc = "üü† V·ª´a"
                elif risk == 4:
                    risk_desc = "üî¥ Cao"
                else:
                    risk_desc = "‚ö´ R·∫•t cao"
                
                print(f"{asset_type:<20} {self.format_currency(value, display_currency):<15} {percentage:>6.1f}% {risk:>5}/5 {risk_desc:<15}")
            
            # Risk recommendations
            print(f"\nüí° KHUY·∫æN NGH·ªä:")
            
            if weighted_risk < 2.5:
                print("   ‚Ä¢ Danh m·ª•c qu√° b·∫£o th·ªß - c√≥ th·ªÉ c√¢n nh·∫Øc tƒÉng t·ª∑ tr·ªçng t√†i s·∫£n r·ªßi ro cao h∆°n")
                print("   ‚Ä¢ Xem x√©t ƒë·∫ßu t∆∞ th√™m c·ªï phi·∫øu ho·∫∑c qu·ªπ tƒÉng tr∆∞·ªüng")
            elif weighted_risk > 3.5:
                print("   ‚Ä¢ Danh m·ª•c c√≥ r·ªßi ro cao - n√™n tƒÉng t·ª∑ tr·ªçng t√†i s·∫£n an to√†n")
                print("   ‚Ä¢ Xem x√©t tƒÉng ti·ªÅn g·ª≠i ho·∫∑c tr√°i phi·∫øu ch√≠nh ph·ªß")
            
            # Diversification recommendations
            if num_assets < 3:
                print("   ‚Ä¢ Danh m·ª•c ch∆∞a ƒë·ªß ƒëa d·∫°ng - n√™n ƒë·∫ßu t∆∞ th√™m c√°c lo·∫°i t√†i s·∫£n kh√°c")
            
            if gini_coefficient > 0.6:
                print("   ‚Ä¢ T√†i s·∫£n t·∫≠p trung qu√° nhi·ªÅu - n√™n ph√¢n b·ªï ƒë·ªÅu h∆°n")
            
            # Age-based recommendations (assuming user input later)
            print(f"\nüéØ KHUY·∫æN NGH·ªä THEO ƒê·ªò TU·ªîI:")
            print("   ‚Ä¢ 20-30 tu·ªïi: R·ªßi ro 3.5-4.5 (t√≠ch c·ª±c)")
            print("   ‚Ä¢ 30-50 tu·ªïi: R·ªßi ro 2.5-3.5 (c√¢n b·∫±ng)")
            print("   ‚Ä¢ 50+ tu·ªïi: R·ªßi ro 1.5-2.5 (b·∫£o th·ªß)")
    
    def calculate_gini_coefficient(self, values):
        """T√≠nh h·ªá s·ªë Gini ƒë·ªÉ ƒëo ƒë·ªô b·∫•t b√¨nh ƒë·∫≥ng ph√¢n b·ªï"""
        if not values or len(values) == 1:
            return 0
        
        sorted_values = sorted(values)
        n = len(sorted_values)
        cumsum = np.cumsum(sorted_values)
        
        return (n + 1 - 2 * sum((n + 1 - i) * y for i, y in enumerate(sorted_values, 1))) / (n * sum(sorted_values))
    
    def show_trend_analysis(self, button):
        """Ph√¢n t√≠ch xu h∆∞·ªõng ƒë·∫ßu t∆∞"""
        if not self.investment_data:
            with self.output:
                clear_output()
                print("‚ùå Ch∆∞a c√≥ d·ªØ li·ªáu ƒë·∫ßu t∆∞!")
            return
        
        display_currency = self.currency_display.value
        days = self.time_period.value
        cutoff_date = datetime.now().date() - timedelta(days=days)
        
        # Filter data by time period
        filtered_data = [inv for inv in self.investment_data if inv['date'] >= cutoff_date]
        
        if not filtered_data:
            with self.output:
                clear_output()
                print(f"‚ùå Kh√¥ng c√≥ d·ªØ li·ªáu trong {days} ng√†y qua!")
            return
        
        with self.output:
            clear_output()
            
            print("="*70)
