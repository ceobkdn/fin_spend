import pandas as pd
import matplotlib.pyplot as plt
import seaborn as sns
from datetime import datetime, date
import ipywidgets as widgets
from IPython.display import display, clear_output
import numpy as np

# Thi·∫øt l·∫≠p style cho matplotlib
plt.style.use('default')
sns.set_palette("husl")

class MonthlyFinanceTracker:
    def __init__(self):
        # Kh·ªüi t·∫°o d·ªØ li·ªáu
        self.income_data = []
        self.expense_data = []
        self.loan_data = []
        self.savings_data = []
        self.exchange_rate = 1.0  # T·ª∑ gi√° m·∫∑c ƒë·ªãnh KRW/VND
        self.base_currency = 'VND'  # Ti·ªÅn t·ªá c∆° s·ªü ƒë·ªÉ hi·ªÉn th·ªã b√°o c√°o
        
        # File paths cho l∆∞u d·ªØ li·ªáu
        self.data_files = {
            'income': 'finance_data_income.csv',
            'expense': 'finance_data_expense.csv', 
            'loan': 'finance_data_loan.csv',
            'savings': 'finance_data_savings.csv',
            'settings': 'finance_settings.csv'
        }
        
        # T·∫°o widgets tr∆∞·ªõc
        self.create_widgets()
        
        # T·∫£i d·ªØ li·ªáu c√≥ s·∫µn
        self.load_data()
        
        # C·∫≠p nh·∫≠t dropdown sau khi load d·ªØ li·ªáu
        self.update_loan_dropdown()
        self.update_savings_dropdown()
        
        # T·∫°o layout cu·ªëi c√πng
        self.create_layout()
        
    def create_widgets(self):
        # Header
        self.title = widgets.HTML(
            value="<h2 style='text-align: center; color: #2E86AB;'>üìä GI√ÅM S√ÅT THU CHI H√ÄNG TH√ÅNG</h2>"
        )
        
        # Exchange Rate Settings
        self.settings_header = widgets.HTML(
            value="<h3 style='color: #17A2B8;'>‚öôÔ∏è C√ÄI ƒê·∫∂T T·ª∂ GI√Å & TI·ªÄN T·ªÜ</h3>"
        )
        self.exchange_rate_input = widgets.FloatText(
            value=1.0,
            description="T·ª∑ gi√° (1 KRW):",
            style={'description_width': 'initial'},
            tooltip="Nh·∫≠p s·ªë VND t∆∞∆°ng ·ª©ng v·ªõi 1 KRW"
        )
        self.base_currency_dropdown = widgets.Dropdown(
            options=['VND', 'KRW'],
            value='VND',
            description="Ti·ªÅn t·ªá b√°o c√°o:",
            style={'description_width': 'initial'}
        )
        #------------------------------------------------------------------------------------------------------------
        self.base_currency_dropdown.layout = widgets.Layout(width='20%')
        #------------------------------------------------------------------------------------------------------------

        
        self.update_rate_btn = widgets.Button(
            description="C·∫≠p nh·∫≠t T·ª∑ gi√°",
            button_style='info',
            icon='refresh'
        )
        
        # Income widgets
        self.income_header = widgets.HTML(
            value="<h3 style='color: #28A745;'>üí∞ KHO·∫¢N THU</h3>"
        )
        self.income_source = widgets.Text(
            placeholder="VD: L∆∞∆°ng, Th∆∞·ªüng, Freelance...",
            description="Ngu·ªìn thu:",
            style={'description_width': 'initial'}
        )
        self.income_amount = widgets.FloatText(
            value=0.0,
            description="S·ªë ti·ªÅn:",
            style={'description_width': 'initial'}
        )
        self.income_currency = widgets.Dropdown(
            options=['VND', 'KRW'],
            value='VND',
            description="Ti·ªÅn t·ªá:",
            style={'description_width': 'initial'}
        )
        #------------------------------------------------------------------------------------------------------------
        self.income_currency.layout = widgets.Layout(width='20%')
        #------------------------------------------------------------------------------------------------------------        
        
        self.income_date = widgets.DatePicker(
            description="Ng√†y:",
            value=date.today(),
            style={'description_width': 'initial'}
        )
        self.add_income_btn = widgets.Button(
            description="Th√™m Thu Nh·∫≠p",
            button_style='success',
            icon='plus'
        )
        
        # Expense widgets
        self.expense_header = widgets.HTML(
            value="<h3 style='color: #DC3545;'>üí∏ KHO·∫¢N CHI</h3>"
        )
        self.expense_category = widgets.Dropdown(
            options=['ƒÇn u·ªëng', 'ƒêi l·∫°i', 'Nh√† ·ªü', 'Gi·∫£i tr√≠', 'Mua s·∫Øm', 
                    'Y t·∫ø', 'Gi√°o d·ª•c', 'Ti·ªán √≠ch', 'Kh√°c'],
            description="Danh m·ª•c:",
            style={'description_width': 'initial'}
        )
        self.expense_description = widgets.Text(
            placeholder="VD: C∆°m tr∆∞a, XƒÉng xe, Ti·ªÅn nh√†...",
            description="M√¥ t·∫£:",
            style={'description_width': 'initial'}
        )
        self.expense_amount = widgets.FloatText(
            value=0.0,
            description="S·ªë ti·ªÅn:",
            style={'description_width': 'initial'}
        )
        self.expense_currency = widgets.Dropdown(
            options=['VND', 'KRW'],
            value='VND',
            description="Ti·ªÅn t·ªá:",
            style={'description_width': 'initial'}
        )
        #------------------------------------------------------------------------------------------------------------
        self.expense_currency.layout = widgets.Layout(width='20%')
        #------------------------------------------------------------------------------------------------------------

        
        self.expense_date = widgets.DatePicker(
            description="Ng√†y:",
            value=date.today(),
            style={'description_width': 'initial'}
        )
        self.add_expense_btn = widgets.Button(
            description="Th√™m Chi Ph√≠",
            button_style='danger',
            icon='plus'
        )
        
        # Loan Management widgets
        self.loan_header = widgets.HTML(
            value="<h3 style='color: #FF6B35;'>üè¶ QU·∫¢N L√ù VAY N·ª¢</h3>"
        )
        
        # Dropdown ƒë·ªÉ ch·ªçn kho·∫£n vay c√≥ s·∫µn
        self.existing_loan_dropdown = widgets.Dropdown(
            options=[('-- T·∫°o kho·∫£n vay m·ªõi --', '')],
            description="Ch·ªçn kho·∫£n vay:",
            style={'description_width': 'initial'},
            layout={'width': '400px'}
        )
        self.load_loan_btn = widgets.Button(
            description="T·∫£i th√¥ng tin",
            button_style='info',
            icon='edit',
            layout={'width': '120px'}
        )
        
        self.loan_type = widgets.Dropdown(
            options=['Vay ng√¢n h√†ng', 'Vay b·∫°n b√®', 'Th·∫ª t√≠n d·ª•ng', 'Vay kh√°c'],
            description="Lo·∫°i vay:",
            style={'description_width': 'initial'}
        )
        self.loan_description = widgets.Text(
            placeholder="VD: Vay mua nh√†, Vay ti√™u d√πng...",
            description="M√¥ t·∫£:",
            style={'description_width': 'initial'}
        )
        self.loan_total = widgets.FloatText(
            value=0.0,
            description="T·ªïng n·ª£:",
            style={'description_width': 'initial'}
        )
        self.loan_currency = widgets.Dropdown(
            options=['VND', 'KRW'],
            value='VND',
            description="Ti·ªÅn t·ªá:",
            style={'description_width': 'initial'}
        )
        #------------------------------------------------------------------------------------------------------------
        self.loan_currency.layout = widgets.Layout(width='20%')
        #------------------------------------------------------------------------------------------------------------

        
        self.loan_monthly = widgets.FloatText(
            value=0.0,
            description="Tr·∫£ h√†ng th√°ng:",
            style={'description_width': 'initial'}
        )
        self.loan_paid = widgets.FloatText(
            value=0.0,
            description="ƒê√£ tr·∫£:",
            style={'description_width': 'initial'}
        )
        self.loan_date = widgets.DatePicker(
            description="Ng√†y tr·∫£:",
            value=date.today(),
            style={'description_width': 'initial'}
        )
        self.is_fixed_payment = widgets.Checkbox(
            value=True,
            description="Tr·∫£ c·ªë ƒë·ªãnh h√†ng th√°ng",
            style={'description_width': 'initial'}
        )
        self.add_loan_btn = widgets.Button(
            description="Th√™m/C·∫≠p nh·∫≠t Vay",
            button_style='warning',
            icon='plus'
        )
        self.pay_loan_btn = widgets.Button(
            description="Ghi nh·∫≠n Thanh to√°n",
            button_style='primary',
            icon='money-bill'
        )
        self.delete_loan_btn = widgets.Button(
            description="X√≥a Kho·∫£n vay",
            button_style='danger',
            icon='trash'
        )
        
        # Savings & Investment widgets
        self.savings_header = widgets.HTML(
            value="<h3 style='color: #6F42C1;'>üíé TI·∫æT KI·ªÜM & ƒê·∫¶U T∆Ø</h3>"
        )
        
        # Dropdown ƒë·ªÉ ch·ªçn kho·∫£n ti·∫øt ki·ªám/ƒë·∫ßu t∆∞ c√≥ s·∫µn
        self.existing_savings_dropdown = widgets.Dropdown(
            options=[('-- T·∫°o kho·∫£n m·ªõi --', '')],
            description="Ch·ªçn kho·∫£n:",
            style={'description_width': 'initial'},
            layout={'width': '400px'}
        )
        self.load_savings_btn = widgets.Button(
            description="T·∫£i th√¥ng tin",
            button_style='info',
            icon='edit',
            layout={'width': '120px'}
        )
        
        self.savings_type = widgets.Dropdown(
            options=['Ti·∫øt ki·ªám ng√¢n h√†ng', 'ƒê·∫ßu t∆∞ ch·ª©ng kho√°n', 'Qu·ªπ ƒë·∫ßu t∆∞', 
                    'V√†ng', 'B·∫•t ƒë·ªông s·∫£n', 'Crypto', 'Kh√°c'],
            description="Lo·∫°i:",
            style={'description_width': 'initial'}
        )
        self.savings_description = widgets.Text(
            placeholder="VD: G·ª≠i ti·∫øt ki·ªám 6 th√°ng, Mua c·ªï phi·∫øu...",
            description="M√¥ t·∫£:",
            style={'description_width': 'initial'}
        )
        self.savings_amount = widgets.FloatText(
            value=0.0,
            description="S·ªë ti·ªÅn:",
            style={'description_width': 'initial'}
        )
        self.savings_currency = widgets.Dropdown(
            options=['VND', 'KRW'],
            value='VND',
            description="Ti·ªÅn t·ªá:",
            style={'description_width': 'initial'}
        )

        #------------------------------------------------------------------------------------------------------------
        self.savings_currency.layout = widgets.Layout(width='20%')
        #------------------------------------------------------------------------------------------------------------
        
        self.savings_date = widgets.DatePicker(
            description="Ng√†y:",
            value=date.today(),
            style={'description_width': 'initial'}
        )
        self.add_savings_btn = widgets.Button(
            description="Th√™m Ti·∫øt ki·ªám/ƒêT",
            button_style='info',
            icon='plus'
        )
        self.update_savings_btn = widgets.Button(
            description="C·∫≠p nh·∫≠t Kho·∫£n",
            button_style='warning',
            icon='edit'
        )
        self.delete_savings_btn = widgets.Button(
            description="X√≥a Kho·∫£n",
            button_style='danger',
            icon='trash'
        )
        
        # Analysis widgets
        self.analysis_header = widgets.HTML(
            value="<h3 style='color: #17A2B8;'>üìà PH√ÇN T√çCH & B√ÅO C√ÅO</h3>"
        )
        self.month_filter = widgets.Dropdown(
            options=self.get_month_options(),
            description="Th√°ng:",
            style={'description_width': 'initial'}
        )
        self.show_summary_btn = widgets.Button(
            description="T·ªïng Quan Th√°ng",
            button_style='info',
            icon='chart-bar'
        )
        self.show_cash_flow_btn = widgets.Button(
            description="D√≤ng Ti·ªÅn & Ph√¢n b·ªï",
            button_style='success',
            icon='coins'
        )
        self.show_loan_status_btn = widgets.Button(
            description="T√¨nh tr·∫°ng Vay n·ª£",
            button_style='warning',
            icon='credit-card'
        )
        self.show_charts_btn = widgets.Button(
            description="Bi·ªÉu ƒê·ªì Chi ti·∫øt",
            button_style='info',
            icon='chart-pie'
        )
        
        # New Investment Analysis buttons
        self.show_investment_detail_btn = widgets.Button(
            description="Chi ti·∫øt ƒê·∫ßu t∆∞",
            button_style='primary',
            icon='list'
        )
        self.show_investment_charts_btn = widgets.Button(
            description="Bi·ªÉu ƒë·ªì ƒê·∫ßu t∆∞",
            button_style='primary',
            icon='chart-line'
        )
        self.show_total_assets_btn = widgets.Button(
            description="T·ªïng T√†i s·∫£n",
            button_style='success',
            icon='money-bill-wave'
        )
        
        self.export_btn = widgets.Button(
            description="Xu·∫•t Excel",
            button_style='',
            icon='download'
        )
        
        # Data management buttons
        self.save_data_btn = widgets.Button(
            description="L∆∞u D·ªØ li·ªáu",
            button_style='success',
            icon='save',
            tooltip="L∆∞u t·∫•t c·∫£ d·ªØ li·ªáu v√†o file CSV"
        )
        self.load_data_btn = widgets.Button(
            description="T·∫£i D·ªØ li·ªáu",
            button_style='info',
            icon='upload',
            tooltip="T·∫£i d·ªØ li·ªáu t·ª´ file CSV"
        )
        self.clear_data_btn = widgets.Button(
            description="X√≥a T·∫•t c·∫£",
            button_style='danger',
            icon='trash',
            tooltip="X√≥a to√†n b·ªô d·ªØ li·ªáu (c·∫©n th·∫≠n!)"
        )
        
        # Output area
        self.output = widgets.Output()
        
        # Bind events
        self.update_rate_btn.on_click(self.update_exchange_rate)
        self.add_income_btn.on_click(self.add_income)
        self.add_expense_btn.on_click(self.add_expense)
        self.add_loan_btn.on_click(self.add_loan)
        self.pay_loan_btn.on_click(self.pay_loan)
        self.add_savings_btn.on_click(self.add_savings)
        self.show_summary_btn.on_click(self.show_summary)
        self.show_cash_flow_btn.on_click(self.show_cash_flow)
        self.show_loan_status_btn.on_click(self.show_loan_status)
        self.show_charts_btn.on_click(self.show_charts)
        self.show_investment_detail_btn.on_click(self.show_investment_detail)
        self.show_investment_charts_btn.on_click(self.show_investment_charts)
        self.show_total_assets_btn.on_click(self.show_total_assets)
        self.export_btn.on_click(self.export_to_excel)
        
        # Data management events
        self.save_data_btn.on_click(self.save_data)
        self.load_data_btn.on_click(self.load_data_manual)
        self.clear_data_btn.on_click(self.clear_all_data)
        
        # Loan management events
        self.load_loan_btn.on_click(self.load_selected_loan)
        self.delete_loan_btn.on_click(self.delete_loan)
        
        # Savings management events  
        self.load_savings_btn.on_click(self.load_selected_savings)
        self.update_savings_btn.on_click(self.update_savings)
        self.delete_savings_btn.on_click(self.delete_savings)
    
    def convert_to_base_currency(self, amount, from_currency):
        """Chuy·ªÉn ƒë·ªïi ti·ªÅn t·ªá v·ªÅ ti·ªÅn t·ªá b√°o c√°o"""
        if from_currency == self.base_currency:
            return amount
        elif from_currency == 'KRW' and self.base_currency == 'VND':
            return amount * self.exchange_rate
        elif from_currency == 'VND' and self.base_currency == 'KRW':
            return amount / self.exchange_rate
        return amount
    
    def format_currency(self, amount, currency=None):
        """Format hi·ªÉn th·ªã ti·ªÅn t·ªá"""
        if currency is None:
            currency = self.base_currency
        
        if currency == 'VND':
            return f"{amount:,.0f}ƒë"
        elif currency == 'KRW':
            return f"{amount:,.0f}‚Ç©"
        else:
            return f"{amount:,.0f}"
    
    def update_exchange_rate(self, button):
        """C·∫≠p nh·∫≠t t·ª∑ gi√°"""
        self.exchange_rate = self.exchange_rate_input.value
        self.base_currency = self.base_currency_dropdown.value
        
        # L∆∞u settings
        self.save_settings()
        
        with self.output:
            clear_output()
            print(f"‚úÖ ƒê√£ c·∫≠p nh·∫≠t t·ª∑ gi√°: 1 KRW = {self.exchange_rate:,.2f} VND")
            print(f"üìä Ti·ªÅn t·ªá b√°o c√°o: {self.base_currency}")
            print("üíæ C√†i ƒë·∫∑t ƒë√£ ƒë∆∞·ª£c l∆∞u t·ª± ƒë·ªông")
    
    def save_settings(self):
        """L∆∞u c√†i ƒë·∫∑t t·ª∑ gi√°"""
        try:
            settings_data = {
                'exchange_rate': [self.exchange_rate],
                'base_currency': [self.base_currency],
                'last_updated': [datetime.now().isoformat()]
            }
            df = pd.DataFrame(settings_data)
            df.to_csv(self.data_files['settings'], index=False, encoding='utf-8-sig')
        except Exception as e:
            print(f"L·ªói khi l∆∞u c√†i ƒë·∫∑t: {str(e)}")
    
    def load_settings(self):
        """T·∫£i c√†i ƒë·∫∑t t·ª∑ gi√°"""
        try:
            df = pd.read_csv(self.data_files['settings'], encoding='utf-8-sig')
            if not df.empty:
                self.exchange_rate = float(df['exchange_rate'].iloc[-1])
                self.base_currency = str(df['base_currency'].iloc[-1])
                self.exchange_rate_input.value = self.exchange_rate
                self.base_currency_dropdown.value = self.base_currency
                print(f"‚úÖ ƒê√£ load c√†i ƒë·∫∑t: 1 KRW = {self.exchange_rate:,.2f} VND, B√°o c√°o: {self.base_currency}")
        except FileNotFoundError:
            print("üìù Ch∆∞a c√≥ file c√†i ƒë·∫∑t, s·ª≠ d·ª•ng m·∫∑c ƒë·ªãnh")
        except Exception as e:
            print(f"‚ö†Ô∏è  L·ªói khi load c√†i ƒë·∫∑t: {str(e)}")
    
    def get_month_options(self):
        current_month = datetime.now().month
        current_year = datetime.now().year
        options = []
        
        months_vn = {
            1: "Th√°ng 1", 2: "Th√°ng 2", 3: "Th√°ng 3", 4: "Th√°ng 4",
            5: "Th√°ng 5", 6: "Th√°ng 6", 7: "Th√°ng 7", 8: "Th√°ng 8",
            9: "Th√°ng 9", 10: "Th√°ng 10", 11: "Th√°ng 11", 12: "Th√°ng 12"
        }
        
        # Th√™m 12 th√°ng g·∫ßn nh·∫•t
        for i in range(12):
            month = ((current_month - i - 1) % 12) + 1
            year = current_year if current_month - i > 0 else current_year - 1
            options.append((f"{months_vn[month]} {year}", f"{year}-{month:02d}"))
        
        return options
    
    def create_layout(self):
        # Settings section
        settings_box = widgets.VBox([
            self.settings_header,
            widgets.HBox([self.exchange_rate_input, self.base_currency_dropdown, self.update_rate_btn])
        ])
        
        # Income section
        income_box = widgets.VBox([
            self.income_header,
            widgets.HBox([self.income_source, self.income_amount, self.income_currency]),
            widgets.HBox([self.income_date, self.add_income_btn])
        ])
        
        # Expense section
        expense_box = widgets.VBox([
            self.expense_header,
            widgets.HBox([self.expense_category, self.expense_description]),
            widgets.HBox([self.expense_amount, self.expense_currency, self.expense_date]),
            self.add_expense_btn
        ])
        
        # Loan section
        loan_box = widgets.VBox([
            self.loan_header,
            widgets.HTML("<h4 style='color: #666; margin: 5px 0;'>üîç Ch·ªçn kho·∫£n vay c√≥ s·∫µn:</h4>"),
            widgets.HBox([self.existing_loan_dropdown, self.load_loan_btn]),
            widgets.HTML("<h4 style='color: #666; margin: 15px 0 5px 0;'>üìù Th√¥ng tin kho·∫£n vay:</h4>"),
            widgets.HBox([self.loan_type, self.loan_description]),
            widgets.HBox([self.loan_total, self.loan_currency, self.loan_monthly]),
            widgets.HBox([self.loan_paid, self.loan_date]),
            self.is_fixed_payment,
            widgets.HBox([self.add_loan_btn, self.pay_loan_btn, self.delete_loan_btn])
        ])
        
        # Savings section
        savings_box = widgets.VBox([
            self.savings_header,
            widgets.HTML("<h4 style='color: #666; margin: 5px 0;'>üîç Ch·ªçn kho·∫£n c√≥ s·∫µn:</h4>"),
            widgets.HBox([self.existing_savings_dropdown, self.load_savings_btn]),
            widgets.HTML("<h4 style='color: #666; margin: 15px 0 5px 0;'>üìù Th√¥ng tin kho·∫£n ti·∫øt ki·ªám/ƒë·∫ßu t∆∞:</h4>"),
            widgets.HBox([self.savings_type, self.savings_description]),
            widgets.HBox([self.savings_amount, self.savings_currency, self.savings_date]),
            widgets.HBox([self.add_savings_btn, self.update_savings_btn, self.delete_savings_btn])
        ])
        
        # Analysis section
        analysis_box = widgets.VBox([
            self.analysis_header,
            self.month_filter,
            widgets.HTML("<h4 style='color: #666; margin: 10px 0 5px 0;'>üìä B√°o c√°o c∆° b·∫£n:</h4>"),
            widgets.HBox([self.show_summary_btn, self.show_cash_flow_btn]),
            widgets.HBox([self.show_loan_status_btn, self.show_charts_btn]),
            widgets.HTML("<h4 style='color: #666; margin: 15px 0 5px 0;'>üíé Ph√¢n t√≠ch ƒë·∫ßu t∆∞:</h4>"),
            widgets.HBox([self.show_investment_detail_btn, self.show_investment_charts_btn]),
            widgets.HBox([self.show_total_assets_btn]),
            widgets.HTML("<hr style='margin: 10px 0;'>"),
            widgets.HTML("<h4 style='color: #6C757D; margin: 5px 0;'>üóÉÔ∏è QU·∫¢N L√ù D·ªÆ LI·ªÜU</h4>"),
            widgets.HBox([self.save_data_btn, self.load_data_btn, self.clear_data_btn, self.export_btn])
        ])
        
        # Main layout with tabs for better organization
        tab0 = settings_box  # Tab c√†i ƒë·∫∑t
        tab1 = widgets.VBox([widgets.HBox([income_box, expense_box])])
        tab2 = widgets.VBox([widgets.HBox([loan_box, savings_box])])
        tab3 = analysis_box
        
        tabs = widgets.Tab()
        tabs.children = [tab0, tab1, tab2, tab3]
        tabs.titles = ['C√†i ƒë·∫∑t', 'Thu Chi Th∆∞·ªùng', 'Vay N·ª£ & Ti·∫øt Ki·ªám', 'Ph√¢n T√≠ch']
        
        # Main layout
        self.main_layout = widgets.VBox([
            self.title,
            tabs,
            self.output
        ])
    
    def add_income(self, button):
        if self.income_source.value and self.income_amount.value > 0:
            self.income_data.append({
                'date': self.income_date.value,
                'source': self.income_source.value,
                'amount': self.income_amount.value,
                'currency': self.income_currency.value
            })
            
            # Auto-save after adding data
            self.save_data_silent()
            
            amount_display = self.format_currency(self.income_amount.value, self.income_currency.value)
            with self.output:
                clear_output()
                print(f"‚úÖ ƒê√£ th√™m thu nh·∫≠p: {self.income_source.value} - {amount_display}")
                print("üíæ D·ªØ li·ªáu ƒë√£ ƒë∆∞·ª£c l∆∞u t·ª± ƒë·ªông")
            
            # Clear inputs
            self.income_source.value = ""
            self.income_amount.value = 0.0
        else:
            with self.output:
                clear_output()
                print("‚ùå Vui l√≤ng nh·∫≠p ƒë·∫ßy ƒë·ªß th√¥ng tin thu nh·∫≠p!")
    
    def add_expense(self, button):
        if self.expense_description.value and self.expense_amount.value > 0:
            self.expense_data.append({
                'date': self.expense_date.value,
                'category': self.expense_category.value,
                'description': self.expense_description.value,
                'amount': self.expense_amount.value,
                'currency': self.expense_currency.value
            })
            
            # Auto-save after adding data
            self.save_data_silent()
            
            amount_display = self.format_currency(self.expense_amount.value, self.expense_currency.value)
            with self.output:
                clear_output()
                print(f"‚úÖ ƒê√£ th√™m chi ph√≠: {self.expense_description.value} - {amount_display}")
                print("üíæ D·ªØ li·ªáu ƒë√£ ƒë∆∞·ª£c l∆∞u t·ª± ƒë·ªông")
            
            # Clear inputs
            self.expense_description.value = ""
            self.expense_amount.value = 0.0
        else:
            with self.output:
                clear_output()
                print("‚ùå Vui l√≤ng nh·∫≠p ƒë·∫ßy ƒë·ªß th√¥ng tin chi ph√≠!")
    """
    def update_loan_dropdown(self):
        #C·∫≠p nh·∫≠t dropdown danh s√°ch kho·∫£n vay
        options = [('-- T·∫°o kho·∫£n vay m·ªõi --', '')]
        for i, loan in enumerate(self.loan_data):
            # T√≠nh to√°n remaining amount ƒë·ªÉ ƒë·∫£m b·∫£o ch√≠nh x√°c
            remaining = loan['total_amount'] - loan['paid_amount']
            loan['remaining_amount'] = max(0, remaining)  # C·∫≠p nh·∫≠t l·∫°i remaining_amount
            
            # Convert to base currency for display
            remaining_display = self.convert_to_base_currency(remaining, loan['currency'])
            
            status = "ƒê√£ tr·∫£ h·∫øt" if remaining <= 0 else f"C√≤n: {self.format_currency(remaining_display)}"
            display_name = f"{loan['description']} ({loan['type']}) - {status}"
            
            # Truncate t√™n n·∫øu qu√° d√†i
            if len(display_name) > 60:
                display_name = display_name[:57] + "..."
            options.append((display_name, i))
        self.existing_loan_dropdown.options = options
        
        # Hi·ªÉn th·ªã th√¥ng b√°o s·ªë l∆∞·ª£ng kho·∫£n vay
        if len(self.loan_data) > 0:
            print(f"üè¶ ƒê√£ load {len(self.loan_data)} kho·∫£n vay t·ª´ d·ªØ li·ªáu")
    
    def update_savings_dropdown(self):
        #C·∫≠p nh·∫≠t dropdown danh s√°ch ti·∫øt ki·ªám/ƒë·∫ßu t∆∞
        options = [('-- T·∫°o kho·∫£n m·ªõi --', '')]
        # Group savings by type and description
        savings_summary = {}
        for i, saving in enumerate(self.savings_data):
            key = f"{saving['type']} - {saving['description']}"
            if key in savings_summary:
                # Convert to base currency before summing
                converted_amount = self.convert_to_base_currency(saving['amount'], saving['currency'])
                savings_summary[key]['total'] += converted_amount
                savings_summary[key]['indices'].append(i)
            else:
                converted_amount = self.convert_to_base_currency(saving['amount'], saving['currency'])
                savings_summary[key] = {
                    'total': converted_amount,
                    'indices': [i],
                    'type': saving['type'],
                    'description': saving['description']
                }
        
        for key, data in savings_summary.items():
            display_name = f"{key} - T·ªïng: {self.format_currency(data['total'])}"
            if len(display_name) > 60:
                display_name = display_name[:57] + "..."
            options.append((display_name, key))
        
        self.existing_savings_dropdown.options = options
        
        # Hi·ªÉn th·ªã th√¥ng b√°o s·ªë l∆∞·ª£ng kho·∫£n ti·∫øt ki·ªám
        if len(savings_summary) > 0:
            print(f"üíé ƒê√£ load {len(savings_summary)} lo·∫°i kho·∫£n ti·∫øt ki·ªám/ƒë·∫ßu t∆∞ t·ª´ d·ªØ li·ªáu")
    """

    def update_loan_dropdown(self):
        """C·∫≠p nh·∫≠t dropdown danh s√°ch kho·∫£n vay"""
        options = [('-- T·∫°o kho·∫£n vay m·ªõi --', '')]
        for i, loan in enumerate(self.loan_data):
            # T√≠nh to√°n remaining amount ƒë·ªÉ ƒë·∫£m b·∫£o ch√≠nh x√°c
            remaining = loan['total_amount'] - loan['paid_amount']
            loan['remaining_amount'] = max(0, remaining)  # C·∫≠p nh·∫≠t l·∫°i remaining_amount
            
            # Hi·ªÉn th·ªã v·ªõi ƒë∆°n v·ªã ti·ªÅn t·ªá g·ªëc
            remaining_display = self.format_currency(remaining, loan['currency'])
            
            status = "ƒê√£ tr·∫£ h·∫øt" if remaining <= 0 else f"C√≤n: {remaining_display}"
            display_name = f"{loan['description']} ({loan['type']}) - {status}"
            
            # Truncate t√™n n·∫øu qu√° d√†i
            if len(display_name) > 60:
                display_name = display_name[:57] + "..."
            options.append((display_name, i))
        self.existing_loan_dropdown.options = options
        
        # Hi·ªÉn th·ªã th√¥ng b√°o s·ªë l∆∞·ª£ng kho·∫£n vay
        if len(self.loan_data) > 0:
            print(f"üè¶ ƒê√£ load {len(self.loan_data)} kho·∫£n vay t·ª´ d·ªØ li·ªáu")
    
    def update_savings_dropdown(self):
        """C·∫≠p nh·∫≠t dropdown danh s√°ch ti·∫øt ki·ªám/ƒë·∫ßu t∆∞"""
        options = [('-- T·∫°o kho·∫£n m·ªõi --', '')]
        # Group savings by type, description, and currency
        savings_summary = {}
        for i, saving in enumerate(self.savings_data):
            # Th√™m currency v√†o key ƒë·ªÉ t√°ch bi·ªát c√°c lo·∫°i ti·ªÅn t·ªá kh√°c nhau
            key = f"{saving['type']} - {saving['description']} ({saving['currency']})"
            if key in savings_summary:
                # C·ªông tr·ª±c ti·∫øp kh√¥ng chuy·ªÉn ƒë·ªïi v√¨ c√πng lo·∫°i ti·ªÅn t·ªá
                savings_summary[key]['total'] += saving['amount']
                savings_summary[key]['indices'].append(i)
            else:
                savings_summary[key] = {
                    'total': saving['amount'],
                    'indices': [i],
                    'type': saving['type'],
                    'description': saving['description'],
                    'currency': saving['currency']
                }
        
        for key, data in savings_summary.items():
            # Hi·ªÉn th·ªã v·ªõi ƒë∆°n v·ªã ti·ªÅn t·ªá g·ªëc
            total_display = self.format_currency(data['total'], data['currency'])
            display_name = f"{data['type']} - {data['description']} - T·ªïng: {total_display}"
            if len(display_name) > 60:
                display_name = display_name[:57] + "..."
            options.append((display_name, key))
        
        self.existing_savings_dropdown.options = options
        
        # Hi·ªÉn th·ªã th√¥ng b√°o s·ªë l∆∞·ª£ng kho·∫£n ti·∫øt ki·ªám
        if len(savings_summary) > 0:
            print(f"üíé ƒê√£ load {len(savings_summary)} lo·∫°i kho·∫£n ti·∫øt ki·ªám/ƒë·∫ßu t∆∞ t·ª´ d·ªØ li·ªáu")
    
    def add_loan(self, button):
        if self.loan_description.value and self.loan_total.value > 0:
            # T√¨m xem ƒë√£ c√≥ kho·∫£n vay n√†y ch∆∞a
            existing_loan = None
            for loan in self.loan_data:
                if loan['description'] == self.loan_description.value and loan['type'] == self.loan_type.value:
                    existing_loan = loan
                    break
            
            if existing_loan:
                # C·∫≠p nh·∫≠t kho·∫£n vay hi·ªán c√≥
                existing_loan.update({
                    'total_amount': self.loan_total.value,
                    'monthly_payment': self.loan_monthly.value,
                    'paid_amount': self.loan_paid.value,
                    'remaining_amount': self.loan_total.value - self.loan_paid.value,
                    'currency': self.loan_currency.value,
                    'is_fixed': self.is_fixed_payment.value,
                    'last_updated': date.today()
                })
                message = f"üîÑ ƒê√£ c·∫≠p nh·∫≠t kho·∫£n vay: {self.loan_description.value}"
            else:
                # Th√™m kho·∫£n vay m·ªõi
                self.loan_data.append({
                    'type': self.loan_type.value,
                    'description': self.loan_description.value,
                    'total_amount': self.loan_total.value,
                    'monthly_payment': self.loan_monthly.value,
                    'paid_amount': self.loan_paid.value,
                    'remaining_amount': self.loan_total.value - self.loan_paid.value,
                    'currency': self.loan_currency.value,
                    'is_fixed': self.is_fixed_payment.value,
                    'created_date': date.today(),
                    'last_updated': date.today(),
                    'payment_history': []
                })
                message = f"‚úÖ ƒê√£ th√™m kho·∫£n vay: {self.loan_description.value}"
            
            # Auto-save after adding/updating loan
            self.save_data_silent()
            self.update_loan_dropdown()  # C·∫≠p nh·∫≠t dropdown
            
            total_display = self.format_currency(self.loan_total.value, self.loan_currency.value)
            monthly_display = self.format_currency(self.loan_monthly.value, self.loan_currency.value)
            
            with self.output:
                clear_output()
                print(message)
                print(f"   üí∞ T·ªïng n·ª£: {total_display}")
                print(f"   üìÖ Tr·∫£ h√†ng th√°ng: {monthly_display} ({'C·ªë ƒë·ªãnh' if self.is_fixed_payment.value else 'Linh ho·∫°t'})")
                print("üíæ D·ªØ li·ªáu ƒë√£ ƒë∆∞·ª£c l∆∞u t·ª± ƒë·ªông")
        else:
            with self.output:
                clear_output()
                print("‚ùå Vui l√≤ng nh·∫≠p ƒë·∫ßy ƒë·ªß th√¥ng tin kho·∫£n vay!")
    
    def load_selected_loan(self, button):
        """T·∫£i th√¥ng tin kho·∫£n vay ƒë√£ ch·ªçn"""
        selected_index = self.existing_loan_dropdown.value
        if selected_index == '' or not isinstance(selected_index, int):
            # Clear form for new loan
            self.loan_type.value = 'Vay ng√¢n h√†ng'
            self.loan_description.value = ''
            self.loan_total.value = 0.0
            self.loan_monthly.value = 0.0
            self.loan_paid.value = 0.0
            self.loan_currency.value = 'VND'
            self.is_fixed_payment.value = True
            
            with self.output:
                clear_output()
                print("üìù Form ƒë√£ ƒë∆∞·ª£c reset ƒë·ªÉ t·∫°o kho·∫£n vay m·ªõi")
            return
        
        if selected_index < len(self.loan_data):
            loan = self.loan_data[selected_index]
            
            # Populate form with loan data
            self.loan_type.value = loan['type']
            self.loan_description.value = loan['description']
            self.loan_total.value = loan['total_amount']
            self.loan_monthly.value = loan['monthly_payment']
            self.loan_paid.value = loan['paid_amount']
            self.loan_currency.value = loan.get('currency', 'VND')
            self.is_fixed_payment.value = loan['is_fixed']
            
            total_display = self.format_currency(loan['total_amount'], loan.get('currency', 'VND'))
            paid_display = self.format_currency(loan['paid_amount'], loan.get('currency', 'VND'))
            remaining_display = self.format_currency(loan['remaining_amount'], loan.get('currency', 'VND'))
            
            with self.output:
                clear_output()
                print(f"‚úÖ ƒê√£ t·∫£i th√¥ng tin: {loan['description']}")
                print(f"   üí∞ T·ªïng n·ª£: {total_display}")
                print(f"   ‚úÖ ƒê√£ tr·∫£: {paid_display}")
                print(f"   ‚ùó C√≤n l·∫°i: {remaining_display}")
                
                if loan['payment_history']:
                    print(f"   üìä L·ªãch s·ª≠: {len(loan['payment_history'])} l·∫ßn thanh to√°n")
    
    def delete_loan(self, button):
        """X√≥a kho·∫£n vay ƒë√£ ch·ªçn"""
        selected_index = self.existing_loan_dropdown.value
        if selected_index == '' or not isinstance(selected_index, int):
            with self.output:
                clear_output()
                print("‚ùå Vui l√≤ng ch·ªçn kho·∫£n vay c·∫ßn x√≥a!")
            return
        
        if selected_index < len(self.loan_data):
            deleted_loan = self.loan_data.pop(selected_index)
            self.save_data_silent()
            self.update_loan_dropdown()
            
            # Clear form
            self.loan_type.value = 'Vay ng√¢n h√†ng'
            self.loan_description.value = ''
            self.loan_total.value = 0.0
            self.loan_monthly.value = 0.0
            self.loan_paid.value = 0.0
            self.loan_currency.value = 'VND'
            self.is_fixed_payment.value = True
            
            with self.output:
                clear_output()
                print(f"üóëÔ∏è ƒê√£ x√≥a kho·∫£n vay: {deleted_loan['description']}")
                print("üíæ D·ªØ li·ªáu ƒë√£ ƒë∆∞·ª£c l∆∞u t·ª± ƒë·ªông")
    
    def pay_loan(self, button):
        if not self.loan_description.value:
            with self.output:
                clear_output()
                print("‚ùå Vui l√≤ng nh·∫≠p m√¥ t·∫£ kho·∫£n vay c·∫ßn thanh to√°n!")
            return
            
        # T√¨m kho·∫£n vay ƒë·ªÉ thanh to√°n
        target_loan = None
        for loan in self.loan_data:
            if loan['description'] == self.loan_description.value and loan['type'] == self.loan_type.value:
                target_loan = loan
                break
        
        if not target_loan:
            with self.output:
                clear_output()
                print("‚ùå Kh√¥ng t√¨m th·∫•y kho·∫£n vay n√†y!")
            return
        
        payment_amount = self.loan_paid.value if self.loan_paid.value > 0 else target_loan['monthly_payment']
        
        # Ghi nh·∫≠n thanh to√°n
        payment_record = {
            'date': self.loan_date.value,
            'amount': payment_amount,
            'remaining_before': target_loan['remaining_amount']
        }
        
        target_loan['payment_history'].append(payment_record)
        target_loan['paid_amount'] += payment_amount
        target_loan['remaining_amount'] = max(0, target_loan['total_amount'] - target_loan['paid_amount'])
        target_loan['last_updated'] = date.today()
        
        # Auto-save after payment
        self.save_data_silent()
        self.update_loan_dropdown()  # C·∫≠p nh·∫≠t dropdown sau khi tr·∫£ n·ª£
        
        payment_display = self.format_currency(payment_amount, target_loan.get('currency', 'VND'))
        remaining_display = self.format_currency(target_loan['remaining_amount'], target_loan.get('currency', 'VND'))
        
        with self.output:
            clear_output()
            print(f"‚úÖ ƒê√£ ghi nh·∫≠n thanh to√°n: {self.loan_description.value}")
            print(f"   üí∏ S·ªë ti·ªÅn tr·∫£: {payment_display}")
            print(f"   üí∞ C√≤n l·∫°i: {remaining_display}")
            print("üíæ D·ªØ li·ªáu ƒë√£ ƒë∆∞·ª£c l∆∞u t·ª± ƒë·ªông")
            if target_loan['remaining_amount'] == 0:
                print("   üéâ ƒê√£ tr·∫£ h·∫øt n·ª£!")
    
    def add_savings(self, button):
        if self.savings_description.value and self.savings_amount.value > 0:
            self.savings_data.append({
                'date': self.savings_date.value,
                'type': self.savings_type.value,
                'description': self.savings_description.value,
                'amount': self.savings_amount.value,
                'currency': self.savings_currency.value
            })
            
            # Auto-save after adding data
            self.save_data_silent()
            self.update_savings_dropdown()  # C·∫≠p nh·∫≠t dropdown
            
            amount_display = self.format_currency(self.savings_amount.value, self.savings_currency.value)
            with self.output:
                clear_output()
                print(f"‚úÖ ƒê√£ th√™m ti·∫øt ki·ªám/ƒë·∫ßu t∆∞: {self.savings_description.value} - {amount_display}")
                print("üíæ D·ªØ li·ªáu ƒë√£ ƒë∆∞·ª£c l∆∞u t·ª± ƒë·ªông")
            
            # Clear inputs
            self.savings_description.value = ""
            self.savings_amount.value = 0.0
        else:
            with self.output:
                clear_output()
                print("‚ùå Vui l√≤ng nh·∫≠p ƒë·∫ßy ƒë·ªß th√¥ng tin ti·∫øt ki·ªám/ƒë·∫ßu t∆∞!")
    
    def load_selected_savings(self, button):
        """T·∫£i th√¥ng tin kho·∫£n ti·∫øt ki·ªám/ƒë·∫ßu t∆∞ ƒë√£ ch·ªçn"""
        selected_key = self.existing_savings_dropdown.value
        if selected_key == '':
            # Clear form for new savings
            self.savings_type.value = 'Ti·∫øt ki·ªám ng√¢n h√†ng'
            self.savings_description.value = ''
            self.savings_amount.value = 0.0
            self.savings_currency.value = 'VND'
            
            with self.output:
                clear_output()
                print("üìù Form ƒë√£ ƒë∆∞·ª£c reset ƒë·ªÉ t·∫°o kho·∫£n m·ªõi")
            return
        
        # T√¨m kho·∫£n ti·∫øt ki·ªám/ƒë·∫ßu t∆∞ theo key
        target_savings = None
        total_amount = 0
        count = 0
        
        for saving in self.savings_data:
            key = f"{saving['type']} - {saving['description']}"
            if key == selected_key:
                if target_savings is None:
                    target_savings = saving
                # Convert to base currency for display
                converted_amount = self.convert_to_base_currency(saving['amount'], saving['currency'])
                total_amount += converted_amount
                count += 1
        
        if target_savings:
            # Populate form with savings data
            self.savings_type.value = target_savings['type']
            self.savings_description.value = target_savings['description']
            self.savings_amount.value = 0.0  # Reset amount for new entry
            self.savings_currency.value = target_savings.get('currency', 'VND')
            
            with self.output:
                clear_output()
                print(f"‚úÖ ƒê√£ t·∫£i th√¥ng tin: {target_savings['description']}")
                print(f"   üíé Lo·∫°i: {target_savings['type']}")
                print(f"   üí∞ T·ªïng ƒë√£ ƒë·∫ßu t∆∞: {self.format_currency(total_amount)}")
                print(f"   üìä S·ªë l·∫ßn giao d·ªãch: {count}")
                print("üìù B·∫°n c√≥ th·ªÉ th√™m giao d·ªãch m·ªõi ho·∫∑c c·∫≠p nh·∫≠t")

    """
    def update_savings(self, button):
        "C·∫≠p nh·∫≠t kho·∫£n ti·∫øt ki·ªám/ƒë·∫ßu t∆∞ (t∆∞∆°ng t·ª± add nh∆∞ng v·ªõi th√¥ng b√°o kh√°c)"
        if self.savings_description.value and self.savings_amount.value > 0:
            self.savings_data.append({
                'date': self.savings_date.value,
                'type': self.savings_type.value,
                'description': self.savings_description.value,
                'amount': self.savings_amount.value,
                'currency': self.savings_currency.value
            })
            
            # Auto-save after updating data
            self.save_data_silent()
            self.update_savings_dropdown()  # C·∫≠p nh·∫≠t dropdown
            
            amount_display = self.format_currency(self.savings_amount.value, self.savings_currency.value)
            with self.output:
                clear_output()
                print(f"üîÑ ƒê√£ c·∫≠p nh·∫≠t/th√™m v√†o {self.savings_description.value}: {amount_display}")
                print("üíæ D·ªØ li·ªáu ƒë√£ ƒë∆∞·ª£c l∆∞u t·ª± ƒë·ªông")
            
            # Clear amount but keep type and description
            self.savings_amount.value = 0.0
        else:
            with self.output:
                clear_output()
                print("‚ùå Vui l√≤ng nh·∫≠p ƒë·∫ßy ƒë·ªß th√¥ng tin!")
    """

    """
    def update_savings(self, button):
        #C·∫≠p nh·∫≠t kho·∫£n ti·∫øt ki·ªám/ƒë·∫ßu t∆∞ (h·ªó tr·ª£ c·∫£ g·ª≠i ti·ªÅn v√† r√∫t ti·ªÅn)
        # Ki·ªÉm tra ƒëi·ªÅu ki·ªán: c√≥ m√¥ t·∫£ v√† s·ªë ti·ªÅn kh√°c 0
        if self.savings_description.value and self.savings_amount.value != 0:
            self.savings_data.append({
                'date': self.savings_date.value,
                'type': self.savings_type.value,
                'description': self.savings_description.value,
                'amount': self.savings_amount.value,  # Cho ph√©p c·∫£ gi√° tr·ªã √¢m v√† d∆∞∆°ng
                'currency': self.savings_currency.value
            })
                        
            # Auto-save after updating data
            self.save_data_silent()
            self.update_savings_dropdown()  # C·∫≠p nh·∫≠t dropdown
                        
            amount_display = self.format_currency(abs(self.savings_amount.value), self.savings_currency.value)
            
            # X√°c ƒë·ªãnh lo·∫°i giao d·ªãch d·ª±a tr√™n d·∫•u c·ªßa s·ªë ti·ªÅn
            if self.savings_amount.value > 0:
                action_icon = "‚ûï"
                action_text = "ƒê√£ th√™m v√†o"
            else:
                action_icon = "‚ûñ"
                action_text = "ƒê√£ r√∫t t·ª´"
                
            with self.output:
                clear_output()
                print(f"{action_icon} {action_text} {self.savings_description.value}: {amount_display}")
                print("üíæ D·ªØ li·ªáu ƒë√£ ƒë∆∞·ª£c l∆∞u t·ª± ƒë·ªông")
                        
            # Clear amount but keep type and description
            self.savings_amount.value = 0.0
        else:
            with self.output:
                clear_output()
                if not self.savings_description.value:
                    print("‚ùå Vui l√≤ng nh·∫≠p m√¥ t·∫£!")
                elif self.savings_amount.value == 0:
                    print("‚ùå Vui l√≤ng nh·∫≠p s·ªë ti·ªÅn kh√°c 0!")
                else:
                    print("‚ùå Vui l√≤ng nh·∫≠p ƒë·∫ßy ƒë·ªß th√¥ng tin!")
    """

    def update_savings(self, button):
        """C·∫≠p nh·∫≠t kho·∫£n ti·∫øt ki·ªám/ƒë·∫ßu t∆∞ (h·ªó tr·ª£ c·∫£ g·ª≠i ti·ªÅn v√† r√∫t ti·ªÅn)"""
        # Ki·ªÉm tra ƒëi·ªÅu ki·ªán: c√≥ m√¥ t·∫£ v√† s·ªë ti·ªÅn kh√°c 0
        if self.savings_description.value and self.savings_amount.value != 0:
            # N·∫øu l√† giao d·ªãch r√∫t ti·ªÅn (s·ªë √¢m), ki·ªÉm tra s·ªë d∆∞
            if self.savings_amount.value < 0:
                # T√≠nh t·ªïng s·ªë d∆∞ hi·ªán t·∫°i cho lo·∫°i ti·∫øt ki·ªám n√†y
                current_balance = sum(item['amount'] for item in self.savings_data 
                                    if item['type'] == self.savings_type.value 
                                    and item['currency'] == self.savings_currency.value)
                
                withdrawal_amount = abs(self.savings_amount.value)
                
                # Ki·ªÉm tra xem c√≥ ƒë·ªß ti·ªÅn ƒë·ªÉ r√∫t kh√¥ng
                if current_balance < withdrawal_amount:
                    with self.output:
                        clear_output()
                        current_balance_display = self.format_currency(current_balance, self.savings_currency.value)
                        withdrawal_display = self.format_currency(withdrawal_amount, self.savings_currency.value)
                        print(f"‚ùå Kh√¥ng th·ªÉ r√∫t {withdrawal_display}!")
                        print(f"üí∞ S·ªë d∆∞ hi·ªán t·∫°i c·ªßa {self.savings_type.value}: {current_balance_display}")
                        print(f"üìù S·ªë ti·ªÅn r√∫t kh√¥ng ƒë∆∞·ª£c v∆∞·ª£t qu√° s·ªë d∆∞ hi·ªán c√≥")
                    return  # D·ª´ng th·ª±c hi·ªán n·∫øu kh√¥ng ƒë·ªß ti·ªÅn
            
            # N·∫øu ƒë·ªß ƒëi·ªÅu ki·ªán, th·ª±c hi·ªán giao d·ªãch
            self.savings_data.append({
                'date': self.savings_date.value,
                'type': self.savings_type.value,
                'description': self.savings_description.value,
                'amount': self.savings_amount.value,  # Cho ph√©p c·∫£ gi√° tr·ªã √¢m v√† d∆∞∆°ng
                'currency': self.savings_currency.value
            })
                         
            # Auto-save after updating data
            self.save_data_silent()
            self.update_savings_dropdown()  # C·∫≠p nh·∫≠t dropdown
                         
            amount_display = self.format_currency(abs(self.savings_amount.value), self.savings_currency.value)
            
            # X√°c ƒë·ªãnh lo·∫°i giao d·ªãch d·ª±a tr√™n d·∫•u c·ªßa s·ªë ti·ªÅn
            if self.savings_amount.value > 0:
                action_icon = "‚ûï"
                action_text = "ƒê√£ th√™m v√†o"
            else:
                action_icon = "‚ûñ"
                action_text = "ƒê√£ r√∫t t·ª´"
                
            with self.output:
                clear_output()
                print(f"{action_icon} {action_text} {self.savings_description.value}: {amount_display}")
                print("üíæ D·ªØ li·ªáu ƒë√£ ƒë∆∞·ª£c l∆∞u t·ª± ƒë·ªông")
                         
            # Clear amount but keep type and description
            self.savings_amount.value = 0.0
        else:
            with self.output:
                clear_output()
                if not self.savings_description.value:
                    print("‚ùå Vui l√≤ng nh·∫≠p m√¥ t·∫£!")
                elif self.savings_amount.value == 0:
                    print("‚ùå Vui l√≤ng nh·∫≠p s·ªë ti·ªÅn kh√°c 0!")
                else:
                    print("‚ùå Vui l√≤ng nh·∫≠p ƒë·∫ßy ƒë·ªß th√¥ng tin!")
                    
    def delete_savings(self, button):
        """X√≥a t·∫•t c·∫£ giao d·ªãch c·ªßa m·ªôt lo·∫°i ti·∫øt ki·ªám/ƒë·∫ßu t∆∞"""
        selected_key = self.existing_savings_dropdown.value
        if selected_key == '':
            with self.output:
                clear_output()
                print("‚ùå Vui l√≤ng ch·ªçn kho·∫£n c·∫ßn x√≥a!")
            return
        
        # T√¨m v√† x√≥a t·∫•t c·∫£ giao d·ªãch v·ªõi key n√†y
        deleted_items = []
        remaining_savings = []
        
        for saving in self.savings_data:
            key = f"{saving['type']} - {saving['description']}"
            if key == selected_key:
                deleted_items.append(saving)
            else:
                remaining_savings.append(saving)
        
        if deleted_items:
            self.savings_data = remaining_savings
            self.save_data_silent()
            self.update_savings_dropdown()
            
            # Clear form
            self.savings_type.value = 'Ti·∫øt ki·ªám ng√¢n h√†ng'
            self.savings_description.value = ''
            self.savings_amount.value = 0.0
            self.savings_currency.value = 'VND'
            
            # Calculate total deleted amount in base currency
            total_deleted = 0
            for item in deleted_items:
                total_deleted += self.convert_to_base_currency(item['amount'], item['currency'])
            
            with self.output:
                clear_output()
                print(f"üóëÔ∏è ƒê√£ x√≥a {len(deleted_items)} giao d·ªãch: {selected_key}")
                print(f"   üí∞ T·ªïng s·ªë ti·ªÅn: {self.format_currency(total_deleted)}")
                print("üíæ D·ªØ li·ªáu ƒë√£ ƒë∆∞·ª£c l∆∞u t·ª± ƒë·ªông")
    
    def filter_data_by_month(self, data, month_str):
        if not data:
            return []
        
        year, month = map(int, month_str.split('-'))
        filtered_data = []
        
        for item in data:
            item_date = item['date']
            if item_date.year == year and item_date.month == month:
                filtered_data.append(item)
        
        return filtered_data
    
    def calculate_monthly_loan_payments(self, month_str):
        """T√≠nh t·ªïng kho·∫£n vay ph·∫£i tr·∫£ trong th√°ng (ƒë√£ chuy·ªÉn ƒë·ªïi sang ti·ªÅn t·ªá b√°o c√°o)"""
        year, month = map(int, month_str.split('-'))
        total_fixed_payment = 0
        total_flexible_payment = 0
        
        for loan in self.loan_data:
            if loan['remaining_amount'] > 0:  # Ch·ªâ t√≠nh c√°c kho·∫£n vay ch∆∞a tr·∫£ h·∫øt
                loan_currency = loan.get('currency', 'VND')
                
                if loan['is_fixed']:
                    converted_payment = self.convert_to_base_currency(loan['monthly_payment'], loan_currency)
                    total_fixed_payment += converted_payment
                else:
                    # V·ªõi vay linh ho·∫°t, t√≠nh t·ª´ l·ªãch s·ª≠ thanh to√°n trong th√°ng
                    monthly_payments = 0
                    for payment in loan['payment_history']:
                        if payment['date'].year == year and payment['date'].month == month:
                            monthly_payments += payment['amount']
                    converted_payment = self.convert_to_base_currency(monthly_payments, loan_currency)
                    total_flexible_payment += converted_payment
        
        return total_fixed_payment, total_flexible_payment
    
    def show_investment_detail(self, button):
        """Hi·ªÉn th·ªã chi ti·∫øt c√°c kho·∫£n ƒë·∫ßu t∆∞"""
        if not self.savings_data:
            with self.output:
                clear_output()
                print("‚ùå Ch∆∞a c√≥ d·ªØ li·ªáu ƒë·∫ßu t∆∞ n√†o!")
            return
        
        # Group by type and description
        investment_summary = {}
        total_investment = 0
        
        for saving in self.savings_data:
            key = f"{saving['type']} - {saving['description']}"
            converted_amount = self.convert_to_base_currency(saving['amount'], saving['currency'])
            
            if key in investment_summary:
                investment_summary[key]['total'] += converted_amount
                investment_summary[key]['transactions'].append({
                    'date': saving['date'],
                    'amount': converted_amount,
                    'original_amount': saving['amount'],
                    'original_currency': saving['currency']
                })
            else:
                investment_summary[key] = {
                    'type': saving['type'],
                    'description': saving['description'],
                    'total': converted_amount,
                    'transactions': [{
                        'date': saving['date'],
                        'amount': converted_amount,
                        'original_amount': saving['amount'],
                        'original_currency': saving['currency']
                    }]
                }
            total_investment += converted_amount
        
        with self.output:
            clear_output()
            print("="*70)
            print("üíé CHI TI·∫æT C√ÅC KHO·∫¢N ƒê·∫¶U T∆Ø & TI·∫æT KI·ªÜM")
            print("="*70)
            print(f"üí∞ T·ªîNG C·ªòNG T·∫§T C·∫¢: {self.format_currency(total_investment)}")
            print("="*70)
            
            # Sort by total amount descending
            sorted_investments = sorted(investment_summary.items(), 
                                      key=lambda x: x[1]['total'], reverse=True)
            
            for i, (key, data) in enumerate(sorted_investments, 1):
                percentage = (data['total'] / total_investment) * 100 if total_investment > 0 else 0
                
                print(f"\n{i}. {data['type']} - {data['description']}")
                print(f"   üí∞ T·ªïng gi√° tr·ªã: {self.format_currency(data['total'])} ({percentage:.1f}%)")
                print(f"   üìä S·ªë giao d·ªãch: {len(data['transactions'])}")
                
                # Show recent transactions (max 3)
                recent_transactions = sorted(data['transactions'], 
                                           key=lambda x: x['date'], reverse=True)[:3]
                
                print("   üìÖ Giao d·ªãch g·∫ßn nh·∫•t:")
                for trans in recent_transactions:
                    if trans['original_currency'] != self.base_currency:
                        print(f"      ‚Ä¢ {trans['date']}: {trans['original_amount']:,.0f} {trans['original_currency']} "
                              f"(‚âà {self.format_currency(trans['amount'])})")
                    else:
                        print(f"      ‚Ä¢ {trans['date']}: {self.format_currency(trans['amount'])}")
                
                if len(data['transactions']) > 3:
                    print(f"      ... v√† {len(data['transactions']) - 3} giao d·ªãch kh√°c")
                
                print("-" * 50)
    
    def show_investment_charts(self, button):
        """Hi·ªÉn th·ªã bi·ªÉu ƒë·ªì chi ti·∫øt v·ªÅ ƒë·∫ßu t∆∞"""
        if not self.savings_data:
            with self.output:
                clear_output()
                print("‚ùå Ch∆∞a c√≥ d·ªØ li·ªáu ƒë·∫ßu t∆∞ ƒë·ªÉ v·∫Ω bi·ªÉu ƒë·ªì!")
            return
        
        # Process data for charts
        investment_by_type = {}
        investment_timeline = {}
        investment_by_description = {}
        
        for saving in self.savings_data:
            converted_amount = self.convert_to_base_currency(saving['amount'], saving['currency'])
            
            # By type
            if saving['type'] in investment_by_type:
                investment_by_type[saving['type']] += converted_amount
            else:
                investment_by_type[saving['type']] = converted_amount
            
            # By timeline (month-year)
            month_key = f"{saving['date'].year}-{saving['date'].month:02d}"
            if month_key in investment_timeline:
                investment_timeline[month_key] += converted_amount
            else:
                investment_timeline[month_key] = converted_amount
            
            # By description (top investments)
            if saving['description'] in investment_by_description:
                investment_by_description[saving['description']] += converted_amount
            else:
                investment_by_description[saving['description']] = converted_amount
        
        with self.output:
            clear_output()
            
            # Create figure with subplots
            fig, axes = plt.subplots(2, 2, figsize=(16, 12))
            fig.suptitle(f'Ph√¢n T√≠ch Chi Ti·∫øt ƒê·∫ßu T∆∞ & Ti·∫øt Ki·ªám (T√≠nh b·∫±ng {self.base_currency})', 
                        fontsize=16, fontweight='bold')
            
            # 1. Investment by type (pie chart)
            if investment_by_type:
                wedges, texts, autotexts = axes[0,0].pie(
                    investment_by_type.values(), 
                    labels=investment_by_type.keys(), 
                    autopct='%1.1f%%',
                    startangle=90
                )
                axes[0,0].set_title('Ph√¢n B·ªï Theo Lo·∫°i ƒê·∫ßu T∆∞')
                
                # Add amount to labels
                for i, (key, value) in enumerate(investment_by_type.items()):
                    autotexts[i].set_text(f'{autotexts[i].get_text()}\n{self.format_currency(value)}')
            
            # 2. Investment timeline (line chart)
            if investment_timeline:
                timeline_sorted = dict(sorted(investment_timeline.items()))
                dates = list(timeline_sorted.keys())
                amounts = list(timeline_sorted.values())
                
                # Calculate cumulative investment
                cumulative = np.cumsum(amounts)
                
                axes[0,1].plot(dates, amounts, 'o-', label='ƒê·∫ßu t∆∞ h√†ng th√°ng', color='#6F42C1', linewidth=2, markersize=6)
                axes[0,1].plot(dates, cumulative, 's-', label='T√≠ch l≈©y', color='#28A745', linewidth=2, markersize=4)
                axes[0,1].set_title('L·ªãch S·ª≠ ƒê·∫ßu T∆∞ Theo Th·ªùi Gian')
                axes[0,1].set_ylabel(f'S·ªë ti·ªÅn ({self.base_currency})')
                axes[0,1].legend()
                axes[0,1].tick_params(axis='x', rotation=45)
                axes[0,1].grid(True, alpha=0.3)
            
            # 3. Top investments by description (horizontal bar)
            if investment_by_description:
                # Get top 10 investments
                top_investments = dict(sorted(investment_by_description.items(), 
                                            key=lambda x: x[1], reverse=True)[:10])
                
                y_pos = range(len(top_investments))
                descriptions = [desc[:30] + '...' if len(desc) > 30 else desc 
                              for desc in top_investments.keys()]
                amounts = list(top_investments.values())
                
                bars = axes[1,0].barh(y_pos, amounts, color='#17A2B8', alpha=0.8)
                axes[1,0].set_yticks(y_pos)
                axes[1,0].set_yticklabels(descriptions)
                axes[1,0].set_xlabel(f'S·ªë ti·ªÅn ({self.base_currency})')
                axes[1,0].set_title('Top 10 Kho·∫£n ƒê·∫ßu T∆∞')
                
                # Add value labels on bars
                for i, (bar, amount) in enumerate(zip(bars, amounts)):
                    axes[1,0].text(bar.get_width() + max(amounts) * 0.01, 
                                 bar.get_y() + bar.get_height()/2,
                                 f'{self.format_currency(amount)}',
                                 ha='left', va='center', fontsize=8)
            
            # 4. Investment growth analysis
            if len(investment_timeline) > 1:
                timeline_sorted = dict(sorted(investment_timeline.items()))
                dates = list(timeline_sorted.keys())
                amounts = list(timeline_sorted.values())
                cumulative = np.cumsum(amounts)
                
                # Monthly growth rate
                growth_rates = []
                for i in range(1, len(cumulative)):
                    if cumulative[i-1] > 0:
                        growth = ((cumulative[i] - cumulative[i-1]) / cumulative[i-1]) * 100
                        growth_rates.append(growth)
                    else:
                        growth_rates.append(0)
                
                if growth_rates:
                    axes[1,1].bar(dates[1:], growth_rates, color='#FFC107', alpha=0.7)
                    axes[1,1].set_title('TƒÉng Tr∆∞·ªüng ƒê·∫ßu T∆∞ H√†ng Th√°ng (%)')
                    axes[1,1].set_ylabel('TƒÉng tr∆∞·ªüng (%)')
                    axes[1,1].tick_params(axis='x', rotation=45)
                    axes[1,1].axhline(y=0, color='black', linestyle='-', alpha=0.3)
                    axes[1,1].grid(True, alpha=0.3)
            else:
                axes[1,1].text(0.5, 0.5, 'C·∫ßn √≠t nh·∫•t 2 th√°ng d·ªØ li·ªáu\nƒë·ªÉ ph√¢n t√≠ch tƒÉng tr∆∞·ªüng', 
                             ha='center', va='center', transform=axes[1,1].transAxes)
                axes[1,1].set_title('Ph√¢n T√≠ch TƒÉng Tr∆∞·ªüng')
            
            plt.tight_layout()
            plt.show()
            
            # Summary statistics
            total_investment = sum(self.convert_to_base_currency(s['amount'], s['currency']) 
                                 for s in self.savings_data)
            avg_monthly = total_investment / len(set(f"{s['date'].year}-{s['date'].month:02d}" 
                                                   for s in self.savings_data)) if self.savings_data else 0
            
            print("\n" + "="*50)
            print("üìä TH·ªêNG K√ä T·ªîNG QUAN:")
            print(f"üí∞ T·ªïng ƒë·∫ßu t∆∞: {self.format_currency(total_investment)}")
            print(f"üìà Trung b√¨nh/th√°ng: {self.format_currency(avg_monthly)}")
            print(f"üéØ S·ªë lo·∫°i ƒë·∫ßu t∆∞: {len(investment_by_type)}")
            print(f"üìä T·ªïng s·ªë giao d·ªãch: {len(self.savings_data)}")
    
    def show_total_assets(self, button):
        """Hi·ªÉn th·ªã t·ªïng t√†i s·∫£n hi·ªán t·∫°i"""
        # Calculate total income (converted to base currency)
        total_income = 0
        for income in self.income_data:
            converted = self.convert_to_base_currency(income['amount'], income['currency'])
            total_income += converted
        
        # Calculate total expenses (converted to base currency)  
        total_expense = 0
        for expense in self.expense_data:
            converted = self.convert_to_base_currency(expense['amount'], expense['currency'])
            total_expense += converted
        
        # Calculate total investments (converted to base currency)
        total_investments = 0
        for saving in self.savings_data:
            converted = self.convert_to_base_currency(saving['amount'], saving['currency'])
            total_investments += converted
        
        # Calculate total outstanding loans (converted to base currency)
        total_loans_remaining = 0
        total_loans_original = 0
        for loan in self.loan_data:
            converted_remaining = self.convert_to_base_currency(loan['remaining_amount'], loan.get('currency', 'VND'))
            converted_original = self.convert_to_base_currency(loan['total_amount'], loan.get('currency', 'VND'))
            total_loans_remaining += converted_remaining
            total_loans_original += converted_original
        
        # Calculate net cash flow (income - expenses - loan payments)
        cash_balance = total_income - total_expense
        
        # Net worth calculation (cash + investments - remaining loans)
        net_worth = cash_balance + total_investments - total_loans_remaining
        
        with self.output:
            clear_output()
            print("="*70)
            print(f"üíé T·ªîNG QUAN T√ÄI SAN HI·ªÜN T·∫†I (T√≠nh b·∫±ng {self.base_currency})")
            print(f"üìä T·ª∑ gi√° hi·ªán t·∫°i: 1 KRW = {self.exchange_rate:,.2f} VND")
            print("="*70)
            
            print("\nüìà NGU·ªíN THU:")
            print(f"   üí∞ T·ªïng thu nh·∫≠p:         {self.format_currency(total_income):>20}")
            
            print("\nüìâ KHO·∫¢N CHI:")
            print(f"   üí∏ T·ªïng chi ti√™u:         {self.format_currency(total_expense):>20}")
            print(f"   üíµ S·ªë d∆∞ ti·ªÅn m·∫∑t:        {self.format_currency(cash_balance):>20}")
            
            print("\nüíé T√ÄI S·∫¢N ƒê·∫¶U T∆Ø:")
            print(f"   üèÜ T·ªïng ƒë·∫ßu t∆∞/ti·∫øt ki·ªám: {self.format_currency(total_investments):>20}")
            
            # Breakdown by investment type
            investment_by_type = {}
            for saving in self.savings_data:
                converted = self.convert_to_base_currency(saving['amount'], saving['currency'])
                if saving['type'] in investment_by_type:
                    investment_by_type[saving['type']] += converted
                else:
                    investment_by_type[saving['type']] = converted
            
            if investment_by_type:
                for inv_type, amount in sorted(investment_by_type.items(), key=lambda x: x[1], reverse=True):
                    percentage = (amount / total_investments) * 100 if total_investments > 0 else 0
                    print(f"      ‚Ä¢ {inv_type:.<25} {self.format_currency(amount):>15} ({percentage:.1f}%)")
            
            print("\nüè¶ N·ª¢ PH·∫¢I TR·∫¢:")
            if total_loans_remaining > 0:
                print(f"   ‚ùó T·ªïng n·ª£ c√≤n l·∫°i:       {self.format_currency(total_loans_remaining):>20}")
                print(f"   üìä T·ªïng n·ª£ ban ƒë·∫ßu:      {self.format_currency(total_loans_original):>20}")
                
                # Show loan breakdown
                for loan in self.loan_data:
                    if loan['remaining_amount'] > 0:
                        converted_remaining = self.convert_to_base_currency(loan['remaining_amount'], loan.get('currency', 'VND'))
                        converted_original = self.convert_to_base_currency(loan['total_amount'], loan.get('currency', 'VND'))
                        paid_percentage = ((converted_original - converted_remaining) / converted_original) * 100 if converted_original > 0 else 0
                        
                        print(f"      ‚Ä¢ {loan['description'][:20]:.<20} {self.format_currency(converted_remaining):>15} "
                              f"(ƒê√£ tr·∫£ {paid_percentage:.1f}%)")
            else:
                print(f"   ‚úÖ Kh√¥ng c√≥ n·ª£:          {self.format_currency(0):>20}")
            
            print("\n" + "="*70)
            print(f"üí∞ T·ªîNG T√ÄI S·∫¢N R√íNG:       {self.format_currency(net_worth):>20}")
            
            if net_worth > 0:
                print("‚úÖ B·∫°n c√≥ t√†i s·∫£n r√≤ng d∆∞∆°ng - t√¨nh h√¨nh t√†i ch√≠nh t·ªët!")
            elif net_worth == 0:
                print("‚öñÔ∏è  T√†i s·∫£n r√≤ng c√¢n b·∫±ng")
            else:
                print("‚ö†Ô∏è  T√†i s·∫£n r√≤ng √¢m - c·∫ßn c·∫£i thi·ªán t√¨nh h√¨nh t√†i ch√≠nh")
            
            # Additional insights
            print("\nüìä PH√ÇN T√çCH B·ªî SUNG:")
            
            # Asset allocation
            total_assets = cash_balance + total_investments
            if total_assets > 0:
                cash_ratio = (cash_balance / total_assets) * 100 if cash_balance > 0 else 0
                investment_ratio = (total_investments / total_assets) * 100
                
                print(f"   üíµ T·ª∑ l·ªá ti·ªÅn m·∫∑t:        {cash_ratio:>18.1f}%")
                print(f"   üìà T·ª∑ l·ªá ƒë·∫ßu t∆∞:          {investment_ratio:>18.1f}%")
                
                # Recommendations based on ratios
                if cash_ratio > 70:
                    print("   üí° Khuy·∫øn ngh·ªã: N√™n tƒÉng ƒë·∫ßu t∆∞ ƒë·ªÉ t·ªëi ∆∞u l·ª£i nhu·∫≠n")
                elif cash_ratio < 10:
                    print("   üí° Khuy·∫øn ngh·ªã: N√™n duy tr√¨ qu·ªπ kh·∫©n c·∫•p cao h∆°n")
                else:
                    print("   üí° Ph√¢n b·ªï t√†i s·∫£n h·ª£p l√Ω")
            
            # Debt to asset ratio
            if total_assets > 0 and total_loans_remaining > 0:
                debt_ratio = (total_loans_remaining / total_assets) * 100
                print(f"   üè¶ T·ª∑ l·ªá n·ª£/t√†i s·∫£n:      {debt_ratio:>18.1f}%")
                
                if debt_ratio > 50:
                    print("   ‚ö†Ô∏è  Khuy·∫øn ngh·ªã: ∆Øu ti√™n tr·∫£ n·ª£ ƒë·ªÉ gi·∫£m r·ªßi ro")
                elif debt_ratio > 30:
                    print("   üí° Khuy·∫øn ngh·ªã: C√¢n nh·∫Øc tƒÉng t·ªëc tr·∫£ n·ª£")
                else:
                    print("   ‚úÖ M·ª©c n·ª£ trong t·∫ßm ki·ªÉm so√°t")
            
            # Show in both currencies if different from base
            if self.base_currency != 'KRW':
                net_worth_krw = net_worth / self.exchange_rate if self.exchange_rate > 0 else 0
                print(f"\nüîÑ T·ªîNG T√ÄI S·∫¢N R√íNG (KRW): {net_worth_krw:>15,.0f}‚Ç©")
            
            if self.base_currency != 'VND':
                net_worth_vnd = net_worth * self.exchange_rate
                print(f"\nüîÑ T·ªîNG T√ÄI S·∫¢N R√íNG (VND): {net_worth_vnd:>15,.0f}ƒë")
            
            print("="*70)
    
    def show_cash_flow(self, button):
        selected_month = self.month_filter.value
        
        # T√≠nh to√°n c√°c kho·∫£n thu chi (ƒë√£ convert sang base currency)
        income_filtered = self.filter_data_by_month(self.income_data, selected_month)
        expense_filtered = self.filter_data_by_month(self.expense_data, selected_month)
        savings_filtered = self.filter_data_by_month(self.savings_data, selected_month)
        
        total_income = sum(self.convert_to_base_currency(item['amount'], item['currency']) 
                          for item in income_filtered)
        total_expense = sum(self.convert_to_base_currency(item['amount'], item['currency']) 
                           for item in expense_filtered)
        total_savings = sum(self.convert_to_base_currency(item['amount'], item['currency']) 
                           for item in savings_filtered)
        
        # T√≠nh kho·∫£n vay ph·∫£i tr·∫£
        fixed_loan, flexible_loan = self.calculate_monthly_loan_payments(selected_month)
        total_loan_payment = fixed_loan + flexible_loan
        
        # T√≠nh d√≤ng ti·ªÅn
        basic_balance = total_income - total_expense  # S·ªë d∆∞ sau chi ti√™u c∆° b·∫£n
        after_loan = basic_balance - total_loan_payment  # S·ªë d∆∞ sau tr·∫£ n·ª£
        final_balance = after_loan - total_savings  # S·ªë d∆∞ cu·ªëi c√πng
        
        with self.output:
            clear_output()
            print("="*60)
            print(f"üí∞ D√íNG TI·ªÄN V√Ä PH√ÇN B·ªî TH√ÅNG {selected_month}")
            print(f"üí± Hi·ªÉn th·ªã b·∫±ng: {self.base_currency} (T·ª∑ gi√°: 1 KRW = {self.exchange_rate:,.2f} VND)")
            print("="*60)
            
            # Thu nh·∫≠p
            print(f"üìà T·ªîNG THU NH·∫¨P:           {self.format_currency(total_income):>15}")
            print("-"*50)
            
            # Chi ti√™u c∆° b·∫£n
            print(f"üìä Chi ti√™u sinh ho·∫°t:      {self.format_currency(total_expense):>15}")
            print(f"   ‚Üí S·ªë d∆∞ sau chi c∆° b·∫£n:  {self.format_currency(basic_balance):>15}")
            print("-"*50)
            
            # Tr·∫£ n·ª£
            print("üè¶ KHO·∫¢N VAY PH·∫¢I TR·∫¢:")
            if fixed_loan > 0:
                print(f"   ‚Ä¢ Vay c·ªë ƒë·ªãnh h√†ng th√°ng: {self.format_currency(fixed_loan):>15}")
            if flexible_loan > 0:
                print(f"   ‚Ä¢ Vay linh ho·∫°t ƒë√£ tr·∫£:   {self.format_currency(flexible_loan):>15}")
            print(f"   ‚Üí T·ªïng tr·∫£ n·ª£ th√°ng n√†y:  {self.format_currency(total_loan_payment):>15}")
            print(f"   ‚Üí S·ªë d∆∞ sau tr·∫£ n·ª£:       {self.format_currency(after_loan):>15}")
            print("-"*50)
            
            # Ti·∫øt ki·ªám/ƒê·∫ßu t∆∞
            if total_savings > 0:
                print(f"üíé Ti·∫øt ki·ªám & ƒê·∫ßu t∆∞:      {self.format_currency(total_savings):>15}")
                print(f"   ‚Üí S·ªë d∆∞ sau ti·∫øt ki·ªám:    {self.format_currency(final_balance):>15}")
            else:
                print(f"üíé Ti·∫øt ki·ªám & ƒê·∫ßu t∆∞:      {self.format_currency(0):>15}")
                final_balance = after_loan
            
            print("="*60)
            
            # K·∫øt lu·∫≠n v√† khuy·∫øn ngh·ªã
            if final_balance > 0:
                print(f"‚úÖ S·ªê D∆Ø C√ì TH·ªÇ PH√ÇN B·ªî:   {self.format_currency(final_balance):>15}")
                print("\nüí° KHUY·∫æN NGH·ªä PH√ÇN B·ªî:")
                
                # G·ª£i √Ω ph√¢n b·ªï theo nguy√™n t·∫Øc 50-30-20
                emergency_fund = final_balance * 0.3
                investment = final_balance * 0.5
                extra_saving = final_balance * 0.2
                
                print(f"   üì¶ Qu·ªπ kh·∫©n c·∫•p (30%):    {self.format_currency(emergency_fund):>15}")
                print(f"   üìà ƒê·∫ßu t∆∞ (50%):          {self.format_currency(investment):>15}") 
                print(f"   üí∞ Ti·∫øt ki·ªám th√™m (20%):  {self.format_currency(extra_saving):>15}")
                
            elif final_balance == 0:
                print(f"‚öñÔ∏è  S·ªê D∆Ø CU·ªêI TH√ÅNG:       {self.format_currency(final_balance):>15}")
                print("\nüí° B·∫°n ƒë√£ c√¢n b·∫±ng thu chi t·ªët!")
            else:
                print(f"‚ùå TH√ÇM H·ª§T:               {self.format_currency(final_balance):>15}")
                print("\n‚ö†Ô∏è  C·∫¢NH B√ÅO: Chi ti√™u v∆∞·ª£t thu nh·∫≠p!")
                print("üí° Khuy·∫øn ngh·ªã:")
                print("   ‚Ä¢ Xem x√©t c·∫Øt gi·∫£m chi ti√™u kh√¥ng c·∫ßn thi·∫øt")
                print("   ‚Ä¢ T√¨m th√™m ngu·ªìn thu nh·∫≠p")
                print("   ‚Ä¢ Ho√£n c√°c kho·∫£n ƒë·∫ßu t∆∞/ti·∫øt ki·ªám")
    
    def show_loan_status(self, button):
        if not self.loan_data:
            with self.output:
                clear_output()
                print("‚ùå Ch∆∞a c√≥ d·ªØ li·ªáu kho·∫£n vay n√†o!")
            return
        
        with self.output:
            clear_output()
            print("="*70)
            print("üè¶ T√åNH TR·∫†NG C√ÅC KHO·∫¢N VAY")
            print(f"üí± Hi·ªÉn th·ªã b·∫±ng: {self.base_currency}")
            print("="*70)
            
            total_remaining = 0
            total_monthly_fixed = 0
            
            for i, loan in enumerate(self.loan_data, 1):
                loan_currency = loan.get('currency', 'VND')
                
                # Convert amounts to base currency for display
                total_converted = self.convert_to_base_currency(loan['total_amount'], loan_currency)
                paid_converted = self.convert_to_base_currency(loan['paid_amount'], loan_currency)
                remaining_converted = self.convert_to_base_currency(loan['remaining_amount'], loan_currency)
                monthly_converted = self.convert_to_base_currency(loan['monthly_payment'], loan_currency)
                
                print(f"\n{i}. {loan['description']} ({loan['type']})")
                print(f"   üí∞ Ti·ªÅn t·ªá g·ªëc:    {loan_currency}")
                print(f"   üìä T·ªïng n·ª£:        {self.format_currency(total_converted):>15}")
                print(f"   ‚úÖ ƒê√£ tr·∫£:        {self.format_currency(paid_converted):>15}")
                print(f"   ‚ùó C√≤n l·∫°i:       {self.format_currency(remaining_converted):>15}")
                
                if loan['remaining_amount'] > 0:
                    progress = (loan['paid_amount'] / loan['total_amount']) * 100
                    print(f"   üìà Ti·∫øn ƒë·ªô:       {progress:>15.1f}%")
                    
                    if loan['is_fixed']:
                        print(f"   üí∞ Tr·∫£/th√°ng:     {self.format_currency(monthly_converted):>15} (c·ªë ƒë·ªãnh)")
                        total_monthly_fixed += monthly_converted
                        
                        # ∆Ø·ªõc t√≠nh th·ªùi gian tr·∫£ h·∫øt
                        if loan['monthly_payment'] > 0:
                            months_left = loan['remaining_amount'] / loan['monthly_payment']
                            print(f"   ‚è∞ C√≤n ~{months_left:.1f} th√°ng ƒë·ªÉ tr·∫£ h·∫øt")
                    else:
                        print(f"   üí∞ Tr·∫£ linh ho·∫°t (g·ªôp ƒë·∫øn ƒë·ªß r·ªìi tr·∫£)")
                else:
                    print(f"   üéâ ƒê√É TR·∫¢ H·∫æT!")
                
                total_remaining += remaining_converted
                print("-" * 50)
            
            print(f"\nüìã T·ªîNG H·ª¢P:")
            print(f"   üí∏ T·ªïng n·ª£ c√≤n l·∫°i:       {self.format_currency(total_remaining):>15}")
            print(f"   üè¶ Ph·∫£i tr·∫£ c·ªë ƒë·ªãnh/th√°ng: {self.format_currency(total_monthly_fixed):>15}")
            
            # T√≠nh vay linh ho·∫°t
            flexible_loans = [loan for loan in self.loan_data 
                            if not loan['is_fixed'] and loan['remaining_amount'] > 0]
            if flexible_loans:
                total_flexible = sum(self.convert_to_base_currency(loan['remaining_amount'], loan.get('currency', 'VND')) 
                                   for loan in flexible_loans)
                print(f"   ü§ù N·ª£ linh ho·∫°t:          {self.format_currency(total_flexible):>15}")
    
    def show_summary(self, button):
        selected_month = self.month_filter.value
        
        income_filtered = self.filter_data_by_month(self.income_data, selected_month)
        expense_filtered = self.filter_data_by_month(self.expense_data, selected_month)
        
        total_income = sum(self.convert_to_base_currency(item['amount'], item['currency']) 
                          for item in income_filtered)
        total_expense = sum(self.convert_to_base_currency(item['amount'], item['currency']) 
                           for item in expense_filtered)
        basic_balance = total_income - total_expense
        
        fixed_loan, flexible_loan = self.calculate_monthly_loan_payments(selected_month)
        
        with self.output:
            clear_output()
            print("="*50)
            print(f"üìä B√ÅO C√ÅO T·ªîNG QUAN TH√ÅNG {selected_month}")
            print(f"üí± Hi·ªÉn th·ªã b·∫±ng: {self.base_currency}")
            print("="*50)
            print(f"üí∞ T·ªïng thu nh·∫≠p:    {self.format_currency(total_income)}")
            print(f"üí∏ T·ªïng chi ti√™u:    {self.format_currency(total_expense)}")
            print(f"üè¶ Tr·∫£ n·ª£ c·ªë ƒë·ªãnh:   {self.format_currency(fixed_loan)}")
            print(f"ü§ù Tr·∫£ n·ª£ linh ho·∫°t: {self.format_currency(flexible_loan)}")
            print("-"*30)
            
            net_balance = basic_balance - fixed_loan - flexible_loan
            if net_balance >= 0:
                print(f"‚úÖ S·ªë d∆∞ kh·∫£ d·ª•ng:   +{self.format_currency(net_balance)}")
            else:
                print(f"‚ùå Th√¢m h·ª•t:         {self.format_currency(net_balance)}")
            print("="*50)
            
            if expense_filtered:
                print("\nüìã CHI TI·∫æT CHI PH√ç THEO DANH M·ª§C:")
                
                # Group expenses by category and convert to base currency
                category_summary = {}
                for expense in expense_filtered:
                    converted_amount = self.convert_to_base_currency(expense['amount'], expense['currency'])
                    if expense['category'] in category_summary:
                        category_summary[expense['category']] += converted_amount
                    else:
                        category_summary[expense['category']] = converted_amount
                
                # Sort by amount descending
                sorted_categories = sorted(category_summary.items(), key=lambda x: x[1], reverse=True)
                
                for category, amount in sorted_categories:
                    percentage = (amount / total_expense) * 100 if total_expense > 0 else 0
                    print(f"  ‚Ä¢ {category}: {self.format_currency(amount)} ({percentage:.1f}%)")
    
    def show_charts(self, button):
        selected_month = self.month_filter.value
        
        income_filtered = self.filter_data_by_month(self.income_data, selected_month)
        expense_filtered = self.filter_data_by_month(self.expense_data, selected_month)
        savings_filtered = self.filter_data_by_month(self.savings_data, selected_month)
        
        if not income_filtered and not expense_filtered and not savings_filtered:
            with self.output:
                clear_output()
                print("‚ùå Kh√¥ng c√≥ d·ªØ li·ªáu ƒë·ªÉ hi·ªÉn th·ªã bi·ªÉu ƒë·ªì!")
            return
        
        with self.output:
            clear_output()
            
            # T·∫°o figure v·ªõi subplots
            fig, axes = plt.subplots(2, 3, figsize=(18, 12))
            fig.suptitle(f'B√°o C√°o T√†i Ch√≠nh Chi Ti·∫øt Th√°ng {selected_month} (T√≠nh b·∫±ng {self.base_currency})', 
                        fontsize=16, fontweight='bold')
            
            # 1. Bi·ªÉu ƒë·ªì d√≤ng ti·ªÅn t·ªïng quan
            total_income = sum(self.convert_to_base_currency(item['amount'], item['currency']) 
                              for item in income_filtered)
            total_expense = sum(self.convert_to_base_currency(item['amount'], item['currency']) 
                               for item in expense_filtered)
            total_savings = sum(self.convert_to_base_currency(item['amount'], item['currency']) 
                               for item in savings_filtered)
            fixed_loan, flexible_loan = self.calculate_monthly_loan_payments(selected_month)
            
            categories = ['Thu nh·∫≠p', 'Chi ti√™u', 'Tr·∫£ n·ª£\nc·ªë ƒë·ªãnh', 'Tr·∫£ n·ª£\nlinh ho·∫°t', 'Ti·∫øt ki·ªám\n& ƒêT']
            amounts = [total_income, -total_expense, -fixed_loan, -flexible_loan, -total_savings]
            colors = ['#28A745', '#DC3545', '#FF6B35', '#FFA500', '#6F42C1']
            
            bars = axes[0,0].bar(categories, amounts, color=colors)
            axes[0,0].set_title('D√≤ng Ti·ªÅn T·ªïng Quan')
            axes[0,0].set_ylabel(f'S·ªë ti·ªÅn ({self.base_currency})')
            axes[0,0].axhline(y=0, color='black', linestyle='-', alpha=0.3)
            
            # Th√™m gi√° tr·ªã l√™n c·ªôt
            for bar, amount in zip(bars, amounts):
                height = bar.get_height()
                axes[0,0].text(bar.get_x() + bar.get_width()/2., 
                             height + np.sign(height) * max(abs(a) for a in amounts) * 0.01,
                             f'{abs(amount):,.0f}', ha='center', va='bottom' if height >= 0 else 'top')
            
            # 2. Bi·ªÉu ƒë·ªì tr√≤n chi ph√≠ theo danh m·ª•c
            if expense_filtered:
                category_summary = {}
                for expense in expense_filtered:
                    converted_amount = self.convert_to_base_currency(expense['amount'], expense['currency'])
                    if expense['category'] in category_summary:
                        category_summary[expense['category']] += converted_amount
                    else:
                        category_summary[expense['category']] = converted_amount
                
                axes[0,1].pie(category_summary.values(), labels=category_summary.keys(), autopct='%1.1f%%')
                axes[0,1].set_title('Ph√¢n B·ªë Chi Ph√≠ Theo Danh M·ª•c')
            else:
                axes[0,1].text(0.5, 0.5, 'Kh√¥ng c√≥ d·ªØ li·ªáu chi ph√≠', ha='center', va='center')
                axes[0,1].set_title('Ph√¢n B·ªë Chi Ph√≠ Theo Danh M·ª•c')
            
            # 3. T√¨nh tr·∫°ng c√°c kho·∫£n vay
            if self.loan_data:
                loan_names = []
                remaining_amounts = []
                
                for loan in self.loan_data:
                    if loan['remaining_amount'] > 0:
                        loan_names.append(loan['description'][:20] + '...' if len(loan['description']) > 20 
                                        else loan['description'])
                        converted_remaining = self.convert_to_base_currency(loan['remaining_amount'], 
                                                                          loan.get('currency', 'VND'))
                        remaining_amounts.append(converted_remaining)
                
                if loan_names:
                    axes[0,2].barh(loan_names, remaining_amounts, color='#FF6B35')
                    axes[0,2].set_title('N·ª£ C√≤n L·∫°i Theo Kho·∫£n Vay')
                    axes[0,2].set_xlabel(f'S·ªë ti·ªÅn ({self.base_currency})')
                else:
                    axes[0,2].text(0.5, 0.5, 'ƒê√£ tr·∫£ h·∫øt n·ª£!', ha='center', va='center')
                    axes[0,2].set_title('N·ª£ C√≤n L·∫°i Theo Kho·∫£n Vay')
            else:
                axes[0,2].text(0.5, 0.5, 'Kh√¥ng c√≥ kho·∫£n vay', ha='center', va='center')
                axes[0,2].set_title('N·ª£ C√≤n L·∫°i Theo Kho·∫£n Vay')
            
            # 4. Chi ph√≠ theo ng√†y
            if expense_filtered:
                daily_expense = {}
                for expense in expense_filtered:
                    expense_date = expense['date']
                    converted_amount = self.convert_to_base_currency(expense['amount'], expense['currency'])
                    if expense_date in daily_expense:
                        daily_expense[expense_date] += converted_amount
                    else:
                        daily_expense[expense_date] = converted_amount
                
                dates = sorted(daily_expense.keys())
                amounts = [daily_expense[date] for date in dates]
                
                axes[1,0].plot(dates, amounts, marker='o', 
                             color='#DC3545', linewidth=2, markersize=6)
                axes[1,0].set_title('Chi Ph√≠ Theo Ng√†y')
                axes[1,0].set_ylabel(f'S·ªë ti·ªÅn ({self.base_currency})')
                axes[1,0].tick_params(axis='x', rotation=45)
            else:
                axes[1,0].text(0.5, 0.5, 'Kh√¥ng c√≥ d·ªØ li·ªáu chi ph√≠', ha='center', va='center')
                axes[1,0].set_title('Chi Ph√≠ Theo Ng√†y')
            
            # 5. Ti·∫øt ki·ªám & ƒê·∫ßu t∆∞ theo lo·∫°i
            if savings_filtered:
                savings_summary = {}
                for saving in savings_filtered:
                    converted_amount = self.convert_to_base_currency(saving['amount'], saving['currency'])
                    if saving['type'] in savings_summary:
                        savings_summary[saving['type']] += converted_amount
                    else:
                        savings_summary[saving['type']] = converted_amount
                
                savings_types = list(savings_summary.keys())
                savings_amounts = list(savings_summary.values())
                
                axes[1,1].barh(savings_types, savings_amounts, color='#6F42C1')
                axes[1,1].set_title('Ti·∫øt Ki·ªám & ƒê·∫ßu T∆∞ Theo Lo·∫°i')
                axes[1,1].set_xlabel(f'S·ªë ti·ªÅn ({self.base_currency})')
            else:
                axes[1,1].text(0.5, 0.5, 'Kh√¥ng c√≥ d·ªØ li·ªáu ti·∫øt ki·ªám', ha='center', va='center')
                axes[1,1].set_title('Ti·∫øt Ki·ªám & ƒê·∫ßu T∆∞ Theo Lo·∫°i')
            
            # 6. Bi·ªÉu ƒë·ªì waterfall - d√≤ng ti·ªÅn t√≠ch l≈©y
            waterfall_categories = ['Thu nh·∫≠p', 'Chi ti√™u', 'Tr·∫£ n·ª£', 'Ti·∫øt ki·ªám', 'S·ªë d∆∞']
            waterfall_values = [total_income, -total_expense, -(fixed_loan + flexible_loan), 
                              -total_savings, total_income - total_expense - fixed_loan - flexible_loan - total_savings]
            
            # T√≠nh gi√° tr·ªã t√≠ch l≈©y
            cumulative = [0]
            for i, val in enumerate(waterfall_values[:-1]):
                cumulative.append(cumulative[-1] + val)
            
            # V·∫Ω waterfall
            for i in range(len(waterfall_categories)-1):
                if waterfall_values[i] > 0:
                    axes[1,2].bar(i, waterfall_values[i], bottom=cumulative[i], color='#28A745', alpha=0.7)
                else:
                    axes[1,2].bar(i, abs(waterfall_values[i]), bottom=cumulative[i+1], color='#DC3545', alpha=0.7)
            
            # V·∫Ω c·ªôt cu·ªëi (s·ªë d∆∞)
            final_color = '#28A745' if waterfall_values[-1] >= 0 else '#DC3545'
            axes[1,2].bar(len(waterfall_categories)-1, abs(waterfall_values[-1]), color=final_color, alpha=0.7)
            
            axes[1,2].set_title('Waterfall - D√≤ng Ti·ªÅn T√≠ch L≈©y')
            axes[1,2].set_xticks(range(len(waterfall_categories)))
            axes[1,2].set_xticklabels(waterfall_categories, rotation=45)
            axes[1,2].axhline(y=0, color='black', linestyle='-', alpha=0.3)
            
            plt.tight_layout()
            plt.show()
    
    def export_to_excel(self, button):
        if not any([self.income_data, self.expense_data, self.loan_data, self.savings_data]):
            with self.output:
                clear_output()
                print("‚ùå Kh√¥ng c√≥ d·ªØ li·ªáu ƒë·ªÉ xu·∫•t!")
            return
        
        try:
            filename = f'BaoCaoThuChi_ChiTiet_{datetime.now().strftime("%Y%m%d_%H%M%S")}.xlsx'
            with pd.ExcelWriter(filename, engine='openpyxl') as writer:
                # Sheet thu nh·∫≠p
                if self.income_data:
                    income_df = pd.DataFrame(self.income_data)
                    # Add converted amounts
                    income_df['amount_base_currency'] = income_df.apply(
                        lambda row: self.convert_to_base_currency(row['amount'], row['currency']), axis=1
                    )
                    income_df['base_currency'] = self.base_currency
                    income_df.to_excel(writer, sheet_name='Thu Nh·∫≠p', index=False)
                
                # Sheet chi ph√≠
                if self.expense_data:
                    expense_df = pd.DataFrame(self.expense_data)
                    expense_df['amount_base_currency'] = expense_df.apply(
                        lambda row: self.convert_to_base_currency(row['amount'], row['currency']), axis=1
                    )
                    expense_df['base_currency'] = self.base_currency
                    expense_df.to_excel(writer, sheet_name='Chi Ph√≠', index=False)
                
                # Sheet vay n·ª£
                if self.loan_data:
                    loan_df = pd.DataFrame([
                        {
                            'Lo·∫°i vay': loan['type'],
                            'M√¥ t·∫£': loan['description'],
                            'T·ªïng n·ª£': loan['total_amount'],
                            'ƒê√£ tr·∫£': loan['paid_amount'],
                            'C√≤n l·∫°i': loan['remaining_amount'],
                            'Ti·ªÅn t·ªá': loan.get('currency', 'VND'),
                            'T·ªïng n·ª£ (base)': self.convert_to_base_currency(loan['total_amount'], loan.get('currency', 'VND')),
                            'ƒê√£ tr·∫£ (base)': self.convert_to_base_currency(loan['paid_amount'], loan.get('currency', 'VND')),
                            'C√≤n l·∫°i (base)': self.convert_to_base_currency(loan['remaining_amount'], loan.get('currency', 'VND')),
                            'Ti·ªÅn t·ªá b√°o c√°o': self.base_currency,
                            'Tr·∫£ h√†ng th√°ng': loan['monthly_payment'],
                            'Lo·∫°i thanh to√°n': 'C·ªë ƒë·ªãnh' if loan['is_fixed'] else 'Linh ho·∫°t',
                            'Ng√†y t·∫°o': loan['created_date'],
                            'C·∫≠p nh·∫≠t l·∫ßn cu·ªëi': loan['last_updated']
                        } for loan in self.loan_data
                    ])
                    loan_df.to_excel(writer, sheet_name='Vay N·ª£', index=False)
                
                # Sheet ti·∫øt ki·ªám
                if self.savings_data:
                    savings_df = pd.DataFrame(self.savings_data)
                    savings_df['amount_base_currency'] = savings_df.apply(
                        lambda row: self.convert_to_base_currency(row['amount'], row['currency']), axis=1
                    )
                    savings_df['base_currency'] = self.base_currency
                    savings_df.to_excel(writer, sheet_name='Ti·∫øt Ki·ªám & ƒê·∫ßu T∆∞', index=False)
                
                # Sheet t·ªïng h·ª£p theo th√°ng
                summary_data = []
                for month_option in self.get_month_options():
                    month_name, month_value = month_option
                    income_filtered = self.filter_data_by_month(self.income_data, month_value)
                    expense_filtered = self.filter_data_by_month(self.expense_data, month_value)
                    savings_filtered = self.filter_data_by_month(self.savings_data, month_value)
                    
                    total_income = sum(self.convert_to_base_currency(item['amount'], item['currency']) 
                                      for item in income_filtered)
                    total_expense = sum(self.convert_to_base_currency(item['amount'], item['currency']) 
                                       for item in expense_filtered)
                    total_savings = sum(self.convert_to_base_currency(item['amount'], item['currency']) 
                                       for item in savings_filtered)
                    fixed_loan, flexible_loan = self.calculate_monthly_loan_payments(month_value)
                    
                    if any([total_income, total_expense, total_savings, fixed_loan, flexible_loan]):
                        net_balance = total_income - total_expense - fixed_loan - flexible_loan - total_savings
                        summary_data.append({
                            'Th√°ng': month_name,
                            'Thu nh·∫≠p': total_income,
                            'Chi ti√™u': total_expense,
                            'Tr·∫£ n·ª£ c·ªë ƒë·ªãnh': fixed_loan,
                            'Tr·∫£ n·ª£ linh ho·∫°t': flexible_loan,
                            'Ti·∫øt ki·ªám & ƒêT': total_savings,
                            'S·ªë d∆∞ cu·ªëi': net_balance,
                            'Ti·ªÅn t·ªá': self.base_currency,
                            'T·ª∑ gi√° (1 KRW)': self.exchange_rate
                        })
                
                if summary_data:
                    summary_df = pd.DataFrame(summary_data)
                    summary_df.to_excel(writer, sheet_name='T·ªïng H·ª£p Theo Th√°ng', index=False)
                
                # Sheet ph√¢n t√≠ch ƒë·∫ßu t∆∞
                if self.savings_data:
                    investment_analysis = []
                    investment_summary = {}
                    
                    for saving in self.savings_data:
                        key = f"{saving['type']} - {saving['description']}"
                        converted_amount = self.convert_to_base_currency(saving['amount'], saving['currency'])
                        
                        if key in investment_summary:
                            investment_summary[key]['total'] += converted_amount
                            investment_summary[key]['count'] += 1
                        else:
                            investment_summary[key] = {
                                'type': saving['type'],
                                'description': saving['description'],
                                'total': converted_amount,
                                'count': 1
                            }
                    
                    for key, data in investment_summary.items():
                        investment_analysis.append({
                            'Lo·∫°i ƒë·∫ßu t∆∞': data['type'],
                            'M√¥ t·∫£': data['description'],
                            'T·ªïng gi√° tr·ªã': data['total'],
                            'S·ªë giao d·ªãch': data['count'],
                            'Trung b√¨nh/giao d·ªãch': data['total'] / data['count'],
                            'Ti·ªÅn t·ªá': self.base_currency
                        })
                    
                    if investment_analysis:
                        investment_df = pd.DataFrame(investment_analysis)
                        investment_df = investment_df.sort_values('T·ªïng gi√° tr·ªã', ascending=False)
                        investment_df.to_excel(writer, sheet_name='Ph√¢n T√≠ch ƒê·∫ßu T∆∞', index=False)
            
            with self.output:
                clear_output()
                print(f"‚úÖ ƒê√£ xu·∫•t b√°o c√°o chi ti·∫øt ra file: {filename}")
                print("üìä File bao g·ªìm c√°c sheet:")
                print("   ‚Ä¢ Thu Nh·∫≠p (c√≥ chuy·ªÉn ƒë·ªïi ti·ªÅn t·ªá)")
                print("   ‚Ä¢ Chi Ph√≠ (c√≥ chuy·ªÉn ƒë·ªïi ti·ªÅn t·ªá)") 
                print("   ‚Ä¢ Vay N·ª£ (c√≥ chuy·ªÉn ƒë·ªïi ti·ªÅn t·ªá)")
                print("   ‚Ä¢ Ti·∫øt Ki·ªám & ƒê·∫ßu T∆∞ (c√≥ chuy·ªÉn ƒë·ªïi ti·ªÅn t·ªá)")
                print("   ‚Ä¢ T·ªïng H·ª£p Theo Th√°ng")
                print("   ‚Ä¢ Ph√¢n T√≠ch ƒê·∫ßu T∆∞")
                print(f"üí± T·ª∑ gi√° s·ª≠ d·ª•ng: 1 KRW = {self.exchange_rate:,.2f} VND")
                print(f"üìä Ti·ªÅn t·ªá b√°o c√°o: {self.base_currency}")
                
        except Exception as e:
            with self.output:
                clear_output()
                print(f"‚ùå L·ªói khi xu·∫•t file: {str(e)}")
    
    def save_data_silent(self):
        """L∆∞u d·ªØ li·ªáu t·ª± ƒë·ªông m√† kh√¥ng hi·ªÉn th·ªã th√¥ng b√°o"""
        try:
            self.save_data_to_files()
            self.save_settings()  # L∆∞u c·∫£ settings
        except Exception as e:
            print(f"L·ªói khi l∆∞u d·ªØ li·ªáu: {str(e)}")
    
    def save_data(self, button):
        """L∆∞u d·ªØ li·ªáu th·ªß c√¥ng v·ªõi th√¥ng b√°o"""
        try:
            self.save_data_to_files()
            self.save_settings()
            with self.output:
                clear_output()
                print("‚úÖ ƒê√£ l∆∞u t·∫•t c·∫£ d·ªØ li·ªáu v√†o file CSV!")
                print("üìÅ C√°c file ƒë∆∞·ª£c t·∫°o:")
                for data_type, filename in self.data_files.items():
                    print(f"   ‚Ä¢ {filename}")
        except Exception as e:
            with self.output:
                clear_output()
                print(f"‚ùå L·ªói khi l∆∞u d·ªØ li·ªáu: {str(e)}")
    
    def save_data_to_files(self):
        """L∆∞u d·ªØ li·ªáu v√†o c√°c file CSV"""
        # L∆∞u thu nh·∫≠p
        if self.income_data:
            df = pd.DataFrame(self.income_data)
            df['date'] = df['date'].astype(str)  # Convert date to string for CSV
            df.to_csv(self.data_files['income'], index=False, encoding='utf-8-sig')
        
        # L∆∞u chi ph√≠
        if self.expense_data:
            df = pd.DataFrame(self.expense_data)
            df['date'] = df['date'].astype(str)
            df.to_csv(self.data_files['expense'], index=False, encoding='utf-8-sig')
        
        # L∆∞u vay n·ª£ (ph·ª©c t·∫°p h∆°n v√¨ c√≥ nested data)
        if self.loan_data:
            loan_rows = []
            for loan in self.loan_data:
                base_row = {
                    'type': loan['type'],
                    'description': loan['description'],
                    'total_amount': loan['total_amount'],
                    'monthly_payment': loan['monthly_payment'],
                    'paid_amount': loan['paid_amount'],
                    'remaining_amount': loan['remaining_amount'],
                    'currency': loan.get('currency', 'VND'),
                    'is_fixed': loan['is_fixed'],
                    'created_date': str(loan['created_date']),
                    'last_updated': str(loan['last_updated'])
                }
                
                # L∆∞u l·ªãch s·ª≠ thanh to√°n nh∆∞ JSON string
                if loan['payment_history']:
                    base_row['payment_history'] = str(loan['payment_history'])
                else:
                    base_row['payment_history'] = '[]'
                
                loan_rows.append(base_row)
            
            df = pd.DataFrame(loan_rows)
            df.to_csv(self.data_files['loan'], index=False, encoding='utf-8-sig')
        
        # L∆∞u ti·∫øt ki·ªám
        if self.savings_data:
            df = pd.DataFrame(self.savings_data)
            df['date'] = df['date'].astype(str)
            df.to_csv(self.data_files['savings'], index=False, encoding='utf-8-sig')
    
    def load_data(self):
        """T·∫£i d·ªØ li·ªáu t·ª´ file khi kh·ªüi ƒë·ªông"""
        try:
            # Load settings first
            self.load_settings()
            
            # T·∫£i thu nh·∫≠p
            try:
                df = pd.read_csv(self.data_files['income'], encoding='utf-8-sig')
                self.income_data = []
                for _, row in df.iterrows():
                    self.income_data.append({
                        'date': pd.to_datetime(row['date']).date(),
                        'source': row['source'],
                        'amount': float(row['amount']),
                        'currency': row.get('currency', 'VND')
                    })
                print(f"‚úÖ ƒê√£ load {len(self.income_data)} b·∫£n ghi thu nh·∫≠p")
            except FileNotFoundError:
                print("üìù Ch∆∞a c√≥ file d·ªØ li·ªáu thu nh·∫≠p")
            except Exception as e:
                print(f"‚ö†Ô∏è  L·ªói khi load thu nh·∫≠p: {str(e)}")
            
            # T·∫£i chi ph√≠
            try:
                df = pd.read_csv(self.data_files['expense'], encoding='utf-8-sig')
                self.expense_data = []
                for _, row in df.iterrows():
                    self.expense_data.append({
                        'date': pd.to_datetime(row['date']).date(),
                        'category': row['category'],
                        'description': row['description'],
                        'amount': float(row['amount']),
                        'currency': row.get('currency', 'VND')
                    })
                print(f"‚úÖ ƒê√£ load {len(self.expense_data)} b·∫£n ghi chi ph√≠")
            except FileNotFoundError:
                print("üìù Ch∆∞a c√≥ file d·ªØ li·ªáu chi ph√≠")
            except Exception as e:
                print(f"‚ö†Ô∏è  L·ªói khi load chi ph√≠: {str(e)}")
            
            # T·∫£i vay n·ª£
            try:
                df = pd.read_csv(self.data_files['loan'], encoding='utf-8-sig')
                self.loan_data = []
                for _, row in df.iterrows():
                    # Parse payment history t·ª´ string
                    try:
                        payment_history = eval(row['payment_history']) if row['payment_history'] != '[]' else []
                        # Convert date strings back to date objects trong payment history
                        for payment in payment_history:
                            if 'date' in payment and isinstance(payment['date'], str):
                                payment['date'] = pd.to_datetime(payment['date']).date()
                    except:
                        payment_history = []
                    
                    self.loan_data.append({
                        'type': row['type'],
                        'description': row['description'],
                        'total_amount': float(row['total_amount']),
                        'monthly_payment': float(row['monthly_payment']),
                        'paid_amount': float(row['paid_amount']),
                        'remaining_amount': float(row['remaining_amount']),
                        'currency': row.get('currency', 'VND'),
                        'is_fixed': bool(row['is_fixed']),
                        'created_date': pd.to_datetime(row['created_date']).date(),
                        'last_updated': pd.to_datetime(row['last_updated']).date(),
                        'payment_history': payment_history
                    })
                print(f"‚úÖ ƒê√£ load {len(self.loan_data)} kho·∫£n vay")
            except FileNotFoundError:
                print("üìù Ch∆∞a c√≥ file d·ªØ li·ªáu vay n·ª£")
            except Exception as e:
                print(f"‚ö†Ô∏è  L·ªói khi load vay n·ª£: {str(e)}")
            
            # T·∫£i ti·∫øt ki·ªám
            try:
                df = pd.read_csv(self.data_files['savings'], encoding='utf-8-sig')
                self.savings_data = []
                for _, row in df.iterrows():
                    self.savings_data.append({
                        'date': pd.to_datetime(row['date']).date(),
                        'type': row['type'],
                        'description': row['description'],
                        'amount': float(row['amount']),
                        'currency': row.get('currency', 'VND')
                    })
                print(f"‚úÖ ƒê√£ load {len(self.savings_data)} b·∫£n ghi ti·∫øt ki·ªám/ƒë·∫ßu t∆∞")
            except FileNotFoundError:
                print("üìù Ch∆∞a c√≥ file d·ªØ li·ªáu ti·∫øt ki·ªám")
            except Exception as e:
                print(f"‚ö†Ô∏è  L·ªói khi load ti·∫øt ki·ªám: {str(e)}")
                
        except Exception as e:
            print(f"‚ùå L·ªói t·ªïng qu√°t khi t·∫£i d·ªØ li·ªáu: {str(e)}")
    
    def load_data_manual(self, button):
        """T·∫£i l·∫°i d·ªØ li·ªáu th·ªß c√¥ng"""
        try:
            self.load_data()
            # C·∫≠p nh·∫≠t dropdown sau khi load
            self.update_loan_dropdown()
            self.update_savings_dropdown()
            
            with self.output:
                clear_output()
                print("‚úÖ ƒê√£ t·∫£i l·∫°i d·ªØ li·ªáu t·ª´ file CSV!")
                print(f"üìä Thu nh·∫≠p: {len(self.income_data)} b·∫£n ghi")
                print(f"üìä Chi ph√≠: {len(self.expense_data)} b·∫£n ghi")
                print(f"üìä Vay n·ª£: {len(self.loan_data)} b·∫£n ghi")
                print(f"üìä Ti·∫øt ki·ªám: {len(self.savings_data)} b·∫£n ghi")
                print(f"üí± T·ª∑ gi√°: 1 KRW = {self.exchange_rate:,.2f} VND")
                print(f"üìä Ti·ªÅn t·ªá b√°o c√°o: {self.base_currency}")
                print("üîÑ ƒê√£ c·∫≠p nh·∫≠t dropdown danh s√°ch")
        except Exception as e:
            with self.output:
                clear_output()
                print(f"‚ùå L·ªói khi t·∫£i d·ªØ li·ªáu: {str(e)}")
    
    def clear_all_data(self, button):
        """X√≥a to√†n b·ªô d·ªØ li·ªáu"""
        import os
        
        try:
            # X√≥a d·ªØ li·ªáu trong b·ªô nh·ªõ
            self.income_data = []
            self.expense_data = []
            self.loan_data = []
            self.savings_data = []
            
            # Reset settings
            self.exchange_rate = 1.0
            self.base_currency = 'VND'
            self.exchange_rate_input.value = 1.0
            self.base_currency_dropdown.value = 'VND'
            
            # C·∫≠p nh·∫≠t dropdown
            self.update_loan_dropdown()
            self.update_savings_dropdown()
            
            # X√≥a file CSV
            for filename in self.data_files.values():
                if os.path.exists(filename):
                    os.remove(filename)
            
            with self.output:
                clear_output()
                print("‚ö†Ô∏è  ƒê√£ x√≥a to√†n b·ªô d·ªØ li·ªáu v√† file CSV!")
                print("üìù B·∫°n c√≥ th·ªÉ b·∫Øt ƒë·∫ßu nh·∫≠p d·ªØ li·ªáu m·ªõi.")
                print("üîÑ ƒê√£ reset t·∫•t c·∫£ dropdown v√† c√†i ƒë·∫∑t")
                print("üí± T·ª∑ gi√° ƒë√£ reset v·ªÅ: 1 KRW = 1 VND")
                print("üìä Ti·ªÅn t·ªá b√°o c√°o ƒë√£ reset v·ªÅ: VND")
        except Exception as e:
            with self.output:
                clear_output()
                print(f"‚ùå L·ªói khi x√≥a d·ªØ li·ªáu: {str(e)}")
    
    def display(self):
        return self.main_layout

# T·∫°o v√† hi·ªÉn th·ªã ·ª©ng d·ª•ng
def create_finance_tracker():
    """
    H√†m kh·ªüi t·∫°o ·ª©ng d·ª•ng gi√°m s√°t thu chi v·ªõi qu·∫£n l√Ω vay n·ª£, ph√¢n b·ªï ti·∫øt ki·ªám v√† h·ªó tr·ª£ ƒëa ti·ªÅn t·ªá
    
    T√≠nh nƒÉng m·ªõi:
    - H·ªó tr·ª£ ƒëa ti·ªÅn t·ªá (VND/KRW) v·ªõi t·ª∑ gi√° t√πy ch·ªânh
    - Ph√¢n t√≠ch ƒë·∫ßu t∆∞ chi ti·∫øt v·ªõi bi·ªÉu ƒë·ªì
    - T√≠nh t·ªïng t√†i s·∫£n hi·ªán t·∫°i quy ƒë·ªïi
    - Xu·∫•t b√°o c√°o Excel v·ªõi chuy·ªÉn ƒë·ªïi ti·ªÅn t·ªá
    """
    tracker = MonthlyFinanceTracker()
    return tracker.display()

# Ch·∫°y ·ª©ng d·ª•ng
finance_app = create_finance_tracker()
display(finance_app)
