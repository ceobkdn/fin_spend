import pandas as pd
import matplotlib.pyplot as plt
import seaborn as sns
import numpy as np
from datetime import datetime, date, timedelta
import ipywidgets as widgets
from IPython.display import display, clear_output
import warnings
import os

warnings.filterwarnings('ignore')

# Thi·∫øt l·∫≠p style
plt.style.use('default')
sns.set_palette("husl")
plt.rcParams['font.size'] = 10
plt.rcParams['figure.figsize'] = (12, 8)

class InvestmentPortfolioAnalyzer:
    def __init__(self):
        # Kh·ªüi t·∫°o d·ªØ li·ªáu
        self.investment_data = []
        self.current_prices = {}
        self.target_allocation = {}
        self.exchange_rate = 18.0  # KRW to VND

        # Mapping t·ª´ savings type sang investment category
        self.investment_mapping = {
            'ƒê·∫ßu t∆∞ ch·ª©ng kho√°n': 'C·ªï phi·∫øu',
            'Qu·ªπ ƒë·∫ßu t∆∞': 'Qu·ªπ c√¢n b·∫±ng',
            'Qu·ªπ c√¢n b·∫±ng': 'Qu·ªπ c√¢n b·∫±ng',
            'Qu·ªπ ƒë·∫ßu t∆∞ c√¢n b·∫±ng': 'Qu·ªπ c√¢n b·∫±ng',
            'Qu·ªπ tr√°i phi·∫øu': 'Qu·ªπ tr√°i phi·∫øu',
            'Qu·ªπ ƒë·∫ßu t∆∞ tr√°i phi·∫øu': 'Qu·ªπ tr√°i phi·∫øu',
            'Qu·ªπ c·ªï phi·∫øu': 'Qu·ªπ c·ªï phi·∫øu',
            'Qu·ªπ ƒë·∫ßu t∆∞ c·ªï phi·∫øu': 'Qu·ªπ c·ªï phi·∫øu',
            'Ti·∫øt ki·ªám ng√¢n h√†ng': 'Ti·ªÅn g·ª≠i',
            'V√†ng': 'V√†ng',
            'B·∫•t ƒë·ªông s·∫£n': 'B·∫•t ƒë·ªông s·∫£n',
            'Crypto': 'Crypto',
            'Kh√°c': 'Kh√°c'
        }

        # C·∫≠p nh·∫≠t r·ªßi ro v√† l·ª£i nhu·∫≠n theo lo·∫°i qu·ªπ
        self.asset_risk_levels = {
            'Ti·ªÅn g·ª≠i': {'risk': 1, 'expected_return': 6.0, 'volatility': 0.5},
            'Qu·ªπ tr√°i phi·∫øu': {'risk': 2, 'expected_return': 8.0, 'volatility': 3.0},
            'V√†ng': {'risk': 2, 'expected_return': 7.5, 'volatility': 12.0},
            'Qu·ªπ c√¢n b·∫±ng': {'risk': 3, 'expected_return': 10.0, 'volatility': 8.0},
            'B·∫•t ƒë·ªông s·∫£n': {'risk': 3, 'expected_return': 12.0, 'volatility': 15.0},
            'Qu·ªπ c·ªï phi·∫øu': {'risk': 4, 'expected_return': 15.0, 'volatility': 18.0},
            'C·ªï phi·∫øu': {'risk': 4, 'expected_return': 16.0, 'volatility': 20.0},
            'Crypto': {'risk': 5, 'expected_return': 25.0, 'volatility': 35.0},
            'Kh√°c': {'risk': 3, 'expected_return': 10.0, 'volatility': 10.0}
        }

        # File paths
        self.data_files = {
            'savings': 'finance_data_savings.csv',
            'investment_prices': 'investment_current_prices.csv',
            'target_allocation': 'target_allocation.csv',
            'settings': 'investment_settings.csv'
        }

        # T·∫°o widgets
        self.create_widgets()

        # Load data
        self.load_data()

        # Create layout
        self.create_layout()

    def create_widgets(self):
        # Header
        self.title = widgets.HTML(
            value="<h2 style='text-align: center; color: #2E86AB;'>üìà PH√ÇN T√çCH DANH M·ª§C ƒê·∫¶U T∆Ø - PHI√äN B·∫¢N QU·ª∏ N√ÇNG CAO</h2>"
        )

        # Settings Section
        self.settings_header = widgets.HTML(
            value="<h3 style='color: #17A2B8;'>‚öôÔ∏è C√ÄI ƒê·∫∂T</h3>"
        )
        self.exchange_rate_input = widgets.FloatText(
            value=18.0,
            description="T·ª∑ gi√° (1 KRW =):",
            style={'description_width': 'initial'},
            layout={'width': '200px'}
        )
        self.exchange_rate_unit = widgets.HTML(value="<span style='margin-left: 5px;'>VND</span>")
        self.update_exchange_btn = widgets.Button(
            description="C·∫≠p nh·∫≠t T·ª∑ gi√°",
            button_style='info',
            icon='refresh'
        )

        self.currency_display = widgets.Dropdown(
            options=[('VND', 'VND'), ('KRW', 'KRW')],
            value='VND',
            description="Hi·ªÉn th·ªã:",
            style={'description_width': 'initial'}
        )

        # Data Import Section
        self.import_header = widgets.HTML(
            value="<h3 style='color: #28A745;'>üìÇ IMPORT D·ªÆ LI·ªÜU</h3>"
        )
        self.import_file_path = widgets.Text(
            value='finance_data_savings.csv',
            placeholder='Nh·∫≠p ƒë∆∞·ªùng d·∫´n file CSV...',
            description="File CSV:",
            style={'description_width': 'initial'},
            layout={'width': '400px'}
        )
        self.import_data_btn = widgets.Button(
            description="Import D·ªØ li·ªáu ƒê·∫ßu t∆∞",
            button_style='success',
            icon='upload'
        )

        # Current Price Management
        self.price_header = widgets.HTML(
            value="<h3 style='color: #FF6B35;'>üí∞ C·∫¨P NH·∫¨T GI√Å HI·ªÜN T·∫†I</h3>"
        )
        self.asset_dropdown = widgets.Dropdown(
            options=[('-- Ch·ªçn t√†i s·∫£n --', '')],
            description="T√†i s·∫£n:",
            style={'description_width': 'initial'},
            layout={'width': '300px'}
        )
        self.current_price_input = widgets.FloatText(
            value=0.0,
            description="Gi√° hi·ªán t·∫°i:",
            style={'description_width': 'initial'}
        )
        self.price_currency = widgets.Dropdown(
            options=[('VND', 'VND'), ('KRW', 'KRW')],
            value='VND',
            description="ƒê∆°n v·ªã:",
            style={'description_width': 'initial'}
        )
        self.price_date = widgets.DatePicker(
            description="Ng√†y:",
            value=date.today(),
            style={'description_width': 'initial'}
        )
        self.update_price_btn = widgets.Button(
            description="C·∫≠p nh·∫≠t Gi√°",
            button_style='warning',
            icon='edit'
        )

        # Target Allocation Management
        self.allocation_header = widgets.HTML(
            value="<h3 style='color: #6F42C1;'>üéØ PH√ÇN B·ªî M·ª§C TI√äU</h3>"
        )
        self.allocation_type = widgets.Dropdown(
            options=[
                'C·ªï phi·∫øu',
                'Qu·ªπ c·ªï phi·∫øu',
                'Qu·ªπ c√¢n b·∫±ng',
                'Qu·ªπ tr√°i phi·∫øu',
                'Ti·ªÅn g·ª≠i',
                'V√†ng',
                'B·∫•t ƒë·ªông s·∫£n',
                'Crypto',
                'Kh√°c'
            ],
            description="Lo·∫°i t√†i s·∫£n:",
            style={'description_width': 'initial'}
        )
        self.target_percent = widgets.FloatText(
            value=0.0,
            description="T·ª∑ l·ªá m·ª•c ti√™u (%):",
            style={'description_width': 'initial'}
        )
        self.set_allocation_btn = widgets.Button(
            description="Thi·∫øt l·∫≠p T·ª∑ l·ªá",
            button_style='info',
            icon='target'
        )
        self.clear_allocation_btn = widgets.Button(
            description="X√≥a T·∫•t c·∫£",
            button_style='danger',
            icon='trash'
        )

        # Analysis Buttons
        self.analysis_header = widgets.HTML(
            value="<h3 style='color: #DC3545;'>üìä PH√ÇN T√çCH DANH M·ª§C</h3>"
        )
        self.show_portfolio_overview_btn = widgets.Button(
            description="T·ªïng quan Danh m·ª•c",
            button_style='info',
            icon='chart-pie'
        )
        self.show_performance_btn = widgets.Button(
            description="Hi·ªáu su·∫•t ƒê·∫ßu t∆∞",
            button_style='success',
            icon='chart-line'
        )
        self.show_allocation_analysis_btn = widgets.Button(
            description="Ph√¢n t√≠ch Ph√¢n b·ªï",
            button_style='warning',
            icon='balance-scale'
        )
        self.show_rebalance_recommendation_btn = widgets.Button(
            description="Khuy·∫øn ngh·ªã C√¢n b·∫±ng",
            button_style='primary',
            icon='sync-alt'
        )
        self.show_risk_analysis_btn = widgets.Button(
            description="Ph√¢n t√≠ch R·ªßi ro",
            button_style='danger',
            icon='exclamation-triangle'
        )

        self.show_fund_analysis_btn = widgets.Button(
            description="Ph√¢n t√≠ch Qu·ªπ ƒê·∫ßu t∆∞",
            button_style='info',
            icon='chart-bar',
            tooltip="Ph√¢n t√≠ch chi ti·∫øt 3 lo·∫°i qu·ªπ: Tr√°i phi·∫øu, C√¢n b·∫±ng, C·ªï phi·∫øu"
        )

        # Advanced Analysis
        self.advanced_header = widgets.HTML(
            value="<h3 style='color: #17A2B8;'>üî¨ PH√ÇN T√çCH N√ÇNG CAO</h3>"
        )
        self.time_period = widgets.Dropdown(
            options=[('3 th√°ng', 90), ('6 th√°ng', 180), ('1 nƒÉm', 365), ('2 nƒÉm', 730)],
            value=365,
            description="Th·ªùi gian:",
            style={'description_width': 'initial'}
        )
        self.show_trend_analysis_btn = widgets.Button(
            description="Xu h∆∞·ªõng ƒê·∫ßu t∆∞",
            button_style='info',
            icon='chart-area'
        )
        self.show_diversification_btn = widgets.Button(
            description="ƒêa d·∫°ng h√≥a",
            button_style='success',
            icon='sitemap'
        )
        self.export_report_btn = widgets.Button(
            description="Xu·∫•t B√°o c√°o",
            button_style='',
            icon='file-export'
        )

        # Data Management
        self.data_mgmt_header = widgets.HTML(
            value="<h3 style='color: #6C757D;'>üíæ QU·∫¢N L√ù D·ªÆ LI·ªÜU</h3>"
        )
        self.save_all_btn = widgets.Button(
            description="L∆∞u T·∫•t c·∫£",
            button_style='success',
            icon='save'
        )
        self.load_all_btn = widgets.Button(
            description="T·∫£i D·ªØ li·ªáu",
            button_style='info',
            icon='folder-open'
        )
        self.clear_all_btn = widgets.Button(
            description="X√≥a T·∫•t c·∫£",
            button_style='danger',
            icon='trash-alt'
        )

        # Output
        self.output = widgets.Output()

        # Bind events
        self.update_exchange_btn.on_click(self.update_exchange_rate)
        self.import_data_btn.on_click(self.import_investment_data)
        self.update_price_btn.on_click(self.update_current_price)
        self.set_allocation_btn.on_click(self.set_target_allocation)
        self.clear_allocation_btn.on_click(self.clear_target_allocation)

        # Analysis events
        self.show_portfolio_overview_btn.on_click(self.show_portfolio_overview)
        self.show_performance_btn.on_click(self.show_performance_analysis)
        self.show_allocation_analysis_btn.on_click(self.show_allocation_analysis)
        self.show_rebalance_recommendation_btn.on_click(self.show_rebalance_recommendation)
        self.show_risk_analysis_btn.on_click(self.show_risk_analysis)
        self.show_fund_analysis_btn.on_click(self.show_fund_analysis)

        # Advanced analysis events
        self.show_trend_analysis_btn.on_click(self.show_trend_analysis)
        self.show_diversification_btn.on_click(self.show_diversification_analysis)
        self.export_report_btn.on_click(self.export_investment_report)

        # Data management events
        self.save_all_btn.on_click(self.save_all_data)
        self.load_all_btn.on_click(self.load_all_data)
        self.clear_all_btn.on_click(self.clear_all_data)

    def create_layout(self):
        # Settings tab
        settings_tab = widgets.VBox([
            self.settings_header,
            widgets.HBox([self.exchange_rate_input, self.exchange_rate_unit, self.update_exchange_btn]),
            widgets.HBox([self.currency_display]),
            self.import_header,
            widgets.HBox([self.import_file_path, self.import_data_btn]),
            self.price_header,
            widgets.HBox([self.asset_dropdown, self.current_price_input]),
            widgets.HBox([self.price_currency, self.price_date, self.update_price_btn]),
            self.allocation_header,
            widgets.HBox([self.allocation_type, self.target_percent]),
            widgets.HBox([self.set_allocation_btn, self.clear_allocation_btn])
        ])

        # Analysis tab
        analysis_tab = widgets.VBox([
            self.analysis_header,
            widgets.HBox([self.show_portfolio_overview_btn, self.show_performance_btn]),
            widgets.HBox([self.show_allocation_analysis_btn, self.show_rebalance_recommendation_btn]),
            widgets.HBox([self.show_risk_analysis_btn, self.show_fund_analysis_btn]),
            self.advanced_header,
            widgets.HBox([self.time_period, self.show_trend_analysis_btn]),
            widgets.HBox([self.show_diversification_btn, self.export_report_btn]),
            self.data_mgmt_header,
            widgets.HBox([self.save_all_btn, self.load_all_btn, self.clear_all_btn])
        ])

        # Create tabs
        tabs = widgets.Tab()
        tabs.children = [settings_tab, analysis_tab]
        tabs.titles = ['C√†i ƒë·∫∑t & D·ªØ li·ªáu', 'Ph√¢n t√≠ch Danh m·ª•c']

        self.main_layout = widgets.VBox([
            self.title,
            tabs,
            self.output
        ])

    def update_exchange_rate(self, button):
        """C·∫≠p nh·∫≠t t·ª∑ gi√°"""
        if self.exchange_rate_input.value <= 0:
            with self.output:
                clear_output()
                print("‚ùå T·ª∑ gi√° ph·∫£i l·ªõn h∆°n 0!")
            return
        
        self.exchange_rate = self.exchange_rate_input.value
        self.save_settings()
        
        with self.output:
            clear_output()
            print(f"‚úÖ ƒê√£ c·∫≠p nh·∫≠t t·ª∑ gi√°: 1 KRW = {self.exchange_rate} VND")

    def set_target_allocation(self, button):
        """Thi·∫øt l·∫≠p t·ª∑ l·ªá ph√¢n b·ªï m·ª•c ti√™u"""
        if self.target_percent.value < 0:
            with self.output:
                clear_output()
                print("‚ùå T·ª∑ l·ªá ph·∫ßn trƒÉm ph·∫£i >= 0!")
            return

        self.target_allocation[self.allocation_type.value] = self.target_percent.value
        self.save_target_allocation()
        
        with self.output:
            clear_output()
            print(f"‚úÖ ƒê√£ thi·∫øt l·∫≠p t·ª∑ l·ªá m·ª•c ti√™u cho {self.allocation_type.value}: {self.target_percent.value}%")
            
            print("\nüéØ Ph√¢n b·ªï m·ª•c ti√™u hi·ªán t·∫°i:")
            total_percent = sum(self.target_allocation.values())
            for asset_type, percent in self.target_allocation.items():
                print(f" ‚Ä¢ {asset_type}: {percent}%")
            print(f" üìä T·ªïng: {total_percent}%")
            
            if total_percent != 100:
                print(f" ‚ö†Ô∏è Ch∆∞a ƒë·∫°t 100% (c√≤n {100-total_percent}%)")

    def clear_target_allocation(self, button):
        """X√≥a t·∫•t c·∫£ t·ª∑ l·ªá ph√¢n b·ªï m·ª•c ti√™u"""
        self.target_allocation = {}
        self.save_target_allocation()
        
        with self.output:
            clear_output()
            print("üóëÔ∏è ƒê√£ x√≥a t·∫•t c·∫£ t·ª∑ l·ªá ph√¢n b·ªï m·ª•c ti√™u")

    def convert_currency(self, amount, from_currency, to_currency):
        """Chuy·ªÉn ƒë·ªïi ti·ªÅn t·ªá"""
        if from_currency == to_currency:
            return amount
        if self.exchange_rate == 0:
            raise ValueError("T·ª∑ gi√° h·ªëi ƒëo√°i kh√¥ng th·ªÉ b·∫±ng 0!")
        if from_currency == 'KRW' and to_currency == 'VND':
            return amount * self.exchange_rate
        elif from_currency == 'VND' and to_currency == 'KRW':
            return amount / self.exchange_rate
        return amount

    def format_currency(self, amount, currency):
        """Format hi·ªÉn th·ªã ti·ªÅn t·ªá"""
        if currency == 'VND':
            return f"{amount:,.0f}ƒë"
        elif currency == 'KRW':
            return f"{amount:,.0f}‚Ç©"
        return f"{amount:,.0f}"

    def calculate_gini_coefficient(self, values):
        """T√≠nh h·ªá s·ªë Gini ƒë·ªÉ ƒëo ƒë·ªô b·∫•t b√¨nh ƒë·∫≥ng ph√¢n b·ªï"""
        if not values or len(values) == 1:
            return 0
        if any(not isinstance(v, (int, float)) or v < 0 for v in values):
            raise ValueError("Danh s√°ch gi√° tr·ªã ph·∫£i ch·ª©a c√°c s·ªë kh√¥ng √¢m!")
        
        sorted_values = sorted(values)
        n = len(sorted_values)
        cumsum = np.cumsum(sorted_values)
        return (n + 1 - 2 * sum((n + 1 - i) * y for i, y in enumerate(sorted_values, 1))) / (n * sum(sorted_values))

    def show_fund_analysis(self, button):
        # Gi·ªØ nguy√™n nh∆∞ code b·∫°n cung c·∫•p
        if not self.investment_data:
            with self.output:
                clear_output()
                print("‚ùå Ch∆∞a c√≥ d·ªØ li·ªáu ƒë·∫ßu t∆∞!")
            return

        display_currency = self.currency_display.value
        fund_types = ['Qu·ªπ tr√°i phi·∫øu', 'Qu·ªπ c√¢n b·∫±ng', 'Qu·ªπ c·ªï phi·∫øu']
        fund_data = [inv for inv in self.investment_data if inv['type'] in fund_types]

        if not fund_data:
            with self.output:
                clear_output()
                print("‚ùå Kh√¥ng c√≥ d·ªØ li·ªáu qu·ªπ ƒë·∫ßu t∆∞ ƒë·ªÉ ph√¢n t√≠ch!")
                print("üí° H√£y ƒë·∫ßu t∆∞ v√†o c√°c qu·ªπ: Qu·ªπ tr√°i phi·∫øu, Qu·ªπ c√¢n b·∫±ng, ho·∫∑c Qu·ªπ c·ªï phi·∫øu")
            return

        with self.output:
            clear_output()
            print("="*80)
            print("üèõÔ∏è PH√ÇN T√çCH CHI TI·∫æT QU·ª∏ ƒê·∫¶U T∆Ø")
            print("="*80)

            fund_summary = {}
            total_fund_value = 0

            for inv in fund_data:
                fund_type = inv['type']
                try:
                    amount = self.convert_currency(inv['amount'], inv['currency'], display_currency)
                except ValueError as e:
                    print(f"‚ö†Ô∏è L·ªói chuy·ªÉn ƒë·ªïi ti·ªÅn t·ªá cho {fund_type}: {str(e)}")
                    continue

                if fund_type not in fund_summary:
                    fund_summary[fund_type] = {
                        'value': 0,
                        'count': 0,
                        'risk_level': self.asset_risk_levels[fund_type]['risk'],
                        'expected_return': self.asset_risk_levels[fund_type]['expected_return'],
                        'volatility': self.asset_risk_levels[fund_type]['volatility']
                    }

                fund_summary[fund_type]['value'] += amount
                fund_summary[fund_type]['count'] += 1
                total_fund_value += amount

            fig, ((ax1, ax2), (ax3, ax4)) = plt.subplots(2, 2, figsize=(16, 12))

            fund_names = list(fund_summary.keys())
            fund_values = [fund_summary[name]['value'] for name in fund_names]
            colors = ['lightgreen', 'gold', 'lightcoral']

            wedges, texts, autotexts = ax1.pie(fund_values, labels=fund_names, autopct='%1.1f%%',
                                             colors=colors[:len(fund_names)], startangle=90)
            ax1.set_title('Ph√¢n B·ªï Gi√° Tr·ªã Qu·ªπ ƒê·∫ßu T∆∞')

            risk_levels = [fund_summary[name]['risk_level'] for name in fund_names]
            expected_returns = [fund_summary[name]['expected_return'] for name in fund_names]

            scatter = ax2.scatter(risk_levels, expected_returns,
                                 s=[val/max(fund_values)*500 + 100 for val in fund_values],
                                 c=colors[:len(fund_names)], alpha=0.7)

            for i, name in enumerate(fund_names):
                ax2.annotate(name.replace('Qu·ªπ ', ''),
                            (risk_levels[i], expected_returns[i]),
                            xytext=(5, 5), textcoords='offset points', fontsize=10)

            ax2.set_xlabel('M·ª©c ƒë·ªô R·ªßi ro (1-5)')
            ax2.set_ylabel('L·ª£i nhu·∫≠n K·ª≥ v·ªçng (%/nƒÉm)')
            ax2.set_title('Ma Tr·∫≠n R·ªßi ro - L·ª£i nhu·∫≠n Qu·ªπ')
            ax2.grid(True, alpha=0.3)
            ax2.set_xlim(0.5, 5.5)

            x = np.arange(len(fund_names))
            width = 0.25

            risk_vals = [fund_summary[name]['risk_level'] for name in fund_names]
            return_vals = [fund_summary[name]['expected_return']/3 for name in fund_names]
            volatility_vals = [fund_summary[name]['volatility']/4 for name in fund_names]

            bars1 = ax3.bar(x - width, risk_vals, width, label='R·ªßi ro (1-5)', color='red', alpha=0.7)
            bars2 = ax3.bar(x, return_vals, width, label='L·ª£i nhu·∫≠n (%/3)', color='green', alpha=0.7)
            bars3 = ax3.bar(x + width, volatility_vals, width, label='Bi·∫øn ƒë·ªông (%/4)', color='orange', alpha=0.7)

            ax3.set_xlabel('Lo·∫°i Qu·ªπ')
            ax3.set_ylabel('Gi√° tr·ªã (ƒê√£ chu·∫©n h√≥a)')
            ax3.set_title('So S√°nh C√°c Ch·ªâ S·ªë Qu·ªπ')
            ax3.set_xticks(x)
            ax3.set_xticklabels([name.replace('Qu·ªπ ', '') for name in fund_names])
            ax3.legend()
            ax3.grid(True, alpha=0.3)

            fund_df = pd.DataFrame(fund_data)
            try:
                fund_df['date'] = pd.to_datetime(fund_df['date'], errors='coerce')
                if fund_df['date'].isnull().any():
                    print("‚ö†Ô∏è M·ªôt s·ªë b·∫£n ghi c√≥ ƒë·ªãnh d·∫°ng ng√†y kh√¥ng h·ª£p l·ªá, b·ªè qua c√°c b·∫£n ghi n√†y.")
                    fund_df = fund_df.dropna(subset=['date'])
            except Exception as e:
                print(f"‚ö†Ô∏è L·ªói x·ª≠ l√Ω ng√†y th√°ng: {str(e)}")
                ax4.text(0.5, 0.5, 'L·ªói x·ª≠ l√Ω ng√†y th√°ng', ha='center', va='center', fontsize=12)
                ax4.set_title('Xu H∆∞·ªõng ƒê·∫ßu T∆∞ Theo Th·ªùi Gian')
                plt.tight_layout()
                plt.show()
                return

            fund_df['amount_display'] = fund_df.apply(
                lambda row: self.convert_currency(row['amount'], row['currency'], display_currency),
                axis=1
            )

            fund_cumulative = fund_df.groupby(['date', 'type'])['amount_display'].sum().unstack(fill_value=0).cumsum()

            if not fund_cumulative.empty and len(fund_cumulative) > 1:
                for fund_type in fund_cumulative.columns:
                    color_map = {'Qu·ªπ tr√°i phi·∫øu': 'green', 'Qu·ªπ c√¢n b·∫±ng': 'orange', 'Qu·ªπ c·ªï phi·∫øu': 'red'}
                    ax4.plot(fund_cumulative.index, fund_cumulative[fund_type],
                            marker='o', label=fund_type.replace('Qu·ªπ ', ''),
                            color=color_map.get(fund_type, 'blue'), linewidth=2)

                ax4.set_title('T√≠ch L≈©y ƒê·∫ßu T∆∞ Theo Lo·∫°i Qu·ªπ')
                ax4.set_ylabel(f'T·ªïng ƒë·∫ßu t∆∞ ({display_currency})')
                ax4.legend()
                ax4.grid(True, alpha=0.3)
            else:
                ax4.text(0.5, 0.5, 'Ch∆∞a ƒë·ªß d·ªØ li·ªáu\nƒë·ªÉ hi·ªÉn th·ªã xu h∆∞·ªõng',
                        ha='center', va='center', transform=ax4.transAxes, fontsize=12)
                ax4.set_title('Xu H∆∞·ªõng ƒê·∫ßu T∆∞ Theo Th·ªùi Gian')

            plt.tight_layout()
            plt.show()

            print(f"üí∞ T·ªïng gi√° tr·ªã qu·ªπ ƒë·∫ßu t∆∞: {self.format_currency(total_fund_value, display_currency)}")
            print(f"üìä S·ªë lo·∫°i qu·ªπ ƒëang ƒë·∫ßu t∆∞: {len(fund_summary)}/3")
            print("-"*80)

            for fund_type in sorted(fund_summary.keys(), key=lambda x: fund_summary[x]['risk_level']):
                data = fund_summary[fund_type]
                percentage = (data['value'] / total_fund_value) * 100

                print(f"\nüèõÔ∏è {fund_type.upper()}")
                print(f" üí∞ Gi√° tr·ªã: {self.format_currency(data['value'], display_currency)} ({percentage:.1f}%)")
                print(f" üìä S·ªë giao d·ªãch: {data['count']}")
                print(f" ‚ö†Ô∏è M·ª©c r·ªßi ro: {data['risk_level']}/5 ({'Th·∫•p' if data['risk_level'] <= 2 else 'Trung b√¨nh' if data['risk_level'] <= 3 else 'Cao'})")
                print(f" üìà L·ª£i nhu·∫≠n k·ª≥ v·ªçng: {data['expected_return']:.1f}%/nƒÉm")
                print(f" üìâ ƒê·ªô bi·∫øn ƒë·ªông: {data['volatility']:.1f}%")

                if fund_type == 'Qu·ªπ tr√°i phi·∫øu':
                    print(f" üí° ƒê·∫∑c ƒëi·ªÉm: An to√†n, ·ªïn ƒë·ªãnh, ph√π h·ª£p b·∫£o to√†n v·ªën")
                    if percentage > 50:
                        print(f" üü° C·∫£nh b√°o: T·ª∑ tr·ªçng cao, c√≥ th·ªÉ h·∫°n ch·∫ø tƒÉng tr∆∞·ªüng")
                elif fund_type == 'Qu·ªπ c√¢n b·∫±ng':
                    print(f" üí° ƒê·∫∑c ƒëi·ªÉm: C√¢n b·∫±ng r·ªßi ro-l·ª£i nhu·∫≠n, linh ho·∫°t")
                    if percentage > 60:
                        print(f" üü° G·ª£i √Ω: C√≥ th·ªÉ ƒëa d·∫°ng th√™m sang c√°c lo·∫°i kh√°c")
                elif fund_type == 'Qu·ªπ c·ªï phi·∫øu':
                    print(f" üí° ƒê·∫∑c ƒëi·ªÉm: Ti·ªÅm nƒÉng tƒÉng tr∆∞·ªüng cao, bi·∫øn ƒë·ªông l·ªõn")
                    if percentage > 40:
                        print(f" üî¥ C·∫£nh b√°o: R·ªßi ro cao, c·∫ßn c√¢n nh·∫Øc c√¢n b·∫±ng")

            print(f"\n" + "="*80)
            print("üìä PH√ÇN T√çCH PORTFOLIO QU·ª∏ T·ªîNG TH·ªÇ")
            print("="*80)

            weighted_risk = sum(fund_summary[name]['risk_level'] * fund_summary[name]['value']
                               for name in fund_names) / total_fund_value
            weighted_return = sum(fund_summary[name]['expected_return'] * fund_summary[name]['value']
                                 for name in fund_names) / total_fund_value
            weighted_volatility = sum(fund_summary[name]['volatility'] * fund_summary[name]['value']
                                     for name in fund_names) / total_fund_value

            print(f"‚ö° ƒêi·ªÉm r·ªßi ro trung b√¨nh: {weighted_risk:.2f}/5")
            print(f"üìà L·ª£i nhu·∫≠n k·ª≥ v·ªçng trung b√¨nh: {weighted_return:.1f}%/nƒÉm")
            print(f"üìä ƒê·ªô bi·∫øn ƒë·ªông trung b√¨nh: {weighted_volatility:.1f}%")

            if weighted_risk <= 2.5:
                risk_assessment = "üü¢ B·∫£o th·ªß - ∆Øu ti√™n an to√†n"
                recommendation = "C√≥ th·ªÉ tƒÉng t·ª∑ tr·ªçng qu·ªπ c·ªï phi·∫øu ƒë·ªÉ tƒÉng l·ª£i nhu·∫≠n"
            elif weighted_risk <= 3.5:
                risk_assessment = "üü° C√¢n b·∫±ng - H√†i h√≤a r·ªßi ro v√† l·ª£i nhu·∫≠n"
                recommendation = "Portfolio qu·ªπ ƒë√£ c√¢n b·∫±ng t·ªët"
            else:
                risk_assessment = "üî¥ T√≠ch c·ª±c - ∆Øu ti√™n tƒÉng tr∆∞·ªüng"
                recommendation = "C·∫ßn tƒÉng t·ª∑ tr·ªçng qu·ªπ tr√°i phi·∫øu ƒë·ªÉ gi·∫£m r·ªßi ro"

            print(f"üéØ ƒê√°nh gi√° portfolio: {risk_assessment}")
            print(f"üí° Khuy·∫øn ngh·ªã: {recommendation}")

            print(f"\nüí° KHUY·∫æN NGH·ªä PH√ÇN B·ªî QU·ª∏ T·ªêI ∆ØU:")
            if weighted_risk < 2.0:
                print(" üîπ Qu·ªπ tr√°i phi·∫øu: 30-50% (hi·ªán t·∫°i c·∫ßn gi·∫£m)")
                print(" üîπ Qu·ªπ c√¢n b·∫±ng: 30-40% (c√≥ th·ªÉ tƒÉng)")
                print(" üîπ Qu·ªπ c·ªï phi·∫øu: 20-30% (n√™n tƒÉng ƒë√°ng k·ªÉ)")
            elif weighted_risk < 3.0:
                print(" üîπ Qu·ªπ tr√°i phi·∫øu: 25-35% (t√πy ƒëi·ªÅu ch·ªânh)")
                print(" üîπ Qu·ªπ c√¢n b·∫±ng: 35-45% (duy tr√¨)")
                print(" üîπ Qu·ªπ c·ªï phi·∫øu: 20-35% (c√≥ th·ªÉ tƒÉng nh·∫π)")
            else:
                print(" üîπ Qu·ªπ tr√°i phi·∫øu: 20-30% (c·∫ßn tƒÉng)")
                print(" üîπ Qu·ªπ c√¢n b·∫±ng: 30-40% (duy tr√¨)")
                print(" üîπ Qu·ªπ c·ªï phi·∫øu: 25-35% (c·∫ßn gi·∫£m)")

            missing_funds = [fund for fund in fund_types if fund not in fund_summary]
            if missing_funds:
                print(f"\n‚ö†Ô∏è THI·∫æU H·ª§T LO·∫†I QU·ª∏:")
                for missing_fund in missing_funds:
                    risk_info = self.asset_risk_levels[missing_fund]
                    print(f" üî∏ {missing_fund}: R·ªßi ro {risk_info['risk']}/5, L·ª£i nhu·∫≠n {risk_info['expected_return']}%")
                    if missing_fund == 'Qu·ªπ tr√°i phi·∫øu':
                        print(" ‚Üí Gi√∫p ·ªïn ƒë·ªãnh danh m·ª•c, gi·∫£m r·ªßi ro")
                    elif missing_fund == 'Qu·ªπ c√¢n b·∫±ng':
                        print(" ‚Üí C√¢n b·∫±ng gi·ªØa an to√†n v√† tƒÉng tr∆∞·ªüng")
                    elif missing_fund == 'Qu·ªπ c·ªï phi·∫øu':
                        print(" ‚Üí TƒÉng ti·ªÅm nƒÉng l·ª£i nhu·∫≠n d√†i h·∫°n")

            print(f"\nüìä D·ª∞ B√ÅO L·ª¢I NHU·∫¨N V√Ä R·ª¶I RO:")
            expected_annual_return = total_fund_value * weighted_return / 100
            expected_volatility_range = total_fund_value * weighted_volatility / 100

            print(f" üìà L·ª£i nhu·∫≠n d·ª± ki·∫øn/nƒÉm: {self.format_currency(expected_annual_return, display_currency)}")
            print(f" üìä Bi√™n ƒë·ªô dao ƒë·ªông: ¬±{self.format_currency(expected_volatility_range, display_currency)}")
            print(f" üéØ K·ªãch b·∫£n t·ªët: {self.format_currency(total_fund_value + expected_annual_return + expected_volatility_range, display_currency)}")
            print(f" ‚ö†Ô∏è K·ªãch b·∫£n x·∫•u: {self.format_currency(total_fund_value + expected_annual_return - expected_volatility_range, display_currency)}")

            total_portfolio_value = sum(self.convert_currency(inv['amount'], inv['currency'], display_currency)
                                       for inv in self.investment_data)
            fund_percentage_in_portfolio = (total_fund_value / total_portfolio_value) * 100

            print(f"\nüîç V·ªä TR√ç TRONG T·ªîNG DANH M·ª§C:")
            print(f" üìä T·ª∑ tr·ªçng qu·ªπ trong t·ªïng danh m·ª•c: {fund_percentage_in_portfolio:.1f}%")

            if fund_percentage_in_portfolio < 30:
                print(" üí° T·ª∑ tr·ªçng qu·ªπ th·∫•p - c√≥ th·ªÉ tƒÉng ƒë·ªÉ ƒëa d·∫°ng h√≥a")
            elif fund_percentage_in_portfolio > 70:
                print(" ‚ö†Ô∏è T·ª∑ tr·ªçng qu·ªπ cao - c√¢n nh·∫Øc ƒëa d·∫°ng sang t√†i s·∫£n kh√°c")
            else:
                print(" ‚úÖ T·ª∑ tr·ªçng qu·ªπ h·ª£p l√Ω trong t·ªïng danh m·ª•c")

    def import_investment_data(self, button):
        # Gi·ªØ nguy√™n nh∆∞ code b·∫°n cung c·∫•p
        try:
            file_path = self.import_file_path.value
            if not os.path.exists(file_path):
                raise FileNotFoundError(f"File {file_path} kh√¥ng t·ªìn t·∫°i!")
            
            df = pd.read_csv(file_path, encoding='utf-8-sig')
            
            required_columns = ['date', 'type', 'description', 'amount']
            if not all(col in df.columns for col in required_columns):
                raise ValueError(f"File CSV thi·∫øu m·ªôt ho·∫∑c nhi·ªÅu c·ªôt: {required_columns}")
            
            if df['amount'].isnull().any() or not pd.to_numeric(df['amount'], errors='coerce').notnull().all():
                raise ValueError("C·ªôt 'amount' ch·ª©a gi√° tr·ªã kh√¥ng ph·∫£i s·ªë ho·∫∑c r·ªóng!")
            
            self.investment_data = []

            for _, row in df.iterrows():
                try:
                    pd.to_datetime(row['date'], errors='raise')
                    investment_type = self.investment_mapping.get(row['type'], 'Kh√°c')
                    self.investment_data.append({
                        'date': pd.to_datetime(row['date']).date(),
                        'type': investment_type,
                        'description': row['description'],
                        'amount': float(row['amount']),
                        'currency': row.get('currency', 'VND'),
                        'original_type': row['type']
                    })
                except ValueError as e:
                    print(f"‚ö†Ô∏è B·ªè qua b·∫£n ghi v·ªõi ng√†y kh√¥ng h·ª£p l·ªá: {row['date']}")
                    continue

            self.update_asset_dropdown()

            with self.output:
                clear_output()
                print(f"‚úÖ ƒê√£ import {len(self.investment_data)} b·∫£n ghi ƒë·∫ßu t∆∞ t·ª´ {file_path}")
                print("üìä Ph√¢n lo·∫°i ƒë·∫ßu t∆∞:")
                
                type_summary = {}
                for inv in self.investment_data:
                    inv_type = inv['type']
                    amount_vnd = self.convert_currency(inv['amount'], inv['currency'], 'VND')
                    type_summary[inv_type] = type_summary.get(inv_type, 0) + amount_vnd
                
                for inv_type, total in type_summary.items():
                    print(f" ‚Ä¢ {inv_type}: {total:,.0f}ƒë")
        
        except FileNotFoundError as e:
            with self.output:
                clear_output()
                print(f"‚ùå L·ªói: {str(e)}")
        except ValueError as e:
            with self.output:
                clear_output()
                print(f"‚ùå L·ªói ƒë·ªãnh d·∫°ng file: {str(e)}")
        except Exception as e:
            with self.output:
                clear_output()
                print(f"‚ùå L·ªói kh√¥ng x√°c ƒë·ªãnh khi import d·ªØ li·ªáu: {str(e)}")

    def update_asset_dropdown(self):
        # Gi·ªØ nguy√™n nh∆∞ code b·∫°n cung c·∫•p
        options = [('-- Ch·ªçn t√†i s·∫£n --', '')]
        assets = set(f"{inv['type']} - {inv['description']}" for inv in self.investment_data)
        for asset in sorted(assets):
            options.append((asset, asset))
        self.asset_dropdown.options = options

    def update_current_price(self, button):
        # Gi·ªØ nguy√™n nh∆∞ code b·∫°n cung c·∫•p
        if not self.asset_dropdown.value:
            with self.output:
                clear_output()
                print("‚ùå Vui l√≤ng ch·ªçn t√†i s·∫£n!")
            return
        if self.current_price_input.value <= 0:
            with self.output:
                clear_output()
                print("‚ùå Gi√° hi·ªán t·∫°i ph·∫£i l·ªõn h∆°n 0!")
            return

        asset_key = self.asset_dropdown.value
        price_info = {
            'price': self.current_price_input.value,
            'currency': self.price_currency.value,
            'date': self.price_date.value
        }
        
        self.current_prices[asset_key] = price_info
        self.save_current_prices()
        
        with self.output:
            clear_output()
            formatted_price = self.format_currency(self.current_price_input.value, self.price_currency.value)
            print(f"‚úÖ ƒê√£ c·∫≠p nh·∫≠t gi√° {asset_key}: {formatted_price}")

    def save_settings(self):
        """L∆∞u c√†i ƒë·∫∑t t·ª∑ gi√°"""
        try:
            if not os.access(os.path.dirname(self.data_files['settings']) or '.', os.W_OK):
                raise PermissionError("Kh√¥ng c√≥ quy·ªÅn ghi v√†o th∆∞ m·ª•c ch·ª©a file settings!")
            
            settings_df = pd.DataFrame([{
                'parameter': 'exchange_rate',
                'value': self.exchange_rate,
                'updated_date': datetime.now().date()
            }])
            settings_df.to_csv(self.data_files['settings'], index=False, encoding='utf-8-sig')
        except Exception as e:
            print(f"L·ªói khi l∆∞u c√†i ƒë·∫∑t: {str(e)}")

    def save_current_prices(self):
        """L∆∞u gi√° hi·ªán t·∫°i"""
        try:
            if not os.access(os.path.dirname(self.data_files['investment_prices']) or '.', os.W_OK):
                raise PermissionError("Kh√¥ng c√≥ quy·ªÅn ghi v√†o th∆∞ m·ª•c ch·ª©a file prices!")
                
            if self.current_prices:
                prices_data = [
                    {
                        'asset': asset_key,
                        'price': price_info['price'],
                        'currency': price_info['currency'],
                        'date': price_info['date']
                    }
                    for asset_key, price_info in self.current_prices.items()
                ]
                prices_df = pd.DataFrame(prices_data)
                prices_df.to_csv(self.data_files['investment_prices'], index=False, encoding='utf-8-sig')
        except Exception as e:
            print(f"L·ªói khi l∆∞u gi√°: {str(e)}")

    def save_target_allocation(self):
        """L∆∞u t·ª∑ l·ªá ph√¢n b·ªï m·ª•c ti√™u"""
        try:
            if not os.access(os.path.dirname(self.data_files['target_allocation']) or '.', os.W_OK):
                raise PermissionError("Kh√¥ng c√≥ quy·ªÅn ghi v√†o th∆∞ m·ª•c ch·ª©a file allocation!")
                
            if self.target_allocation:
                allocation_data = [
                    {
                        'asset_type': asset_type,
                        'target_percent': target_pct
                    }
                    for asset_type, target_pct in self.target_allocation.items()
                ]
                allocation_df = pd.DataFrame(allocation_data)
                allocation_df.to_csv(self.data_files['target_allocation'], index=False, encoding='utf-8-sig')
        except Exception as e:
            print(f"L·ªói khi l∆∞u ph√¢n b·ªï m·ª•c ti√™u: {str(e)}")

    def load_data(self):
        # Gi·ªØ nguy√™n nh∆∞ code b·∫°n cung c·∫•p
        try:
            if os.path.exists(self.data_files['settings']):
                df = pd.read_csv(self.data_files['settings'], encoding='utf-8-sig')
                if 'parameter' in df.columns and 'value' in df.columns:
                    for _, row in df.iterrows():
                        if row['parameter'] == 'exchange_rate':
                            self.exchange_rate = float(row['value'])
                            self.exchange_rate_input.value = self.exchange_rate
                    print(f"‚úÖ ƒê√£ load c√†i ƒë·∫∑t t·ª∑ gi√°: {self.exchange_rate}")
                else:
                    print("‚ö†Ô∏è File c√†i ƒë·∫∑t kh√¥ng ƒë√∫ng ƒë·ªãnh d·∫°ng!")
            else:
                print("üìù Ch∆∞a c√≥ file c√†i ƒë·∫∑t - s·ª≠ d·ª•ng m·∫∑c ƒë·ªãnh")
        except Exception as e:
            print(f"‚ö†Ô∏è L·ªói khi load c√†i ƒë·∫∑t: {str(e)}")

        try:
            if os.path.exists(self.data_files['investment_prices']):
                df = pd.read_csv(self.data_files['investment_prices'], encoding='utf-8-sig')
                self.current_prices = {}
                for _, row in df.iterrows():
                    try:
                        self.current_prices[row['asset']] = {
                            'price': float(row['price']),
                            'currency': row['currency'],
                            'date': pd.to_datetime(row['date']).date()
                        }
                    except ValueError as e:
                        print(f"‚ö†Ô∏è B·ªè qua b·∫£n ghi gi√° v·ªõi ng√†y kh√¥ng h·ª£p l·ªá: {row['date']}")
                        continue
                print(f"‚úÖ ƒê√£ load {len(self.current_prices)} gi√° t√†i s·∫£n")
            else:
                print("üìù Ch∆∞a c√≥ file gi√° t√†i s·∫£n")
        except Exception as e:
            print(f"‚ö†Ô∏è L·ªói khi load gi√°: {str(e)}")

        try:
            if os.path.exists(self.data_files['target_allocation']):
                df = pd.read_csv(self.data_files['target_allocation'], encoding='utf-8-sig')
                self.target_allocation = {}
                for _, row in df.iterrows():
                    self.target_allocation[row['asset_type']] = float(row['target_percent'])
                print(f"‚úÖ ƒê√£ load t·ª∑ l·ªá ph√¢n b·ªï m·ª•c ti√™u cho {len(self.target_allocation)} lo·∫°i t√†i s·∫£n")
            else:
                print("üìù Ch∆∞a c√≥ file ph√¢n b·ªï m·ª•c ti√™u")
        except Exception as e:
            print(f"‚ö†Ô∏è L·ªói khi load ph√¢n b·ªï m·ª•c ti√™u: {str(e)}")

    def save_all_data(self, button):
        # Gi·ªØ nguy√™n nh∆∞ code b·∫°n cung c·∫•p
        try:
            self.save_settings()
            self.save_current_prices()
            self.save_target_allocation()
            
            with self.output:
                clear_output()
                print("‚úÖ ƒê√£ l∆∞u t·∫•t c·∫£ d·ªØ li·ªáu!")
                print("üìÅ C√°c file ƒë∆∞·ª£c t·∫°o:")
                print(" ‚Ä¢ investment_settings.csv - C√†i ƒë·∫∑t t·ª∑ gi√°")
                print(" ‚Ä¢ investment_current_prices.csv - Gi√° hi·ªán t·∫°i")
                print(" ‚Ä¢ target_allocation.csv - Ph√¢n b·ªï m·ª•c ti√™u")
        except Exception as e:
            with self.output:
                clear_output()
                print(f"‚ùå L·ªói khi l∆∞u d·ªØ li·ªáu: {str(e)}")

    def load_all_data(self, button):
        # Gi·ªØ nguy√™n nh∆∞ code b·∫°n cung c·∫•p
        try:
            self.load_data()
            self.update_asset_dropdown()
            
            with self.output:
                clear_output()
                print("‚úÖ ƒê√£ t·∫£i l·∫°i t·∫•t c·∫£ d·ªØ li·ªáu!")
                print(f"üìä T·ª∑ gi√°: 1 KRW = {self.exchange_rate} VND")
                print(f"üìä Gi√° t√†i s·∫£n: {len(self.current_prices)} m·ª•c")
                print(f"üìä Ph√¢n b·ªï m·ª•c ti√™u: {len(self.target_allocation)} lo·∫°i")
        except Exception as e:
            with self.output:
                clear_output()
                print(f"‚ùå L·ªói khi t·∫£i d·ªØ li·ªáu: {str(e)}")

    def clear_all_data(self, button):
        # Gi·ªØ nguy√™n nh∆∞ code b·∫°n cung c·∫•p
        try:
            self.investment_data = []
            self.current_prices = {}
            self.target_allocation = {}
            self.exchange_rate = 18.0
            
            self.exchange_rate_input.value = 18.0
            self.update_asset_dropdown()
            
            for filename in self.data_files.values():
                if os.path.exists(filename):
                    os.remove(filename)
            
            with self.output:
                clear_output()
                print("‚ö†Ô∏è ƒê√£ x√≥a to√†n b·ªô d·ªØ li·ªáu v√† file!")
                print("üìù B·∫°n c√≥ th·ªÉ b·∫Øt ƒë·∫ßu import d·ªØ li·ªáu m·ªõi.")
        except Exception as e:
            with self.output:
                clear_output()
                print(f"‚ùå L·ªói khi x√≥a d·ªØ li·ªáu: {str(e)}")

    def display(self):
        return self.main_layout

    def show_allocation_analysis(self, button):
        """Ph√¢n t√≠ch ph√¢n b·ªï danh m·ª•c so v·ªõi m·ª•c ti√™u"""
        if not self.investment_data:
            with self.output:
                clear_output()
                print("‚ùå Ch∆∞a c√≥ d·ªØ li·ªáu ƒë·∫ßu t∆∞!")
            return
        
        if not self.target_allocation:
            with self.output:
                clear_output()
                print("‚ùå Ch∆∞a thi·∫øt l·∫≠p t·ª∑ l·ªá ph√¢n b·ªï m·ª•c ti√™u!")
            return
        
        display_currency = self.currency_display.value
        
        with self.output:
            clear_output()

            # Calculate current allocation
            current_allocation = {}
            total_value = 0
            
            for inv in self.investment_data:
                inv_type = inv['type']
                amount = self.convert_currency(inv['amount'], inv['currency'], display_currency)
                
                current_allocation[inv_type] = current_allocation.get(inv_type, 0) + amount
                total_value += amount
            
            # Convert to percentages
            current_allocation_pct = {
                asset_type: (value / total_value) * 100 
                for asset_type, value in current_allocation.items()
            }

            print("="*70)
            print(f"üéØ PH√ÇN T√çCH PH√ÇN B·ªî DANH M·ª§C ({display_currency})")
            print("="*70)
            print(f"üí∞ T·ªïng gi√° tr·ªã danh m·ª•c: {self.format_currency(total_value, display_currency)}")
            print("-"*70)
            
            # Create comparison visualization
            fig, ((ax1, ax2), (ax3, ax4)) = plt.subplots(2, 2, figsize=(16, 12))
            
            # Get all asset types from both current and target
            all_asset_types = set(list(current_allocation_pct.keys()) + list(self.target_allocation.keys()))
            
            # Prepare data for comparison
            comparison_data = []
            for asset_type in all_asset_types:
                current_pct = current_allocation_pct.get(asset_type, 0)
                target_pct = self.target_allocation.get(asset_type, 0)
                deviation = current_pct - target_pct
                
                comparison_data.append({
                    'asset_type': asset_type,
                    'current_pct': current_pct,
                    'target_pct': target_pct,
                    'deviation': deviation,
                    'current_value': current_allocation.get(asset_type, 0),
                    'target_value': (target_pct / 100) * total_value if total_value > 0 else 0,
                    'adjustment_needed': ((target_pct / 100) * total_value) - current_allocation.get(asset_type, 0)
                })
            
            # Sort by absolute deviation for better visualization
            comparison_data.sort(key=lambda x: abs(x['deviation']), reverse=True)
            
            # 1. Current vs Target Allocation (Bar Chart)
            asset_types = [item['asset_type'] for item in comparison_data]
            current_values = [item['current_pct'] for item in comparison_data]
            target_values = [item['target_pct'] for item in comparison_data]
            
            x = np.arange(len(asset_types))
            width = 0.35
            
            bars1 = ax1.bar(x - width/2, current_values, width, label='Hi·ªán t·∫°i', color='lightblue', alpha=0.8)
            bars2 = ax1.bar(x + width/2, target_values, width, label='M·ª•c ti√™u', color='lightcoral', alpha=0.8)
            
            ax1.set_xlabel('Lo·∫°i T√†i S·∫£n')
            ax1.set_ylabel('T·ª∑ l·ªá (%)')
            ax1.set_title('So S√°nh Ph√¢n B·ªï Hi·ªán T·∫°i vs M·ª•c Ti√™u')
            ax1.set_xticks(x)
            ax1.set_xticklabels(asset_types, rotation=45, ha='right')
            ax1.legend()
            ax1.grid(True, alpha=0.3)
            
            # Add value labels on bars
            for bar in bars1:
                height = bar.get_height()
                ax1.text(bar.get_x() + bar.get_width()/2., height + 0.5,
                        f'{height:.1f}%', ha='center', va='bottom', fontsize=9)
            
            for bar in bars2:
                height = bar.get_height()
                ax1.text(bar.get_x() + bar.get_width()/2., height + 0.5,
                        f'{height:.1f}%', ha='center', va='bottom', fontsize=9)
            
            # 2. Deviation Analysis
            deviations = [item['deviation'] for item in comparison_data]
            colors = ['red' if dev < -5 else 'orange' if dev < -2 else 'lightgreen' if abs(dev) <= 2 else 'yellow' if dev < 5 else 'red' for dev in deviations]
            
            bars = ax2.barh(asset_types, deviations, color=colors, alpha=0.7)
            ax2.set_xlabel('ƒê·ªô l·ªách (%)')
            ax2.set_title('ƒê·ªô L·ªách So V·ªõi M·ª•c Ti√™u')
            ax2.axvline(x=0, color='black', linestyle='-', linewidth=1)
            ax2.grid(True, alpha=0.3)
            
            # Add deviation labels
            for i, (bar, dev) in enumerate(zip(bars, deviations)):
                ax2.text(dev + (0.5 if dev >= 0 else -0.5), i,
                        f'{dev:+.1f}%', va='center', ha='left' if dev >= 0 else 'right', fontweight='bold')
            
            # 3. Current Allocation Pie Chart
            current_types = [k for k, v in current_allocation_pct.items() if v > 0]
            current_pcts = [current_allocation_pct[k] for k in current_types]
            
            colors_pie = plt.cm.Set3(np.linspace(0, 1, len(current_types)))
            ax3.pie(current_pcts, labels=current_types, autopct='%1.1f%%', colors=colors_pie, startangle=90)
            ax3.set_title('Ph√¢n B·ªï Hi·ªán T·∫°i')
            
            # 4. Target Allocation Pie Chart
            target_types = [k for k, v in self.target_allocation.items() if v > 0]
            target_pcts = [self.target_allocation[k] for k in target_types]
            
            ax4.pie(target_pcts, labels=target_types, autopct='%1.1f%%', colors=colors_pie, startangle=90)
            ax4.set_title('Ph√¢n B·ªï M·ª•c Ti√™u')
            
            plt.tight_layout()
            plt.show()
            
            # Print detailed analysis
            print("üìä CHI TI·∫æT PH√ÇN T√çCH PH√ÇN B·ªî:")
            print(f"{'Lo·∫°i t√†i s·∫£n':<20} {'Hi·ªán t·∫°i':<12} {'M·ª•c ti√™u':<12} {'ƒê·ªô l·ªách':<12} {'Tr·∫°ng th√°i':<15}")
            print("-"*85)
            
            total_deviation = 0
            critical_deviations = 0
            
            for item in comparison_data:
                asset_type = item['asset_type']
                current_pct = item['current_pct']
                target_pct = item['target_pct']
                deviation = item['deviation']
                
                # Determine status
                if abs(deviation) <= 2:
                    status = "üü¢ T·ªët"
                elif abs(deviation) <= 5:
                    status = "üü° Ch·∫•p nh·∫≠n ƒë∆∞·ª£c"
                elif deviation > 5:
                    status = "üî¥ Qu√° cao"
                    critical_deviations += 1
                else:
                    status = "üîµ Qu√° th·∫•p"
                    critical_deviations += 1
                
                print(f"{asset_type:<20} {current_pct:>8.1f}% {target_pct:>8.1f}% {deviation:>+8.1f}% {status:<15}")
                total_deviation += abs(deviation)
            
            # Overall assessment
            print("-"*85)
            print(f"üìà ƒê√ÅNH GI√Å T·ªîNG QUAN:")
            print(f"   ‚Ä¢ T·ªïng ƒë·ªô l·ªách tuy·ªát ƒë·ªëi: {total_deviation:.1f}%")
            print(f"   ‚Ä¢ S·ªë lo·∫°i t√†i s·∫£n c·∫ßn ƒëi·ªÅu ch·ªânh: {critical_deviations}")
            
            if total_deviation <= 10:
                overall_status = "üü¢ Danh m·ª•c c√¢n b·∫±ng t·ªët"
            elif total_deviation <= 20:
                overall_status = "üü° C·∫ßn ƒëi·ªÅu ch·ªânh nh·∫π"
            else:
                overall_status = "üî¥ C·∫ßn t√°i c√¢n b·∫±ng m·∫°nh"
            
            print(f"   ‚Ä¢ Tr·∫°ng th√°i t·ªïng th·ªÉ: {overall_status}")
            
            # Rebalancing recommendations
            print(f"\nüí° KHUY·∫æN NGH·ªä T√ÅI C√ÇN B·∫∞NG:")
            
            rebalance_needed = False
            for item in comparison_data:
                if abs(item['deviation']) > 5:
                    rebalance_needed = True
                    asset_type = item['asset_type']
                    deviation = item['deviation']
                    adjustment_value = abs(item['adjustment_needed'])
                    
                    if deviation > 5:
                        action = "Gi·∫£m"
                        print(f"   üîª {action} {asset_type}: {self.format_currency(adjustment_value, display_currency)}")
                    else:
                        action = "TƒÉng"
                        print(f"   üî∫ {action} {asset_type}: {self.format_currency(adjustment_value, display_currency)}")
            
            if not rebalance_needed:
                print("   ‚úÖ Danh m·ª•c hi·ªán t·∫°i ƒë√£ kh√° c√¢n b·∫±ng, kh√¥ng c·∫ßn ƒëi·ªÅu ch·ªânh l·ªõn!")
            
            # Risk assessment cho t·ª´ng lo·∫°i qu·ªπ
            print(f"\n‚ö†Ô∏è  ƒê√ÅNH GI√Å R·ª¶I RO PH√ÇN B·ªî QU·ª∏:")
            
            # Ki·ªÉm tra ph√¢n b·ªï qu·ªπ
            fund_allocation = {}
            for item in comparison_data:
                asset_type = item['asset_type']
                if 'Qu·ªπ' in asset_type:
                    fund_allocation[asset_type] = {
                        'current': item['current_pct'],
                        'target': item['target_pct'],
                        'deviation': item['deviation']
                    }
            
            if fund_allocation:
                print("   üìä Ph√¢n t√≠ch qu·ªπ ƒë·∫ßu t∆∞:")
                for fund_type, data in fund_allocation.items():
                    risk_level = self.asset_risk_levels.get(fund_type, {}).get('risk', 3)
                    expected_return = self.asset_risk_levels.get(fund_type, {}).get('expected_return', 10)
                    
                    print(f"   ‚Ä¢ {fund_type}:")
                    print(f"     - Hi·ªán t·∫°i: {data['current']:.1f}%, M·ª•c ti√™u: {data['target']:.1f}%")
                    print(f"     - R·ªßi ro: {risk_level}/5, L·ª£i nhu·∫≠n KV: {expected_return}%/nƒÉm")
                    
                    if abs(data['deviation']) > 5:
                        if fund_type == 'Qu·ªπ tr√°i phi·∫øu' and data['deviation'] < -5:
                            print(f"     - ‚ö†Ô∏è Thi·∫øu qu·ªπ an to√†n, c√≥ th·ªÉ tƒÉng r·ªßi ro danh m·ª•c")
                        elif fund_type == 'Qu·ªπ c·ªï phi·∫øu' and data['deviation'] > 5:
                            print(f"     - ‚ö†Ô∏è Qu√° nhi·ªÅu qu·ªπ r·ªßi ro cao, c·∫ßn c√¢n b·∫±ng")
                        elif fund_type == 'Qu·ªπ c√¢n b·∫±ng':
                            if data['deviation'] > 5:
                                print(f"     - üí° C√≥ th·ªÉ ph√¢n b·ªï sang c√°c qu·ªπ chuy√™n bi·ªát h∆°n")
                            else:
                                print(f"     - üí° C·∫ßn tƒÉng ƒë·ªÉ c√¢n b·∫±ng danh m·ª•c")
            
            # Timeline recommendation
            if critical_deviations > 0:
                print(f"\nüìÖ L·ªäCH TR√åNH ƒê·ªÄ XU·∫§T:")
                print(f"   ‚Ä¢ T√°i c√¢n b·∫±ng ngay: {critical_deviations} lo·∫°i t√†i s·∫£n c·∫ßn ƒëi·ªÅu ch·ªânh m·∫°nh")
                print(f"   ‚Ä¢ Theo d√µi h√†ng th√°ng: C√°c lo·∫°i t√†i s·∫£n kh√°c")
                print(f"   ‚Ä¢ ƒê√°nh gi√° l·∫°i m·ª•c ti√™u: Sau 3-6 th√°ng")

    def show_rebalance_recommendation(self, button):
        """ƒê∆∞a ra khuy·∫øn ngh·ªã c√¢n b·∫±ng l·∫°i danh m·ª•c"""
        if not self.investment_data or not self.target_allocation:
            with self.output:
                clear_output()
                print("‚ùå C·∫ßn c√≥ d·ªØ li·ªáu ƒë·∫ßu t∆∞ v√† t·ª∑ l·ªá ph√¢n b·ªï m·ª•c ti√™u!")
            return
        
        display_currency = self.currency_display.value
        
        with self.output:
            clear_output()
            
            # Calculate current allocation
            current_allocation = {}
            total_value = 0
            
            for inv in self.investment_data:
                inv_type = inv['type']
                amount = self.convert_currency(inv['amount'], inv['currency'], display_currency)
                current_allocation[inv_type] = current_allocation.get(inv_type, 0) + amount
                total_value += amount
            
            print("="*80)
            print("üîÑ KHUY·∫æN NGH·ªä C√ÇN B·∫∞NG L·∫†I DANH M·ª§C ƒê·∫¶U T∆Ø")
            print("="*80)
            print(f"üí∞ T·ªïng gi√° tr·ªã danh m·ª•c: {self.format_currency(total_value, display_currency)}")
            print("-"*80)
            
            # Calculate target values and recommendations
            recommendations = []
            
            for asset_type, target_pct in self.target_allocation.items():
                target_value = (target_pct / 100) * total_value
                current_value = current_allocation.get(asset_type, 0)
                difference = target_value - current_value
                
                recommendations.append({
                    'type': asset_type,
                    'current': current_value,
                    'target': target_value,
                    'difference': difference,
                    'action': 'Mua th√™m' if difference > 0 else 'B√°n b·ªõt'
                })
            
            # Sort by absolute difference
            recommendations.sort(key=lambda x: abs(x['difference']), reverse=True)
            
            # Create visualization
            fig, (ax1, ax2) = plt.subplots(1, 2, figsize=(16, 8))
            
            # Current vs Target values
            asset_types = [r['type'] for r in recommendations]
            current_values = [r['current'] for r in recommendations]
            target_values = [r['target'] for r in recommendations]
            
            x = np.arange(len(asset_types))
            width = 0.35
            
            ax1.bar(x - width/2, current_values, width, label='Hi·ªán t·∫°i', alpha=0.8)
            ax1.bar(x + width/2, target_values, width, label='M·ª•c ti√™u', alpha=0.8)
            ax1.set_title('Gi√° Tr·ªã Hi·ªán T·∫°i vs M·ª•c Ti√™u')
            ax1.set_ylabel(f'Gi√° tr·ªã ({display_currency})')
            ax1.set_xticks(x)
            ax1.set_xticklabels(asset_types, rotation=45)
            ax1.legend()
            
            # Rebalance actions
            differences = [r['difference'] for r in recommendations]
            colors = ['green' if x > 0 else 'red' for x in differences]
            
            ax2.barh(asset_types, differences, color=colors, alpha=0.7)
            ax2.set_title('H√†nh ƒê·ªông C·∫ßn Th·ª±c Hi·ªán')
            ax2.set_xlabel(f'S·ªë ti·ªÅn c·∫ßn ƒëi·ªÅu ch·ªânh ({display_currency})')
            ax2.axvline(x=0, color='black', linestyle='-', alpha=0.5)
            
            plt.tight_layout()
            plt.show()
            
            # Print detailed recommendations
            print("\nüéØ KHUY·∫æN NGH·ªä CHI TI·∫æT:")
            print("-"*80)
            
            total_buy = 0
            total_sell = 0
            
            for rec in recommendations:
                if abs(rec['difference']) < total_value * 0.01:  # Less than 1% of portfolio
                    continue
                
                print(f"\nüìä {rec['type']}:")
                print(f"   üí∞ Gi√° tr·ªã hi·ªán t·∫°i: {self.format_currency(rec['current'], display_currency)}")
                print(f"   üéØ Gi√° tr·ªã m·ª•c ti√™u:  {self.format_currency(rec['target'], display_currency)}")
                
                if rec['difference'] > 0:
                    print(f"   üü¢ {rec['action']}: {self.format_currency(rec['difference'], display_currency)}")
                    total_buy += rec['difference']
                    
                    # Suggest specific actions
                    if rec['type'] == 'C·ªï phi·∫øu':
                        print(f"      üí° G·ª£i √Ω: Mua th√™m c·ªï phi·∫øu blue-chip ho·∫∑c ETF")
                    elif rec['type'] == 'Qu·ªπ':
                        print(f"      üí° G·ª£i √Ω: ƒê·∫ßu t∆∞ th√™m v√†o qu·ªπ ƒëang c√≥ hi·ªáu su·∫•t t·ªët")
                    elif rec['type'] == 'Ti·ªÅn g·ª≠i':
                        print(f"      üí° G·ª£i √Ω: G·ª≠i ti·∫øt ki·ªám k·ª≥ h·∫°n c√≥ l√£i su·∫•t cao")
                else:
                    print(f"   üî¥ {rec['action']}: {self.format_currency(abs(rec['difference']), display_currency)}")
                    total_sell += abs(rec['difference'])
                    
                    # Suggest specific actions
                    if rec['type'] == 'C·ªï phi·∫øu':
                        print(f"      üí° G·ª£i √Ω: B√°n c·ªï phi·∫øu ƒë√£ l√£i ho·∫∑c c·∫Øt l·ªó")
                    elif rec['type'] == 'Qu·ªπ':
                        print(f"      üí° G·ª£i √Ω: R√∫t m·ªôt ph·∫ßn t·ª´ qu·ªπ c√≥ hi·ªáu su·∫•t th·∫•p")
            
            print("\n" + "="*80)
            print("üìã T·ªîNG K·∫æT H√ÄNH ƒê·ªòNG:")
            print(f"üü¢ T·ªïng s·ªë ti·ªÅn c·∫ßn mua th√™m: {self.format_currency(total_buy, display_currency)}")
            print(f"üî¥ T·ªïng s·ªë ti·ªÅn c·∫ßn b√°n b·ªõt:  {self.format_currency(total_sell, display_currency)}")
            
            if abs(total_buy - total_sell) < total_value * 0.001:
                print("‚úÖ Danh m·ª•c s·∫Ω ƒë∆∞·ª£c c√¢n b·∫±ng ho√†n h·∫£o!")
            else:
                net_cash_needed = total_buy - total_sell
                if net_cash_needed > 0:
                    print(f"üí∞ C·∫ßn th√™m ti·ªÅn m·∫∑t: {self.format_currency(net_cash_needed, display_currency)}")
                else:
                    print(f"üí∏ S·∫Ω c√≥ ti·ªÅn m·∫∑t d∆∞: {self.format_currency(abs(net_cash_needed), display_currency)}")
            
            # Timeline recommendation
            print("\n‚è∞ KHUY·∫æN NGH·ªä TH·ªúI GIAN:")
            print("   ‚Ä¢ Th·ª±c hi·ªán c√¢n b·∫±ng l·∫°i t·ª´ t·ª´ trong 2-4 tu·∫ßn")
            print("   ‚Ä¢ ∆Øu ti√™n ƒëi·ªÅu ch·ªânh c√°c t√†i s·∫£n c√≥ ƒë·ªô l·ªách l·ªõn nh·∫•t tr∆∞·ªõc")
            print("   ‚Ä¢ T·∫≠n d·ª•ng th·ªùi ƒëi·ªÉm th·ªã tr∆∞·ªùng bi·∫øn ƒë·ªông ƒë·ªÉ mua/b√°n")
            print("   ‚Ä¢ Xem x√©t chi ph√≠ giao d·ªãch khi th·ª±c hi·ªán")

    #------------------------------------------------------------------------------------------------------------------------------------------------------------------
    def show_performance_analysis(self, button):
        """Ph√¢n t√≠ch hi·ªáu su·∫•t danh m·ª•c ƒë·∫ßu t∆∞ - Phi√™n b·∫£n c·∫£i ti·∫øn v·ªõi t√≠nh to√°n annualized return ch√≠nh x√°c"""
        if not self.investment_data:
            with self.output:
                clear_output()
                print("‚ùå Ch∆∞a c√≥ d·ªØ li·ªáu ƒë·∫ßu t∆∞!")
            return
        
        display_currency = self.currency_display.value
        
        with self.output:
            clear_output()
            print("="*100)
            print("üìä PH√ÇN T√çCH HI·ªÜU SU·∫§T DANH M·ª§C CHI TI·∫æT")
            print("="*100)
            
            # Prepare data
            df = pd.DataFrame(self.investment_data)
            try:
                df['date'] = pd.to_datetime(df['date'], errors='coerce')
                df = df.dropna(subset=['date'])
                if df.empty:
                    print("‚ùå Kh√¥ng c√≥ d·ªØ li·ªáu h·ª£p l·ªá ƒë·ªÉ ph√¢n t√≠ch hi·ªáu su·∫•t!")
                    return
            except Exception as e:
                print(f"‚ö†Ô∏è L·ªói x·ª≠ l√Ω ng√†y th√°ng: {str(e)}")
                return
            
            df['amount_display'] = df.apply(
                lambda row: self.convert_currency(row['amount'], row['currency'], display_currency),
                axis=1
            )
            
            # T·∫°o unique identifier cho t·ª´ng kho·∫£n ƒë·∫ßu t∆∞
            df['investment_id'] = df['type'] + ' - ' + df['description']
            
            # Ph√¢n t√≠ch hi·ªáu su·∫•t t·ª´ng kho·∫£n ƒë·∫ßu t∆∞ ri√™ng l·∫ª
            individual_performance = {}
            group_performance = {}
            
            # Ng√†y hi·ªán t·∫°i ƒë·ªÉ t√≠nh to√°n
            current_date = datetime.now()
            
            # T√≠nh hi·ªáu su·∫•t cho t·ª´ng kho·∫£n ƒë·∫ßu t∆∞ ri√™ng l·∫ª
            for investment_id in df['investment_id'].unique():
                inv_data = df[df['investment_id'] == investment_id].copy()
                inv_data = inv_data.sort_values('date')
                
                # T√≠nh cumulative cash flow (d√≤ng ti·ªÅn t√≠ch l≈©y)
                inv_data['cumulative_cashflow'] = inv_data['amount_display'].cumsum()
                
                # T√≠nh hi·ªáu su·∫•t n·∫øu c√≥ ƒë·ªß d·ªØ li·ªáu
                if len(inv_data) > 0:
                    asset_type = inv_data['type'].iloc[0]
                    description = inv_data['description'].iloc[0]
                    
                    # T√≠nh t·ªïng mua, t·ªïng b√°n, v√† holding hi·ªán t·∫°i
                    total_bought = inv_data[inv_data['amount_display'] > 0]['amount_display'].sum()
                    total_sold = abs(inv_data[inv_data['amount_display'] < 0]['amount_display'].sum())
                    net_cashflow = total_bought - total_sold  # Ti·ªÅn c√≤n ƒë·∫ßu t∆∞ th·ª±c t·∫ø
                    current_holding_value = inv_data['cumulative_cashflow'].iloc[-1]  # Gi√° tr·ªã holding hi·ªán t·∫°i
                    
                    # L·∫•y gi√° hi·ªán t·∫°i n·∫øu c√≥ ƒë·ªÉ t√≠nh market value
                    current_price_info = self.current_prices.get(investment_id, None)
                    market_value = current_holding_value  # M·∫∑c ƒë·ªãnh b·∫±ng cost basis
                    
                    if current_price_info and current_holding_value != 0:
                        market_price_or_value = self.convert_currency(
                            current_price_info['price'], 
                            current_price_info['currency'], 
                            display_currency
                        )
                        
                        # Ki·ªÉm tra lo·∫°i gi√° ƒë∆∞·ª£c ch·ªâ ƒë·ªãnh
                        price_type = current_price_info.get('type', 'total_value')  # M·∫∑c ƒë·ªãnh l√† total value
                        
                        if price_type == 'total_value':
                            # ƒê√¢y l√† t·ªïng market value c·ªßa to√†n b·ªô holding
                            market_value = market_price_or_value
                        else:
                            # price_type == 'per_unit': ƒê√¢y l√† gi√° per unit
                            buy_transactions = inv_data[inv_data['amount_display'] > 0]
                            if len(buy_transactions) > 0:
                                # Estimate total quantity purchased
                                # Gi·∫£ ƒë·ªãnh: m·ªói giao d·ªãch mua 1 unit v·ªõi gi√° b·∫±ng amount
                                total_units_bought = len(buy_transactions)
                                
                                # Estimate sold units (n·∫øu c√≥)
                                sell_transactions = inv_data[inv_data['amount_display'] < 0]
                                total_units_sold = len(sell_transactions)
                                
                                # Current units holding
                                current_units = total_units_bought - total_units_sold
                                
                                if current_units > 0:
                                    market_value = current_units * market_price_or_value
                                else:
                                    market_value = 0
                            else:
                                # Fallback: treat as total market value
                                market_value = market_price_or_value
                    
                    # N·∫øu ƒë√£ b√°n h·∫øt (current_holding_value <= 0), t√≠nh d·ª±a tr√™n realized gain/loss
                    if current_holding_value <= 0:
                        # ƒê√£ b√°n h·∫øt, t√≠nh realized return
                        realized_gain = total_sold - total_bought
                        current_value = 0
                        absolute_gain = realized_gain
                    else:
                        # C√≤n ƒëang gi·ªØ, t√≠nh unrealized gain/loss
                        current_value = market_value
                        absolute_gain = current_value - current_holding_value
                    
                    # T√≠nh ROI d·ª±a tr√™n net investment
                    net_invested = abs(net_cashflow) if net_cashflow != 0 else total_bought
                    
                    # T√≠nh ROI
                    if net_invested > 0:
                        if current_holding_value <= 0:
                            # ƒê√£ b√°n h·∫øt - t√≠nh ROI d·ª±a tr√™n realized gain
                            roi = (absolute_gain / total_bought) * 100
                        else:
                            # C√≤n ƒëang gi·ªØ - t√≠nh ROI d·ª±a tr√™n unrealized gain
                            roi = (absolute_gain / abs(current_holding_value)) * 100
                    else:
                        roi = 0
                    
                    # ===== T√çNH ANNUALIZED RETURN C·∫¢I TI·∫æN =====
                    start_date = inv_data['date'].iloc[0]
                    
                    # N·∫øu c√≥ gi√° hi·ªán t·∫°i, s·ª≠ d·ª•ng ng√†y nh·∫≠p gi√° l√†m end_date
                    if current_price_info and 'date' in current_price_info:
                        try:
                            price_date = pd.to_datetime(current_price_info['date'], errors='coerce')
                            if pd.notna(price_date):
                                end_date = price_date
                            else:
                                end_date = current_date
                        except:
                            end_date = current_date
                    else:
                        # N·∫øu kh√¥ng c√≥ gi√° hi·ªán t·∫°i ho·∫∑c ƒë√£ b√°n h·∫øt, d√πng ng√†y giao d·ªãch cu·ªëi
                        if current_holding_value <= 0:
                            end_date = inv_data['date'].iloc[-1]  # Ng√†y b√°n cu·ªëi
                        else:
                            end_date = current_date  # Ng√†y hi·ªán t·∫°i cho kho·∫£n ƒëang gi·ªØ
                    
                    # T√≠nh s·ªë th√°ng ƒë·∫ßu t∆∞
                    total_months = max((end_date - start_date).days / 30.44, 1)  # 30.44 = s·ªë ng√†y trung b√¨nh 1 th√°ng
                    years = total_months / 12
                    
                    # T√≠nh annualized return d·ª±a tr√™n c√¥ng th·ª©c compound annual growth rate (CAGR)
                    if years > 0 and net_invested > 0:
                        if current_holding_value <= 0:
                            # ƒê√£ b√°n h·∫øt - t√≠nh CAGR d·ª±a tr√™n total return realized
                            initial_value = total_bought
                            final_value = total_sold
                        else:
                            # C√≤n ƒëang gi·ªØ - t√≠nh CAGR d·ª±a tr√™n current market value
                            initial_value = abs(current_holding_value)  # Cost basis
                            final_value = current_value  # Current market value
                        
                        if initial_value > 0 and final_value > 0:
                            # CAGR = (Final Value / Initial Value)^(1/years) - 1
                            annualized_return = (((final_value / initial_value) ** (1/years)) - 1) * 100
                        elif final_value == 0:
                            # M·∫•t h·∫øt v·ªën
                            annualized_return = -100
                        else:
                            annualized_return = 0
                    else:
                        annualized_return = 0
                    
                    # T√≠nh monthly return trung b√¨nh (ƒë·ªÉ tham kh·∫£o)
                    if total_months > 0 and net_invested > 0:
                        total_return_ratio = (absolute_gain / net_invested) if net_invested > 0 else 0
                        monthly_return_avg = (total_return_ratio / total_months) * 100
                        # ∆Ø·ªõc l∆∞·ª£ng annualized t·ª´ monthly (compound)
                        if monthly_return_avg != 0:
                            annualized_from_monthly = (((1 + monthly_return_avg/100) ** 12) - 1) * 100
                        else:
                            annualized_from_monthly = 0
                    else:
                        monthly_return_avg = 0
                        annualized_from_monthly = 0
                    
                    # Status c·ªßa investment
                    if current_holding_value <= 0:
                        status = "ƒê√£ b√°n"
                        display_current_value = 0
                    else:
                        status = "ƒêang gi·ªØ"
                        display_current_value = current_value
                    
                    individual_performance[investment_id] = {
                        'type': asset_type,
                        'description': description,
                        'total_bought': total_bought,
                        'total_sold': total_sold,
                        'net_cashflow': net_cashflow,
                        'current_holding_value': current_holding_value,
                        'market_value': market_value,
                        'current_value': display_current_value,
                        'absolute_gain': absolute_gain,
                        'roi_percent': roi,
                        'annualized_return': annualized_return,
                        'monthly_return_avg': monthly_return_avg,
                        'annualized_from_monthly': annualized_from_monthly,
                        'investment_period_years': years,
                        'investment_period_months': total_months,
                        'transactions': len(inv_data),
                        'first_date': start_date,
                        'last_date': end_date,
                        'status': status,
                        'has_current_price': current_price_info is not None,
                        'price_date': end_date if current_price_info else None
                    }
            
            # T√≠nh hi·ªáu su·∫•t trung b√¨nh cho t·ª´ng nh√≥m
            type_groups = {}
            for inv_id, perf in individual_performance.items():
                asset_type = perf['type']
                if asset_type not in type_groups:
                    type_groups[asset_type] = []
                type_groups[asset_type].append(perf)
            
            for asset_type, performances in type_groups.items():
                total_bought = sum(p['total_bought'] for p in performances)
                total_sold = sum(p['total_sold'] for p in performances)
                total_current = sum(p['current_value'] for p in performances)
                net_invested = total_bought - total_sold
                
                # Weighted average ROI v√† annualized return d·ª±a tr√™n investment amount
                weighted_roi = 0
                weighted_annualized = 0
                weighted_monthly = 0
                total_weight = 0
                
                for perf in performances:
                    # S·ª≠ d·ª•ng total_bought l√†m tr·ªçng s·ªë cho t√≠nh to√°n
                    weight = perf['total_bought']
                    if weight > 0:
                        weighted_roi += perf['roi_percent'] * weight
                        weighted_annualized += perf['annualized_return'] * weight
                        weighted_monthly += perf['monthly_return_avg'] * weight
                        total_weight += weight
                
                if total_weight > 0:
                    weighted_roi /= total_weight
                    weighted_annualized /= total_weight
                    weighted_monthly /= total_weight
                
                group_performance[asset_type] = {
                    'count': len(performances),
                    'total_bought': total_bought,
                    'total_sold': total_sold,
                    'net_invested': net_invested,
                    'total_current': total_current,
                    'total_gain': total_current - abs(net_invested) if net_invested != 0 else total_current - total_bought,
                    'weighted_roi': weighted_roi,
                    'weighted_annualized': weighted_annualized,
                    'weighted_monthly': weighted_monthly,
                    'best_performer': max(performances, key=lambda x: x['roi_percent']),
                    'worst_performer': min(performances, key=lambda x: x['roi_percent']),
                    'active_positions': len([p for p in performances if p['status'] == 'ƒêang gi·ªØ']),
                    'closed_positions': len([p for p in performances if p['status'] == 'ƒê√£ b√°n'])
                }
            
            # Create visualizations
            fig, ((ax1, ax2), (ax3, ax4)) = plt.subplots(2, 2, figsize=(20, 16))
            
            # 1. Individual Investment Performance
            if individual_performance:
                sorted_investments = sorted(individual_performance.items(), 
                                          key=lambda x: x[1]['roi_percent'], reverse=True)
                
                investment_names = [inv_id.split(' - ')[1][:15] + "..." if len(inv_id.split(' - ')[1]) > 15 
                                   else inv_id.split(' - ')[1] for inv_id, _ in sorted_investments]
                roi_values = [perf['roi_percent'] for _, perf in sorted_investments]
                colors = ['green' if roi > 0 else 'red' for roi in roi_values]
                
                bars = ax1.barh(investment_names, roi_values, color=colors, alpha=0.7)
                ax1.set_xlabel('ROI (%)')
                ax1.set_title('Hi·ªáu Su·∫•t T·ª´ng Kho·∫£n ƒê·∫ßu T∆∞ (ROI %)')
                ax1.grid(True, alpha=0.3)
                
                # Add value labels
                for i, v in enumerate(roi_values):
                    ax1.text(v + (1 if v >= 0 else -1), i, f'{v:.1f}%', 
                            va='center', ha='left' if v >= 0 else 'right')
            
            # 2. Group Performance Comparison
            if group_performance:
                groups = list(group_performance.keys())
                group_rois = [group_performance[g]['weighted_roi'] for g in groups]
                group_annualized = [group_performance[g]['weighted_annualized'] for g in groups]
                
                x = np.arange(len(groups))
                width = 0.35
                
                bars1 = ax2.bar(x - width/2, group_rois, width, label='ROI (%)', alpha=0.8, color='skyblue')
                bars2 = ax2.bar(x + width/2, group_annualized, width, label='Annualized (%)', alpha=0.8, color='lightcoral')
                
                ax2.set_xlabel('Lo·∫°i T√†i S·∫£n')
                ax2.set_ylabel('T·ª∑ l·ªá (%)')
                ax2.set_title('So S√°nh Hi·ªáu Su·∫•t Theo Nh√≥m T√†i S·∫£n')
                ax2.set_xticks(x)
                ax2.set_xticklabels(groups, rotation=45, ha='right')
                ax2.legend()
                ax2.grid(True, alpha=0.3)
                
                # Add value labels
                for bars in [bars1, bars2]:
                    for bar in bars:
                        height = bar.get_height()
                        ax2.text(bar.get_x() + bar.get_width()/2., height + 0.1,
                                f'{height:.1f}%', ha='center', va='bottom', fontsize=9)
            
            # 3. Investment Value Distribution
            if individual_performance:
                values = [perf['current_value'] for perf in individual_performance.values()]
                types = [perf['type'] for perf in individual_performance.values()]
                
                type_sums = {}
                for t, v in zip(types, values):
                    type_sums[t] = type_sums.get(t, 0) + v
                
                colors = plt.cm.Set3(np.linspace(0, 1, len(type_sums)))
                ax3.pie(type_sums.values(), labels=type_sums.keys(), autopct='%1.1f%%', 
                       colors=colors, startangle=90)
                ax3.set_title('Ph√¢n B·ªï Gi√° Tr·ªã Hi·ªán T·∫°i Theo Nh√≥m')
            
            # 4. Risk-Return Scatter Plot
            if individual_performance:
                returns = [perf['annualized_return'] for perf in individual_performance.values()]
                net_investments = [abs(perf['net_cashflow']) if perf['net_cashflow'] != 0 else perf['total_bought'] 
                                  for perf in individual_performance.values()]
                types = [perf['type'] for perf in individual_performance.values()]
                
                # Create color map for types
                unique_types = list(set(types))
                colors = plt.cm.tab10(np.linspace(0, 1, len(unique_types)))
                type_color_map = dict(zip(unique_types, colors))
                point_colors = [type_color_map[t] for t in types]
                
                scatter = ax4.scatter(net_investments, returns, c=point_colors, 
                                    s=[inv/max(net_investments)*300 + 50 for inv in net_investments], 
                                    alpha=0.6)
                
                ax4.set_xlabel(f'S·ªë Ti·ªÅn ƒê·∫ßu T∆∞ Th·ª±c ({display_currency})')
                ax4.set_ylabel('L·ª£i Nhu·∫≠n H√†ng NƒÉm (%)')
                ax4.set_title('Ma Tr·∫≠n R·ªßi Ro - L·ª£i Nhu·∫≠n')
                ax4.grid(True, alpha=0.3)
                
                # Add legend for types
                for i, asset_type in enumerate(unique_types):
                    ax4.scatter([], [], c=[colors[i]], label=asset_type, s=100)
                ax4.legend(bbox_to_anchor=(1.05, 1), loc='upper left')
            
            plt.tight_layout()
            plt.show()
            
            # Detailed performance report
            print(f"\n{'='*100}")
            print("üìä B√ÅO C√ÅO HI·ªÜU SU·∫§T CHI TI·∫æT T·ª™NG KHO·∫¢N ƒê·∫¶U T∆Ø")
            print(f"{'='*100}")
            
            # Individual investments report
            for asset_type, performances in type_groups.items():
                print(f"\nüèõÔ∏è  {asset_type.upper()}")
                print("-" * 110)
                print(f"{'M√£/T√™n':<25} {'Mua':<12} {'B√°n':<12} {'Hi·ªán t·∫°i':<12} {'L√£i/L·ªó':<10} {'ROI%':<8} {'Th√°ng%':<8} {'NƒÉm%':<8} {'Tr·∫°ng th√°i'}")
                print("-" * 110)
                
                for perf in sorted(performances, key=lambda x: x['roi_percent'], reverse=True):
                    gain_loss = f"{perf['absolute_gain']:+,.0f}"
                    status_icon = "üü¢" if perf['status'] == 'ƒêang gi·ªØ' else "üî¥"
                    
                    print(f"{perf['description'][:24]:<25} "
                          f"{self.format_currency(perf['total_bought'], display_currency):<12} "
                          f"{self.format_currency(perf['total_sold'], display_currency):<12} "
                          f"{self.format_currency(perf['current_value'], display_currency):<12} "
                          f"{gain_loss:<10} "
                          f"{perf['roi_percent']:>6.1f}% "
                          f"{perf['monthly_return_avg']:>6.1f}% "
                          f"{perf['annualized_return']:>6.1f}% "
                          f"{status_icon} {perf['status']}")
                    
                    # Th√™m th√¥ng tin chi ti·∫øt v·ªÅ th·ªùi gian ƒë·∫ßu t∆∞
                    period_info = f"K·ª≥ ƒë·∫ßu t∆∞: {perf['investment_period_months']:.1f} th√°ng"
                    if perf['price_date']:
                        price_date_str = perf['price_date'].strftime('%Y-%m-%d')
                        period_info += f" (ƒë·∫øn {price_date_str})"
                    
                    # Th√™m th√¥ng tin chi ti·∫øt cho c√°c kho·∫£n c√≥ nhi·ªÅu giao d·ªãch
                    if perf['transactions'] > 2:
                        price_info = self.current_prices.get(investment_id, {})
                        price_type_desc = ""
                        if price_info:
                            if price_info.get('type') == 'total_value':
                                price_type_desc = f"(Gi√° th·ªã tr∆∞·ªùng: {self.format_currency(price_info['price'], price_info['currency'])} - T·ªïng gi√° tr·ªã)"
                            else:
                                price_type_desc = f"(Gi√° th·ªã tr∆∞·ªùng: {self.format_currency(price_info['price'], price_info['currency'])} - Per unit)"
                        
                        print(f"{'  ‚îî‚îÄ ' + str(perf['transactions']) + ' giao d·ªãch':<25} "
                              f"{'Net cost: ' + self.format_currency(perf['net_cashflow'], display_currency):<25} "
                              f"{period_info}")
                        if price_type_desc:
                            print(f"{'    ' + price_type_desc}")
                    else:
                        print(f"{'  ‚îî‚îÄ ' + period_info}")
                        if perf['has_current_price']:
                            price_info = self.current_prices.get(investment_id, {})
                            if price_info.get('type') == 'total_value':
                                price_type_desc = "T·ªïng gi√° tr·ªã"
                            else:
                                price_type_desc = "Per unit"
                            print(f"{'    C√≥ gi√° th·ªã tr∆∞·ªùng':<50} ({price_type_desc})")
            
            # Group summary
            print(f"\n{'='*100}")
            print("üìà T·ªîNG K·∫æT HI·ªÜU SU·∫§T THEO NH√ìM")
            print(f"{'='*100}")
            print(f"{'Nh√≥m':<20} {'SL':<4} {'ƒêang gi·ªØ':<8} {'T·ªïng mua':<12} {'T·ªïng b√°n':<12} {'Hi·ªán t·∫°i':<12} {'ROI%':<8} {'Th√°ng%':<8} {'NƒÉm%':<8}")
            print("-" * 115)
            
            portfolio_total_bought = 0
            portfolio_total_sold = 0
            portfolio_total_current = 0
            
            for asset_type, group_data in group_performance.items():
                portfolio_total_bought += group_data['total_bought']
                portfolio_total_sold += group_data['total_sold']
                portfolio_total_current += group_data['total_current']
                
                print(f"{asset_type:<20} "
                      f"{group_data['count']:<4} "
                      f"{group_data['active_positions']:<8} "
                      f"{self.format_currency(group_data['total_bought'], display_currency):<12} "
                      f"{self.format_currency(group_data['total_sold'], display_currency):<12} "
                      f"{self.format_currency(group_data['total_current'], display_currency):<12} "
                      f"{group_data['weighted_roi']:>6.1f}% "
                      f"{group_data['weighted_monthly']:>6.1f}% "
                      f"{group_data['weighted_annualized']:>6.1f}%")
            
            print("-" * 115)
            portfolio_net_invested = portfolio_total_bought - portfolio_total_sold
            portfolio_total_gain = portfolio_total_current - abs(portfolio_net_invested)
            portfolio_roi = (portfolio_total_gain / portfolio_total_bought * 100) if portfolio_total_bought > 0 else 0
            
            print(f"{'T·ªîNG DANH M·ª§C':<20} "
                  f"{sum(len(performances) for performances in type_groups.values()):<4} "
                  f"{sum(g['active_positions'] for g in group_performance.values()):<8} "
                  f"{self.format_currency(portfolio_total_bought, display_currency):<12} "
                  f"{self.format_currency(portfolio_total_sold, display_currency):<12} "
                  f"{self.format_currency(portfolio_total_current, display_currency):<12} "
                  f"{portfolio_roi:>6.1f}% "
                  f"{'--':<8} "
                  f"{'--':<8}")
            
            # Performance insights
            print(f"\nüí° NH·∫¨N X√âT & KHUY·∫æN NGH·ªä:")
            
            if group_performance:
                best_group = max(group_performance.items(), key=lambda x: x[1]['weighted_roi'])
                worst_group = min(group_performance.items(), key=lambda x: x[1]['weighted_roi'])
                
                print(f"üèÜ Nh√≥m hi·ªáu su·∫•t t·ªët nh·∫•t: {best_group[0]} ({best_group[1]['weighted_roi']:.1f}% ROI, {best_group[1]['weighted_annualized']:.1f}% nƒÉm)")
                print(f"‚ö†Ô∏è  Nh√≥m c·∫ßn c·∫£i thi·ªán: {worst_group[0]} ({worst_group[1]['weighted_roi']:.1f}% ROI, {worst_group[1]['weighted_annualized']:.1f}% nƒÉm)")
                
                # Individual best/worst performers
                all_performances = []
                for performances in type_groups.values():
                    all_performances.extend(performances)
                
                if all_performances:
                    best_individual = max(all_performances, key=lambda x: x['roi_percent'])
                    worst_individual = min(all_performances, key=lambda x: x['roi_percent'])
                    
                    print(f"üåü Kho·∫£n ƒë·∫ßu t∆∞ t·ªët nh·∫•t: {best_individual['description']} ({best_individual['roi_percent']:.1f}% ROI, {best_individual['annualized_return']:.1f}% nƒÉm)")
                    print(f"üìâ Kho·∫£n c·∫ßn xem x√©t: {worst_individual['description']} ({worst_individual['roi_percent']:.1f}% ROI, {worst_individual['annualized_return']:.1f}% nƒÉm)")
            
            # Risk warnings
            high_risk_investments = [perf for perf in individual_performance.values() 
                                   if perf['roi_percent'] < -10]
            
            if high_risk_investments:
                print(f"\nüö® C·∫¢NH B√ÅO R·ª¶I RO:")
                print(f"   C√≥ {len(high_risk_investments)} kho·∫£n ƒë·∫ßu t∆∞ l·ªó tr√™n 10%:")
                for inv in high_risk_investments[:3]:  # Hi·ªÉn th·ªã top 3
                    print(f"   ‚Ä¢ {inv['description']}: {inv['roi_percent']:.1f}% ROI ({inv['annualized_return']:.1f}% nƒÉm)")
            
            # Diversification insights
            type_count = len(group_performance)
            if type_count < 3:
                print(f"\nüìä KHUY·∫æN NGH·ªä ƒêA D·∫†NG H√ìA:")
                print(f"   Danh m·ª•c ch·ªâ c√≥ {type_count} lo·∫°i t√†i s·∫£n. N√™n ƒëa d·∫°ng h√≥a th√™m ƒë·ªÉ gi·∫£m r·ªßi ro.")
            
            # Performance analysis insights
            print(f"\nüìà PH√ÇN T√çCH HI·ªÜU SU·∫§T:")
            if individual_performance:
                annualized_returns = [perf['annualized_return'] for perf in individual_performance.values()]
                avg_annualized = np.mean(annualized_returns)
                volatility = np.std(annualized_returns)
                
                print(f"   ‚Ä¢ L·ª£i nhu·∫≠n h√†ng nƒÉm trung b√¨nh: {avg_annualized:.1f}%")
                print(f"   ‚Ä¢ ƒê·ªô bi·∫øn ƒë·ªông danh m·ª•c: {volatility:.1f}%")
                
                # Sharpe ratio estimate (assuming risk-free rate = 3%)
                risk_free_rate = 3.0
                if volatility > 0:
                    sharpe_ratio = (avg_annualized - risk_free_rate) / volatility
                    print(f"   ‚Ä¢ Ch·ªâ s·ªë Sharpe ∆∞·ªõc t√≠nh: {sharpe_ratio:.2f} ({'T·ªët' if sharpe_ratio > 1 else 'Kh√°' if sharpe_ratio > 0.5 else 'C·∫ßn c·∫£i thi·ªán'})")
                
                # Time-weighted performance insights
                long_term_investments = [perf for perf in individual_performance.values() if perf['investment_period_months'] > 12]
                short_term_investments = [perf for perf in individual_performance.values() if perf['investment_period_months'] <= 12]
                
                if long_term_investments:
                    long_term_avg = np.mean([perf['annualized_return'] for perf in long_term_investments])
                    print(f"   ‚Ä¢ Hi·ªáu su·∫•t ƒë·∫ßu t∆∞ d√†i h·∫°n (>1 nƒÉm): {long_term_avg:.1f}%/nƒÉm ({len(long_term_investments)} kho·∫£n)")
                
                if short_term_investments:
                    short_term_avg = np.mean([perf['annualized_return'] for perf in short_term_investments])
                    print(f"   ‚Ä¢ Hi·ªáu su·∫•t ƒë·∫ßu t∆∞ ng·∫Øn h·∫°n (‚â§1 nƒÉm): {short_term_avg:.1f}%/nƒÉm ({len(short_term_investments)} kho·∫£n)")
            
            print(f"\n‚è∞ C·∫≠p nh·∫≠t l·∫ßn cu·ªëi: {datetime.now().strftime('%Y-%m-%d %H:%M:%S')}")
            print(f"üìù L∆∞u √Ω: Hi·ªáu su·∫•t ƒë∆∞·ª£c t√≠nh t·ª´ ng√†y ƒë·∫ßu t∆∞ ƒë·∫øn ng√†y c√≥ gi√° hi·ªán t·∫°i (ho·∫∑c ng√†y hi·ªán t·∫°i n·∫øu kh√¥ng c√≥ gi√°)")
    #------------------------------------------------------------------------------------------------------------------------------------------------------------------
    def show_risk_analysis(self, button):
        """Ph√¢n t√≠ch r·ªßi ro danh m·ª•c"""
        if not self.investment_data:
            with self.output:
                clear_output()
                print("‚ùå Ch∆∞a c√≥ d·ªØ li·ªáu ƒë·∫ßu t∆∞!")
            return
        
        display_currency = self.currency_display.value
        
        with self.output:
            clear_output()
            
            # Calculate risk metrics
            portfolio_summary = {}
            total_value = 0
            
            for inv in self.investment_data:
                inv_type = inv['type']
                amount = self.convert_currency(inv['amount'], inv['currency'], display_currency)
                portfolio_summary[inv_type] = portfolio_summary.get(inv_type, 0) + amount
                total_value += amount
            
            print("="*70)
            print("‚ö†Ô∏è PH√ÇN T√çCH R·ª¶I RO DANH M·ª§C ƒê·∫¶U T∆Ø")
            print("="*70)
            
            # Calculate portfolio risk score
            weighted_risk = 0
            for asset_type, value in portfolio_summary.items():
                weight = value / total_value
                # S·ª≠ d·ª•ng self.asset_risk_levels ƒë·ªÉ l·∫•y m·ª©c r·ªßi ro
                risk = self.asset_risk_levels.get(asset_type, {'risk': 3})['risk']
                weighted_risk += weight * risk
            
            print(f"üìä ƒêi·ªÉm r·ªßi ro danh m·ª•c: {weighted_risk:.2f}/5.0")
            
            # Risk assessment
            if weighted_risk <= 2.0:
                risk_level = "üü¢ Th·∫•p"
                risk_desc = "Danh m·ª•c b·∫£o th·ªß, √≠t bi·∫øn ƒë·ªông"
            elif weighted_risk <= 3.0:
                risk_level = "üü° V·ª´a ph·∫£i"
                risk_desc = "Danh m·ª•c c√¢n b·∫±ng, r·ªßi ro h·ª£p l√Ω"
            elif weighted_risk <= 4.0:
                risk_level = "üü† Cao"
                risk_desc = "Danh m·ª•c t√≠ch c·ª±c, bi·∫øn ƒë·ªông l·ªõn"
            else:
                risk_level = "üî¥ R·∫•t cao"
                risk_desc = "Danh m·ª•c m·∫°o hi·ªÉm, r·ªßi ro cao"
            
            print(f"üìà M·ª©c ƒë·ªô r·ªßi ro: {risk_level}")
            print(f"üí≠ ƒê√°nh gi√°: {risk_desc}")
            
            # Create risk visualization
            fig, ((ax1, ax2), (ax3, ax4)) = plt.subplots(2, 2, figsize=(16, 12))
            
            # 1. Risk distribution pie chart
            risk_data = {}
            for asset_type, value in portfolio_summary.items():
                risk = self.asset_risk_levels.get(asset_type, {'risk': 3})['risk']
                risk_label = f"R·ªßi ro {risk}/5"
                risk_data[risk_label] = risk_data.get(risk_label, 0) + value
            
            ax1.pie(risk_data.values(), labels=risk_data.keys(), autopct='%1.1f%%', startangle=90)
            ax1.set_title('Ph√¢n B·ªë R·ªßi Ro Danh M·ª•c')
            
            # 2. Asset allocation with risk colors
            asset_types = list(portfolio_summary.keys())
            asset_values = list(portfolio_summary.values())
            risk_colors = []
            
            for asset_type in asset_types:
                risk = self.asset_risk_levels.get(asset_type, {'risk': 3})['risk']
                if risk == 1:
                    risk_colors.append('green')
                elif risk == 2:
                    risk_colors.append('lightgreen')
                elif risk == 3:
                    risk_colors.append('yellow')
                elif risk == 4:
                    risk_colors.append('orange')
                else:
                    risk_colors.append('red')
            
            bars = ax2.bar(asset_types, asset_values, color=risk_colors, alpha=0.7)
            ax2.set_title('Ph√¢n B·ªï T√†i S·∫£n Theo M·ª©c R·ªßi Ro')
            ax2.set_ylabel(f'Gi√° tr·ªã ({display_currency})')
            ax2.tick_params(axis='x', rotation=45)
            
            # Add risk level labels
            for bar, asset_type in zip(bars, asset_types):
                risk = self.asset_risk_levels.get(asset_type, {'risk': 3})['risk']
                ax2.text(bar.get_x() + bar.get_width()/2., bar.get_height() + max(asset_values)*0.01,
                         f'R{risk}', ha='center', va='bottom', fontweight='bold')
            
            # 3. Risk concentration analysis
            risk_concentration = {}
            for asset_type, value in portfolio_summary.items():
                risk = self.asset_risk_levels.get(asset_type, {'risk': 3})['risk']
                risk_concentration[risk] = risk_concentration.get(risk, 0) + value
            
            risk_labels = [f'R·ªßi ro {r}' for r in sorted(risk_concentration.keys())]
            risk_values = [risk_concentration[r] for r in sorted(risk_concentration.keys())]
            
            ax3.barh(risk_labels, risk_values, color=['green', 'lightgreen', 'yellow', 'orange', 'red'][:len(risk_values)])
            ax3.set_title('T·∫≠p Trung R·ªßi Ro')
            ax3.set_xlabel(f'Gi√° tr·ªã ({display_currency})')
            
            # 4. Diversification score visualization
            num_assets = len(portfolio_summary)
            gini_coefficient = self.calculate_gini_coefficient(list(portfolio_summary.values()))
            
            diversification_metrics = {
                'S·ªë lo·∫°i t√†i s·∫£n': min(num_assets / 5 * 100, 100),
                'Ph√¢n b·ªï ƒë·ªÅu': (1 - gini_coefficient) * 100,
                'ƒêa d·∫°ng r·ªßi ro': min(len(set(self.asset_risk_levels.get(t, {'risk': 3})['risk'] for t in portfolio_summary.keys())) / 5 * 100, 100)
            }
            
            metrics = list(diversification_metrics.keys())
            scores = list(diversification_metrics.values())
            
            bars = ax4.barh(metrics, scores, color=['blue', 'green', 'purple'])
            ax4.set_title('ƒêi·ªÉm ƒêa D·∫°ng H√≥a')
            ax4.set_xlabel('ƒêi·ªÉm (%)')
            ax4.set_xlim(0, 100)
            
            # Add score labels
            for i, score in enumerate(scores):
                ax4.text(score + 2, i, f'{score:.1f}%', va='center')
            
            plt.tight_layout()
            plt.show()
            
            # Detailed risk analysis
            print(f"\nüìä PH√ÇN T√çCH CHI TI·∫æT:")
            print(f"{'Lo·∫°i t√†i s·∫£n':<20} {'Gi√° tr·ªã':<15} {'T·ª∑ tr·ªçng':<10} {'R·ªßi ro':<8} {'ƒê√°nh gi√°':<15}")
            print("-"*70)
            
            for asset_type, value in sorted(portfolio_summary.items(), key=lambda x: x[1], reverse=True):
                percentage = (value / total_value) * 100
                risk = self.asset_risk_levels.get(asset_type, {'risk': 3})['risk']
                
                if risk == 1:
                    risk_desc = "üü¢ R·∫•t th·∫•p"
                elif risk == 2:
                    risk_desc = "üü° Th·∫•p"
                elif risk == 3:
                    risk_desc = "üü† V·ª´a"
                elif risk == 4:
                    risk_desc = "üî¥ Cao"
                else:
                    risk_desc = "‚ö´ R·∫•t cao"
                
                print(f"{asset_type:<20} {self.format_currency(value, display_currency):<15} {percentage:>6.1f}% {risk:>5}/5 {risk_desc:<15}")
            
            # Risk recommendations
            print(f"\nüí° KHUY·∫æN NGH·ªä:")
            
            if weighted_risk < 2.5:
                print(" ‚Ä¢ Danh m·ª•c qu√° b·∫£o th·ªß - c√≥ th·ªÉ c√¢n nh·∫Øc tƒÉng t·ª∑ tr·ªçng t√†i s·∫£n r·ªßi ro cao h∆°n")
                print(" ‚Ä¢ Xem x√©t ƒë·∫ßu t∆∞ th√™m c·ªï phi·∫øu ho·∫∑c qu·ªπ tƒÉng tr∆∞·ªüng")
            elif weighted_risk > 3.5:
                print(" ‚Ä¢ Danh m·ª•c c√≥ r·ªßi ro cao - n√™n tƒÉng t·ª∑ tr·ªçng t√†i s·∫£n an to√†n")
                print(" ‚Ä¢ Xem x√©t tƒÉng ti·ªÅn g·ª≠i ho·∫∑c tr√°i phi·∫øu ch√≠nh ph·ªß")
            
            # Diversification recommendations
            if num_assets < 3:
                print(" ‚Ä¢ Danh m·ª•c ch∆∞a ƒë·ªß ƒëa d·∫°ng - n√™n ƒë·∫ßu t∆∞ th√™m c√°c lo·∫°i t√†i s·∫£n kh√°c")
            
            if gini_coefficient > 0.6:
                print(" ‚Ä¢ T√†i s·∫£n t·∫≠p trung qu√° nhi·ªÅu - n√™n ph√¢n b·ªï ƒë·ªÅu h∆°n")
            
            # Age-based recommendations
            print(f"\nüéØ KHUY·∫æN NGH·ªä THEO ƒê·ªò TU·ªîI:")
            print(" ‚Ä¢ 20-30 tu·ªïi: R·ªßi ro 3.5-4.5 (t√≠ch c·ª±c)")
            print(" ‚Ä¢ 30-50 tu·ªïi: R·ªßi ro 2.5-3.5 (c√¢n b·∫±ng)")
            print(" ‚Ä¢ 50+ tu·ªïi: R·ªßi ro 1.5-2.5 (b·∫£o th·ªß)")
    #------------------------------------------------------------------------------------------------------------------------------------------------------------
    def show_portfolio_overview(self, button):
        """Hi·ªÉn th·ªã t·ªïng quan danh m·ª•c ƒë·∫ßu t∆∞ - Phi√™n b·∫£n s·ª≠a l·ªói"""
        if not self.investment_data:
            with self.output:
                clear_output()
                print("‚ùå Ch∆∞a c√≥ d·ªØ li·ªáu ƒë·∫ßu t∆∞!")
            return
        
        display_currency = self.currency_display.value
        
        with self.output:
            clear_output()
            
            # Calculate portfolio summary
            portfolio_summary = {}
            total_value = 0
            
            # T·∫°o DataFrame ƒë·ªÉ x·ª≠ l√Ω cumulative values
            df = pd.DataFrame(self.investment_data)
            df['date'] = pd.to_datetime(df['date'])
            df['amount_display'] = df.apply(
                lambda row: self.convert_currency(row['amount'], row['currency'], display_currency),
                axis=1
            )
            df['investment_id'] = df['type'] + ' - ' + df['description']
            
            # T√≠nh gi√° tr·ªã hi·ªán t·∫°i cho m·ªói kho·∫£n ƒë·∫ßu t∆∞
            current_portfolio_values = {}
            for investment_id in df['investment_id'].unique():
                inv_data = df[df['investment_id'] == investment_id]
                cumulative_value = inv_data['amount_display'].sum()  # Net position
                if cumulative_value > 0:  # Ch·ªâ t√≠nh nh·ªØng kho·∫£n ƒëang n·∫Øm gi·ªØ
                    inv_type = inv_data['type'].iloc[0]
                    if inv_type not in current_portfolio_values:
                        current_portfolio_values[inv_type] = 0
                    current_portfolio_values[inv_type] += cumulative_value
                    total_value += cumulative_value
            
            # T√≠nh portfolio summary d·ª±a tr√™n current holdings
            for inv_type, current_value in current_portfolio_values.items():
                if inv_type not in portfolio_summary:
                    portfolio_summary[inv_type] = {
                        'current_value': 0,
                        'count': 0,
                        'assets': {}
                    }
                
                # ƒê·∫øm s·ªë assets ƒëang n·∫Øm gi·ªØ trong lo·∫°i n√†y
                active_assets = df[df['type'] == inv_type]['investment_id'].unique()
                for asset_id in active_assets:
                    asset_data = df[df['investment_id'] == asset_id]
                    net_position = asset_data['amount_display'].sum()
                    if net_position > 0:  # ƒêang n·∫Øm gi·ªØ
                        portfolio_summary[inv_type]['assets'][asset_id] = net_position
                        portfolio_summary[inv_type]['count'] += 1
                
                portfolio_summary[inv_type]['current_value'] = current_value
            
            print("="*70)
            print(f"üìä T·ªîNG QUAN DANH M·ª§C ƒê·∫¶U T∆Ø ({display_currency})")
            print("="*70)
            print(f"üí∞ T·ªïng gi√° tr·ªã hi·ªán t·∫°i: {self.format_currency(total_value, display_currency)}")
            print(f"üìà S·ªë lo·∫°i t√†i s·∫£n: {len(portfolio_summary)}")
            print(f"üè∑Ô∏è  T·ªïng s·ªë kho·∫£n ƒëang n·∫Øm gi·ªØ: {sum(data['count'] for data in portfolio_summary.values())}")
            print(f"üìä T·ªïng s·ªë giao d·ªãch: {len(self.investment_data)}")
            print("-"*70)
            
            # Create visualization
            fig, ((ax1, ax2), (ax3, ax4)) = plt.subplots(2, 2, figsize=(18, 14))
            
            # 1. Pie chart - Portfolio allocation by type
            if portfolio_summary:
                types = list(portfolio_summary.keys())
                values = [portfolio_summary[t]['current_value'] for t in types]
                colors = plt.cm.Set3(np.linspace(0, 1, len(types)))
                
                wedges, texts, autotexts = ax1.pie(values, labels=types, autopct='%1.1f%%', 
                                                  colors=colors, startangle=90)
                ax1.set_title('Ph√¢n B·ªï Danh M·ª•c Theo Lo·∫°i T√†i S·∫£n (Hi·ªán T·∫°i)')
                
                # 2. Bar chart - Investment amounts by type
                bars = ax2.bar(types, values, color=colors)
                ax2.set_title('Gi√° Tr·ªã Hi·ªán T·∫°i Theo Lo·∫°i')
                ax2.set_ylabel(f'Gi√° tr·ªã ({display_currency})')
                ax2.tick_params(axis='x', rotation=45)
                
                # Add value labels on bars
                for bar, v in zip(bars, values):
                    height = bar.get_height()
                    ax2.text(bar.get_x() + bar.get_width()/2., height + max(values)*0.01, 
                            self.format_currency(v, display_currency), ha='center', va='bottom', fontsize=9)
            
            # 3. Timeline of cumulative investments (fixed stacked area chart)
            # T√≠nh cumulative holdings theo th·ªùi gian (ch·ªâ positive values)
            df_sorted = df.sort_values('date')
            
            # T·∫°o cumulative timeline cho m·ªói lo·∫°i t√†i s·∫£n
            timeline_data = {}
            
            for inv_type in df['type'].unique():
                type_data = df_sorted[df_sorted['type'] == inv_type].copy()
                type_data['cumulative'] = type_data['amount_display'].cumsum()
                
                # Resample theo th√°ng v√† l·∫•y gi√° tr·ªã cu·ªëi th√°ng
                type_data.set_index('date', inplace=True)
                monthly_data = type_data['cumulative'].resample('M').last().fillna(method='ffill')
                
                # Ch·ªâ gi·ªØ c√°c gi√° tr·ªã d∆∞∆°ng (ƒëang n·∫Øm gi·ªØ)
                monthly_data = monthly_data.clip(lower=0)
                timeline_data[inv_type] = monthly_data
            
            # T·∫°o DataFrame cho timeline
            if timeline_data:
                timeline_df = pd.DataFrame(timeline_data).fillna(0)
                
                if not timeline_df.empty and len(timeline_df) > 1:
                    # V·∫Ω area chart v·ªõi gi√° tr·ªã ƒë√£ ƒë∆∞·ª£c x·ª≠ l√Ω
                    timeline_df.plot(kind='area', stacked=True, ax=ax3, alpha=0.7, 
                                   colormap='Set3')
                    ax3.set_title('Xu H∆∞·ªõng T√≠ch L≈©y ƒê·∫ßu T∆∞ Theo Th·ªùi Gian')
                    ax3.set_ylabel(f'Gi√° tr·ªã t√≠ch l≈©y ({display_currency})')
                    ax3.legend(bbox_to_anchor=(1.05, 1), loc='upper left', fontsize=9)
                    ax3.grid(True, alpha=0.3)
                    
                    # Format x-axis
                    ax3.tick_params(axis='x', rotation=45)
                else:
                    ax3.text(0.5, 0.5, 'Ch∆∞a ƒë·ªß d·ªØ li·ªáu\nƒë·ªÉ hi·ªÉn th·ªã xu h∆∞·ªõng', 
                            ha='center', va='center', transform=ax3.transAxes, fontsize=12)
                    ax3.set_title('Xu H∆∞·ªõng T√≠ch L≈©y ƒê·∫ßu T∆∞ Theo Th·ªùi Gian')
            
            # 4. Top investments by current value
            all_assets = {}
            for inv_type in portfolio_summary:
                for asset, value in portfolio_summary[inv_type]['assets'].items():
                    if value > 0:  # Ch·ªâ hi·ªÉn th·ªã nh·ªØng kho·∫£n ƒëang n·∫Øm gi·ªØ
                        all_assets[asset] = value
            
            top_assets = sorted(all_assets.items(), key=lambda x: x[1], reverse=True)[:10]
            
            if top_assets:
                asset_names = [asset[0].split(' - ')[1][:25] + '...' if len(asset[0].split(' - ')[1]) > 25 
                              else asset[0].split(' - ')[1] for asset in top_assets]
                asset_values = [asset[1] for asset in top_assets]
                
                colors_bar = plt.cm.viridis(np.linspace(0, 1, len(asset_names)))
                bars = ax4.barh(asset_names, asset_values, color=colors_bar)
                ax4.set_title('Top 10 Kho·∫£n ƒê·∫ßu T∆∞ ƒêang N·∫Øm Gi·ªØ')
                ax4.set_xlabel(f'Gi√° tr·ªã ({display_currency})')
                
                # Add value labels
                for bar, v in zip(bars, asset_values):
                    width = bar.get_width()
                    ax4.text(width + max(asset_values)*0.01, bar.get_y() + bar.get_height()/2,
                            self.format_currency(v, display_currency), ha='left', va='center', fontsize=8)
            else:
                ax4.text(0.5, 0.5, 'Kh√¥ng c√≥ d·ªØ li·ªáu\nƒë·ªÉ hi·ªÉn th·ªã', 
                        ha='center', va='center', transform=ax4.transAxes, fontsize=12)
                ax4.set_title('Top 10 Kho·∫£n ƒê·∫ßu T∆∞ ƒêang N·∫Øm Gi·ªØ')
            
            plt.tight_layout()
            plt.show()
            
            # Print detailed breakdown
            print("\nüìã CHI TI·∫æT THEO LO·∫†I T√ÄI S·∫¢N (ƒêang n·∫Øm gi·ªØ):")
            
            for inv_type, data in portfolio_summary.items():
                if data['current_value'] > 0:
                    percentage = (data['current_value'] / total_value) * 100
                    print(f"\nüèõÔ∏è  {inv_type}")
                    print(f"   üí∞ Gi√° tr·ªã hi·ªán t·∫°i: {self.format_currency(data['current_value'], display_currency)} ({percentage:.1f}%)")
                    print(f"   üìä S·ªë kho·∫£n ƒëang n·∫Øm gi·ªØ: {data['count']}")
                    
                    # Th√¥ng tin r·ªßi ro cho lo·∫°i t√†i s·∫£n n√†y
                    risk_info = self.asset_risk_levels.get(inv_type, {})
                    if risk_info:
                        print(f"   ‚ö†Ô∏è  M·ª©c r·ªßi ro: {risk_info.get('risk', 'N/A')}/5")
                        print(f"   üìà L·ª£i nhu·∫≠n k·ª≥ v·ªçng: {risk_info.get('expected_return', 'N/A')}%/nƒÉm")
                    
                    # Top assets trong lo·∫°i n√†y
                    sorted_assets = sorted(data['assets'].items(), key=lambda x: x[1], reverse=True)[:5]
                    if sorted_assets:
                        print(f"   üîù Top kho·∫£n ƒë·∫ßu t∆∞:")
                        for i, (asset, value) in enumerate(sorted_assets, 1):
                            asset_name = asset.split(' - ')[1]
                            asset_pct = (value / data['current_value']) * 100
                            print(f"      {i}. {asset_name}: {self.format_currency(value, display_currency)} ({asset_pct:.1f}%)")
            
            # Portfolio statistics
            print(f"\nüìä TH·ªêNG K√ä DANH M·ª§C:")
            
            # T√≠nh Gini coefficient cho portfolio diversity
            if portfolio_summary:
                values_list = [data['current_value'] for data in portfolio_summary.values()]
                gini_coef = self.calculate_gini_coefficient(values_list)
                
                print(f"   üìà H·ªá s·ªë ƒëa d·∫°ng Gini: {gini_coef:.3f} (0 = ho√†n to√†n ƒë·ªÅu, 1 = t·∫≠p trung ho√†n to√†n)")
                
                if gini_coef < 0.3:
                    diversity_status = "üü¢ ƒêa d·∫°ng t·ªët"
                elif gini_coef < 0.6:
                    diversity_status = "üü° ƒêa d·∫°ng trung b√¨nh"
                else:
                    diversity_status = "üî¥ Qu√° t·∫≠p trung"
                
                print(f"   üéØ ƒê√°nh gi√° ƒëa d·∫°ng: {diversity_status}")
                
                # Risk assessment
                weighted_risk = sum(
                    data['current_value'] * self.asset_risk_levels.get(inv_type, {}).get('risk', 3)
                    for inv_type, data in portfolio_summary.items()
                ) / total_value if total_value > 0 else 0
                
                print(f"   ‚ö†Ô∏è  ƒêi·ªÉm r·ªßi ro trung b√¨nh: {weighted_risk:.2f}/5")
                
                if weighted_risk <= 2.5:
                    risk_status = "üü¢ B·∫£o th·ªß"
                elif weighted_risk <= 3.5:
                    risk_status = "üü° C√¢n b·∫±ng"
                else:
                    risk_status = "üî¥ T√≠ch c·ª±c"
                
                print(f"   üé≠ Profile r·ªßi ro: {risk_status}")
            
            # Recommendations
            print(f"\nüí° KHUY·∫æN NGH·ªä:")
            
            if len(portfolio_summary) < 3:
                print("   üîπ N√™n ƒëa d·∫°ng h√≥a th√™m c√°c lo·∫°i t√†i s·∫£n ƒë·ªÉ gi·∫£m r·ªßi ro")
            
            # Check if any single investment takes up too much
            if all_assets:
                max_single_investment = max(all_assets.values())
                max_percentage = (max_single_investment / total_value) * 100
                if max_percentage > 20:
                    max_asset_name = [k for k, v in all_assets.items() if v == max_single_investment][0]
                    print(f"   ‚ö†Ô∏è  Kho·∫£n ƒë·∫ßu t∆∞ '{max_asset_name.split(' - ')[1]}' chi·∫øm {max_percentage:.1f}% - c√¢n nh·∫Øc gi·∫£m t·ª∑ tr·ªçng")
            
            # Risk-based recommendations
            if portfolio_summary:
                high_risk_pct = sum(
                    (data['current_value'] / total_value) * 100 
                    for inv_type, data in portfolio_summary.items() 
                    if self.asset_risk_levels.get(inv_type, {}).get('risk', 3) >= 4
                )
                
                if high_risk_pct > 50:
                    print(f"   üî¥ T√†i s·∫£n r·ªßi ro cao chi·∫øm {high_risk_pct:.1f}% - c√¢n nh·∫Øc c√¢n b·∫±ng v·ªõi t√†i s·∫£n an to√†n h∆°n")
                elif high_risk_pct < 10:
                    print(f"   üü¢ Danh m·ª•c kh√° b·∫£o th·ªß ({high_risk_pct:.1f}% r·ªßi ro cao) - c√≥ th·ªÉ tƒÉng t·ª∑ tr·ªçng t√†i s·∫£n tƒÉng tr∆∞·ªüng")
            
            print(f"\n‚è∞ C·∫≠p nh·∫≠t: {datetime.now().strftime('%Y-%m-%d %H:%M:%S')}")

    #------------------------------------------------------------------------------------------------------------------------------------------------------------
    def show_trend_analysis(self, button):
        """Ph√¢n t√≠ch xu h∆∞·ªõng ƒë·∫ßu t∆∞ theo th·ªùi gian, x·ª≠ l√Ω giao d·ªãch b√°n (gi√° tr·ªã √¢m)"""
        if not self.investment_data:
            with self.output:
                clear_output()
                print("‚ùå Ch∆∞a c√≥ d·ªØ li·ªáu ƒë·∫ßu t∆∞!")
            return
        
        display_currency = self.currency_display.value
        
        with self.output:
            clear_output()
            print("="*80)
            print("üìà PH√ÇN T√çCH XU H∆Ø·ªöNG ƒê·∫¶U T∆Ø")
            print("="*80)
            
            # Prepare data
            df = pd.DataFrame(self.investment_data)
            try:
                df['date'] = pd.to_datetime(df['date'], errors='coerce')
                df = df.dropna(subset=['date'])
                if df.empty:
                    print("‚ùå Kh√¥ng c√≥ d·ªØ li·ªáu h·ª£p l·ªá ƒë·ªÉ ph√¢n t√≠ch xu h∆∞·ªõng!")
                    return
            except Exception as e:
                print(f"‚ö†Ô∏è L·ªói x·ª≠ l√Ω ng√†y th√°ng: {str(e)}")
                return
            
            df['amount_display'] = df.apply(
                lambda row: self.convert_currency(row['amount'], row['currency'], display_currency),
                axis=1
            )
            
            # Create visualizations
            fig, ((ax1, ax2), (ax3, ax4)) = plt.subplots(2, 2, figsize=(16, 12))
            
            # 1. Total portfolio value over time (weekly)
            weekly_value = df.groupby(df['date'].dt.to_period('W'))['amount_display'].sum()
            if not weekly_value.empty:
                weekly_value.index = weekly_value.index.to_timestamp()
                ax1.plot(weekly_value.index, weekly_value.values, marker='o', color='blue')
                ax1.set_title('T·ªïng Gi√° Tr·ªã Danh M·ª•c (Theo Tu·∫ßn)')
                ax1.set_ylabel(f'S·ªë ti·ªÅn ({display_currency})')
                ax1.tick_params(axis='x', rotation=45)
                ax1.grid(True, linestyle='--', alpha=0.7)
            else:
                ax1.text(0.5, 0.5, 'Kh√¥ng c√≥ d·ªØ li·ªáu ƒë·ªÉ hi·ªÉn th·ªã', ha='center', va='center', fontsize=12)
                ax1.set_title('T·ªïng Gi√° Tr·ªã Danh M·ª•c (Theo Tu·∫ßn)')
            
            # 2. Investment trend by asset type (weekly) - Handle sales (negative values)
            # Calculate cumulative sum to reflect net value after sales
            df['cumsum'] = df.groupby(['type'])['amount_display'].cumsum()
            type_trend = df.groupby([df['date'].dt.to_period('W'), 'type'])['cumsum'].last().unstack(fill_value=0)
            # Ensure all values are non-negative for stacked area plot
            type_trend = type_trend.clip(lower=0)
            if not type_trend.empty:
                type_trend.index = type_trend.index.to_timestamp()
                type_trend.plot(kind='area', stacked=True, ax=ax2, alpha=0.7)
                ax2.set_title('Xu H∆∞·ªõng Gi√° Tr·ªã T√≠ch L≈©y Theo Lo·∫°i T√†i S·∫£n (Theo Tu·∫ßn)')
                ax2.set_ylabel(f'S·ªë ti·ªÅn ({display_currency})')
                ax2.tick_params(axis='x', rotation=45)
                ax2.grid(True, linestyle='--', alpha=0.7)
            else:
                ax2.text(0.5, 0.5, 'Kh√¥ng c√≥ d·ªØ li·ªáu ƒë·ªÉ hi·ªÉn th·ªã', ha='center', va='center', fontsize=12)
                ax2.set_title('Xu H∆∞·ªõng Gi√° Tr·ªã T√≠ch L≈©y Theo Lo·∫°i T√†i S·∫£n (Theo Tu·∫ßn)')
            
            # 3. Cumulative investment over time
            for asset_type in df['type'].unique():
                type_data = df[df['type'] == asset_type][['date', 'cumsum']].sort_values('date')
                if not type_data.empty:
                    ax3.plot(type_data['date'], type_data['cumsum'], label=asset_type)
            ax3.set_title('T√≠ch L≈©y ƒê·∫ßu T∆∞ Theo Lo·∫°i T√†i S·∫£n')
            ax3.set_ylabel(f'S·ªë ti·ªÅn t√≠ch l≈©y ({display_currency})')
            ax3.tick_params(axis='x', rotation=45)
            ax3.legend()
            ax3.grid(True, linestyle='--', alpha=0.7)
            
            # 4. Investment frequency
            monthly_counts = df.groupby(df['date'].dt.to_period('M'))['type'].count()
            if not monthly_counts.empty:
                monthly_counts.index = monthly_counts.index.to_timestamp()
                ax4.bar(monthly_counts.index, monthly_counts.values, color='purple', alpha=0.7)
                ax4.set_title('T·∫ßn Su·∫•t ƒê·∫ßu T∆∞ (Theo Th√°ng)')
                ax4.set_ylabel('S·ªë l∆∞·ª£ng giao d·ªãch')
                ax4.tick_params(axis='x', rotation=45)
                ax4.grid(True, linestyle='--', alpha=0.7)
            else:
                ax4.text(0.5, 0.5, 'Kh√¥ng c√≥ d·ªØ li·ªáu ƒë·ªÉ hi·ªÉn th·ªã', ha='center', va='center', fontsize=12)
                ax4.set_title('T·∫ßn Su·∫•t ƒê·∫ßu T∆∞ (Theo Th√°ng)')
            
            plt.tight_layout()
            plt.show()
            
            # Detailed trend analysis
            print("\nüìä PH√ÇN T√çCH CHI TI·∫æT:")
            print(f"{'Th·ªùi gian':<15} {'Lo·∫°i t√†i s·∫£n':<20} {'S·ªë ti·ªÅn t√≠ch l≈©y':<15} {'T·ª∑ tr·ªçng':<10}")
            print("-"*60)
            
            for period, group in df.groupby(df['date'].dt.to_period('W')):
                total_period = group['cumsum'].iloc[-1] if not group.empty else 0
                if total_period == 0:
                    continue
                for _, row in group.iterrows():
                    percentage = (row['cumsum'] / total_period) * 100 if total_period != 0 else 0
                    print(f"{str(period):<15} {row['type']:<20} {self.format_currency(row['cumsum'], display_currency):<15} {percentage:>6.1f}%")
            
            # Trend insights
            print("\nüí° NH·∫¨N X√âT:")
            if not weekly_value.empty:
                growth = ((weekly_value.iloc[-1] - weekly_value.iloc[0]) / weekly_value.iloc[0] * 100) if weekly_value.iloc[0] != 0 else 0
                print(f" ‚Ä¢ TƒÉng tr∆∞·ªüng danh m·ª•c: {growth:.1f}% t·ª´ {weekly_value.index[0].strftime('%Y-%m-%d')} ƒë·∫øn {weekly_value.index[-1].strftime('%Y-%m-%d')}")
            
            if not type_trend.empty:
                dominant_asset = type_trend.iloc[-1].idxmax() if type_trend.iloc[-1].sum() > 0 else "Kh√¥ng x√°c ƒë·ªãnh"
                print(f" ‚Ä¢ Lo·∫°i t√†i s·∫£n chi·∫øm ∆∞u th·∫ø g·∫ßn ƒë√¢y: {dominant_asset}")
            
            if not monthly_counts.empty:
                avg_transactions = monthly_counts.mean()
                print(f" ‚Ä¢ S·ªë giao d·ªãch trung b√¨nh m·ªói th√°ng: {avg_transactions:.1f}")


            
    def show_diversification_analysis(self, button):
        """Ph√¢n t√≠ch ƒëa d·∫°ng h√≥a danh m·ª•c"""
        if not self.investment_data:
            with self.output:
                clear_output()
                print("‚ùå Ch∆∞a c√≥ d·ªØ li·ªáu ƒë·∫ßu t∆∞!")
            return
        
        display_currency = self.currency_display.value
        
        with self.output:
            clear_output()
            
            print("="*70)
            print("üåê PH√ÇN T√çCH ƒêA D·∫†NG H√ìA DANH M·ª§C")
            print("="*70)
            
            # Calculate diversification metrics
            portfolio_summary = {}
            asset_details = {}
            total_value = 0
            
            for inv in self.investment_data:
                inv_type = inv['type']
                asset_key = f"{inv['type']} - {inv['description']}"
                amount = self.convert_currency(inv['amount'], inv['currency'], display_currency)
                
                portfolio_summary[inv_type] = portfolio_summary.get(inv_type, 0) + amount
                asset_details[asset_key] = asset_details.get(asset_key, 0) + amount
                total_value += amount
            
            # Diversification scores
            num_asset_types = len(portfolio_summary)
            num_individual_assets = len(asset_details)
            
            # Calculate Herfindahl Index (concentration measure)
            type_weights = [(value/total_value)**2 for value in portfolio_summary.values()]
            herfindahl_types = sum(type_weights)
            
            asset_weights = [(value/total_value)**2 for value in asset_details.values()]
            herfindahl_assets = sum(asset_weights)
            
            # Diversification scores (lower HHI = better diversification)
            type_diversification = (1 - herfindahl_types) * 100
            asset_diversification = (1 - herfindahl_assets) * 100
            
            # Create diversification visualizations
            fig, ((ax1, ax2), (ax3, ax4)) = plt.subplots(2, 2, figsize=(16, 12))
            
            # 1. Asset type concentration
            types = list(portfolio_summary.keys())
            type_values = list(portfolio_summary.values())
            type_percentages = [(v/total_value)*100 for v in type_values]
            
            colors = plt.cm.Set3(np.linspace(0, 1, len(types)))
            ax1.pie(type_values, labels=types, autopct='%1.1f%%', colors=colors, startangle=90)
            ax1.set_title('ƒêa D·∫°ng H√≥a Theo Lo·∫°i T√†i S·∫£n')
            
            # 2. Individual asset concentration (top 10)
            sorted_assets = sorted(asset_details.items(), key=lambda x: x[1], reverse=True)[:10]
            asset_names = [asset[0].split(' - ')[1][:15] + '...' if len(asset[0].split(' - ')[1]) > 15 
                          else asset[0].split(' - ')[1] for asset in sorted_assets]
            asset_amounts = [asset[1] for asset in sorted_assets]
            
            ax2.barh(asset_names, asset_amounts, color=plt.cm.viridis(np.linspace(0, 1, len(asset_names))))
            ax2.set_title('Top 10 T√†i S·∫£n C√° Bi·ªát')
            ax2.set_xlabel(f'Gi√° tr·ªã ({display_currency})')
            
            # 3. Diversification scores
            diversification_metrics = {
                'S·ªë lo·∫°i t√†i s·∫£n': min(num_asset_types * 20, 100),  # Max 5 types = 100%
                'Ph√¢n b·ªï lo·∫°i TS': type_diversification,
                'S·ªë t√†i s·∫£n c√° bi·ªát': min(num_individual_assets * 5, 100),  # Max 20 assets = 100%
                'Ph√¢n b·ªï c√° bi·ªát': asset_diversification,
                'T·ªïng th·ªÉ': (type_diversification + asset_diversification + 
                            min(num_asset_types * 20, 100) + min(num_individual_assets * 5, 100)) / 4
            }
            
            metrics = list(diversification_metrics.keys())
            scores = list(diversification_metrics.values())
            
            bars = ax3.barh(metrics, scores, color=['blue', 'green', 'orange', 'red', 'purple'])
            ax3.set_title('ƒêi·ªÉm S·ªë ƒêa D·∫°ng H√≥a')
            ax3.set_xlabel('ƒêi·ªÉm (%)')
            ax3.set_xlim(0, 100)
            
            # Add score labels and color coding
            for i, (bar, score) in enumerate(zip(bars, scores)):
                if score >= 80:
                    color = 'green'
                    status = '‚úÖ'
                elif score >= 60:
                    color = 'orange'
                    status = 'üü°'
                else:
                    color = 'red'
                    status = 'üî¥'
                
                ax3.text(score + 2, i, f'{status} {score:.1f}%', va='center', color=color, fontweight='bold')
            
            # 4. Concentration risk analysis
            # Calculate what percentage is held in top assets
            sorted_asset_values = sorted(asset_details.values(), reverse=True)
            top_1_concentration = (sorted_asset_values[0] / total_value * 100) if len(sorted_asset_values) >= 1 else 0
            top_3_concentration = (sum(sorted_asset_values[:3]) / total_value * 100) if len(sorted_asset_values) >= 3 else top_1_concentration
            top_5_concentration = (sum(sorted_asset_values[:5]) / total_value * 100) if len(sorted_asset_values) >= 5 else top_3_concentration
            
            concentration_data = {
                'Top 1 t√†i s·∫£n': top_1_concentration,
                'Top 3 t√†i s·∫£n': top_3_concentration,
                'Top 5 t√†i s·∫£n': top_5_concentration,
                'C√≤n l·∫°i': 100 - top_5_concentration
            }
            
            ax4.pie(concentration_data.values(), labels=concentration_data.keys(), 
                   autopct='%1.1f%%', startangle=90)
            ax4.set_title('T·∫≠p Trung R·ªßi Ro')
            
            plt.tight_layout()
            plt.show()
            
            # Print detailed analysis
            print(f"üìä ƒêI·ªÇM S·ªê ƒêA D·∫†NG H√ìA T·ªîNG TH·ªÇ: {diversification_metrics['T·ªïng th·ªÉ']:.1f}/100")
            
            if diversification_metrics['T·ªïng th·ªÉ'] >= 80:
                overall_rating = "üü¢ Xu·∫•t s·∫Øc"
            elif diversification_metrics['T·ªïng th·ªÉ'] >= 60:
                overall_rating = "üü° T·ªët"
            elif diversification_metrics['T·ªïng th·ªÉ'] >= 40:
                overall_rating = "üü† Trung b√¨nh"
            else:
                overall_rating = "üî¥ C·∫ßn c·∫£i thi·ªán"
            
            print(f"üèÜ ƒê√°nh gi√°: {overall_rating}")
            print("-"*70)
            
            print(f"üìà Chi ti·∫øt ph√¢n t√≠ch:")
            print(f"   üè∑Ô∏è  S·ªë lo·∫°i t√†i s·∫£n: {num_asset_types}")
            print(f"   üéØ S·ªë t√†i s·∫£n c√° bi·ªát: {num_individual_assets}")
            print(f"   üìä Herfindahl Index (lo·∫°i): {herfindahl_types:.3f}")
            print(f"   üìä Herfindahl Index (c√° bi·ªát): {herfindahl_assets:.3f}")
            
            print(f"\nüéØ PH√ÇN B·ªî THEO LO·∫†I T√ÄI S·∫¢N:")
            for inv_type, value in sorted(portfolio_summary.items(), key=lambda x: x[1], reverse=True):
                percentage = (value / total_value) * 100
                if percentage > 40:
                    status = "üî¥ Qu√° t·∫≠p trung"
                elif percentage > 25:
                    status = "üü† T·∫≠p trung cao"
                elif percentage > 10:
                    status = "üü° H·ª£p l√Ω"
                else:
                    status = "üü¢ C√¢n b·∫±ng"
                
                print(f"   ‚Ä¢ {inv_type:<20}: {percentage:>6.1f}% {status}")
            
            print(f"\n‚ö†Ô∏è  PH√ÇN T√çCH R·ª¶I RO T·∫¨P TRUNG:")
            print(f"   ‚Ä¢ T√†i s·∫£n l·ªõn nh·∫•t chi·∫øm: {top_1_concentration:.1f}%")
            print(f"   ‚Ä¢ Top 3 t√†i s·∫£n chi·∫øm: {top_3_concentration:.1f}%")
            print(f"   ‚Ä¢ Top 5 t√†i s·∫£n chi·∫øm: {top_5_concentration:.1f}%")
            
            # Risk assessment
            if top_1_concentration > 50:
                print("   üî¥ R·ªßi ro t·∫≠p trung r·∫•t cao - m·ªôt t√†i s·∫£n chi·∫øm qu√° 50%")
            elif top_1_concentration > 30:
                print("   üü† R·ªßi ro t·∫≠p trung cao - n√™n gi·∫£m t·ª∑ tr·ªçng t√†i s·∫£n l·ªõn nh·∫•t")
            elif top_3_concentration > 70:
                print("   üü° C√≥ m·ªôt √≠t t·∫≠p trung ·ªü top 3 t√†i s·∫£n")
            else:
                print("   üü¢ Ph√¢n b·ªï t∆∞∆°ng ƒë·ªëi c√¢n b·∫±ng")
            
            # Recommendations
            print(f"\nüí° KHUY·∫æN NGH·ªä TƒÇNG C∆Ø·ªúNG ƒêA D·∫†NG H√ìA:")
            
            if num_asset_types < 4:
                print("   üìä Th√™m c√°c lo·∫°i t√†i s·∫£n m·ªõi (c·ªï phi·∫øu, qu·ªπ, v√†ng, b·∫•t ƒë·ªông s·∫£n)")
            
            if num_individual_assets < 10:
                print("   üéØ TƒÉng s·ªë l∆∞·ª£ng t√†i s·∫£n c√° bi·ªát trong m·ªói lo·∫°i")
            
            if top_1_concentration > 25:
                largest_asset = max(asset_details, key=asset_details.get)
                print(f"   ‚öñÔ∏è  Gi·∫£m t·ª∑ tr·ªçng '{largest_asset.split(' - ')[1]}' xu·ªëng d∆∞·ªõi 25%")
            
            if type_diversification < 60:
                print("   üåê C√¢n b·∫±ng l·∫°i t·ª∑ tr·ªçng gi·ªØa c√°c lo·∫°i t√†i s·∫£n")
            
            # Geographic diversification suggestion
            print(f"\nüåç KHUY·∫æN NGH·ªä ƒêA D·∫†NG H√ìA ƒê·ªäA L√ù:")
            print("   ‚Ä¢ Xem x√©t ƒë·∫ßu t∆∞ c·∫£ trong n∆∞·ªõc v√† qu·ªëc t·∫ø")
            print("   ‚Ä¢ ƒêa d·∫°ng h√≥a theo th·ªã tr∆∞·ªùng (Vi·ªát Nam, H√†n Qu·ªëc, M·ªπ, ch√¢u √Çu)")
            print("   ‚Ä¢ C√¢n nh·∫Øc ETF to√†n c·∫ßu ƒë·ªÉ tƒÉng ƒëa d·∫°ng h√≥a")
    
    def export_investment_report(self, button):
        """Xu·∫•t b√°o c√°o ƒë·∫ßu t∆∞ chi ti·∫øt"""
        if not self.investment_data:
            with self.output:
                clear_output()
                print("‚ùå Ch∆∞a c√≥ d·ªØ li·ªáu ƒë·ªÉ xu·∫•t b√°o c√°o!")
            return
        
        try:
            filename = f'BaoCaoPhongMucDauTu_{datetime.now().strftime("%Y%m%d_%H%M%S")}.xlsx'
            
            with pd.ExcelWriter(filename) as writer:
                # Sheet 1: Raw investment data
                df_raw = pd.DataFrame(self.investment_data)
                df_raw['amount_vnd'] = df_raw.apply(
                    lambda row: self.convert_currency(row['amount'], row['currency'], 'VND'), axis=1
                )
                df_raw['amount_krw'] = df_raw.apply(
                    lambda row: self.convert_currency(row['amount'], row['currency'], 'KRW'), axis=1
                )
                df_raw.to_excel(writer, sheet_name='D·ªØ li·ªáu G·ªëc', index=False)
                
                # Sheet 2: Portfolio summary
                portfolio_summary = {}
                for inv in self.investment_data:
                    inv_type = inv['type']
                    amount_vnd = self.convert_currency(inv['amount'], inv['currency'], 'VND')
                    amount_krw = self.convert_currency(inv['amount'], inv['currency'], 'KRW')
                    
                    if inv_type not in portfolio_summary:
                        portfolio_summary[inv_type] = {'vnd': 0, 'krw': 0, 'count': 0}
                    
                    portfolio_summary[inv_type]['vnd'] += amount_vnd
                    portfolio_summary[inv_type]['krw'] += amount_krw
                    portfolio_summary[inv_type]['count'] += 1
                
                summary_df = pd.DataFrame([
                    {
                        'Lo·∫°i t√†i s·∫£n': inv_type,
                        'Gi√° tr·ªã VND': data['vnd'],
                        'Gi√° tr·ªã KRW': data['krw'],
                        'S·ªë giao d·ªãch': data['count'],
                        'T·ª∑ tr·ªçng (%)': (data['vnd'] / sum(d['vnd'] for d in portfolio_summary.values())) * 100
                    } for inv_type, data in portfolio_summary.items()
                ])
                summary_df.to_excel(writer, sheet_name='T·ªïng h·ª£p Danh m·ª•c', index=False)
                
                # Sheet 3: Target allocation vs Current
                if self.target_allocation:
                    allocation_data = []
                    total_value = sum(data['vnd'] for data in portfolio_summary.values())
                    
                    all_types = set(list(portfolio_summary.keys()) + list(self.target_allocation.keys()))
                    for asset_type in all_types:
                        current_value = portfolio_summary.get(asset_type, {}).get('vnd', 0)
                        current_pct = (current_value / total_value * 100) if total_value > 0 else 0
                        target_pct = self.target_allocation.get(asset_type, 0)
                        deviation = current_pct - target_pct
                        
                        allocation_data.append({
                            'Lo·∫°i t√†i s·∫£n': asset_type,
                            'Hi·ªán t·∫°i (%)': current_pct,
                            'M·ª•c ti√™u (%)': target_pct,
                            'ƒê·ªô l·ªách (%)': deviation,
                            'Gi√° tr·ªã hi·ªán t·∫°i (VND)': current_value,
                            'Gi√° tr·ªã m·ª•c ti√™u (VND)': (target_pct / 100) * total_value,
                            'C·∫ßn ƒëi·ªÅu ch·ªânh (VND)': ((target_pct / 100) * total_value) - current_value
                        })
                    
                    allocation_df = pd.DataFrame(allocation_data)
                    allocation_df.to_excel(writer, sheet_name='Ph√¢n t√≠ch Ph√¢n b·ªï', index=False)
                
                # Sheet 4: Performance metrics
                df_perf = pd.DataFrame(self.investment_data)
                df_perf['date'] = pd.to_datetime(df_perf['date'])
                df_perf = df_perf.sort_values('date')
                df_perf['amount_vnd'] = df_perf.apply(
                    lambda row: self.convert_currency(row['amount'], row['currency'], 'VND'), axis=1
                )
                df_perf['cumulative_vnd'] = df_perf['amount_vnd'].cumsum()
                
                # Monthly summary
                monthly_perf = df_perf.groupby(df_perf['date'].dt.to_period('M')).agg({
                    'amount_vnd': ['sum', 'count', 'mean'],
                    'type': lambda x: ', '.join(x.unique())
                }).round(0)
                
                monthly_perf.columns = ['T·ªïng ƒë·∫ßu t∆∞ (VND)', 'S·ªë giao d·ªãch', 'TB/giao d·ªãch (VND)', 'Lo·∫°i t√†i s·∫£n']
                monthly_perf.to_excel(writer, sheet_name='Hi·ªáu su·∫•t H√†ng th√°ng')
                
                # Sheet 5: Current prices (if any)
                if self.current_prices:
                    prices_data = []
                    for asset_key, price_info in self.current_prices.items():
                        prices_data.append({
                            'T√†i s·∫£n': asset_key,
                            'Gi√° hi·ªán t·∫°i': price_info['price'],
                            'ƒê∆°n v·ªã': price_info['currency'],
                            'Ng√†y c·∫≠p nh·∫≠t': price_info['date'],
                            'Gi√° quy ƒë·ªïi VND': self.convert_currency(price_info['price'], price_info['currency'], 'VND'),
                            'Gi√° quy ƒë·ªïi KRW': self.convert_currency(price_info['price'], price_info['currency'], 'KRW')
                        })
                    
                    prices_df = pd.DataFrame(prices_data)
                    prices_df.to_excel(writer, sheet_name='Gi√° Hi·ªán t·∫°i', index=False)
                
                # Sheet 6: Settings
                settings_data = [{
                    'Tham s·ªë': 'T·ª∑ gi√° KRW/VND',
                    'Gi√° tr·ªã': self.exchange_rate,
                    'ƒê∆°n v·ªã': 'VND per KRW',
                    'Ng√†y c·∫≠p nh·∫≠t': datetime.now().date()
                }]
                
                if self.target_allocation:
                    for asset_type, target_pct in self.target_allocation.items():
                        settings_data.append({
                            'Tham s·ªë': f'T·ª∑ l·ªá m·ª•c ti√™u - {asset_type}',
                            'Gi√° tr·ªã': target_pct,
                            'ƒê∆°n v·ªã': '%',
                            'Ng√†y c·∫≠p nh·∫≠t': datetime.now().date()
                        })
                
                settings_df = pd.DataFrame(settings_data)
                settings_df.to_excel(writer, sheet_name='C√†i ƒë·∫∑t', index=False)
            
            with self.output:
                clear_output()
                print(f"‚úÖ ƒê√£ xu·∫•t b√°o c√°o ƒë·∫ßu t∆∞ chi ti·∫øt: {filename}")
                print("üìä File bao g·ªìm c√°c sheet:")
                print("   ‚Ä¢ D·ªØ li·ªáu G·ªëc - T·∫•t c·∫£ giao d·ªãch ƒë·∫ßu t∆∞")
                print("   ‚Ä¢ T·ªïng h·ª£p Danh m·ª•c - Ph√¢n b·ªï theo lo·∫°i t√†i s·∫£n")
                if self.target_allocation:
                    print("   ‚Ä¢ Ph√¢n t√≠ch Ph√¢n b·ªï - So s√°nh v·ªõi m·ª•c ti√™u")
                print("   ‚Ä¢ Hi·ªáu su·∫•t H√†ng th√°ng - Th·ªëng k√™ theo th√°ng")
                if self.current_prices:
                    print("   ‚Ä¢ Gi√° Hi·ªán t·∫°i - Gi√° t√†i s·∫£n c·∫≠p nh·∫≠t")
                print("   ‚Ä¢ C√†i ƒë·∫∑t - T·ª∑ gi√° v√† m·ª•c ti√™u ph√¢n b·ªï")
                
        except Exception as e:
            with self.output:
                clear_output()
                print(f"‚ùå L·ªói khi xu·∫•t b√°o c√°o: {str(e)}")
    

def create_investment_analyzer():
    analyzer = InvestmentPortfolioAnalyzer()
    return analyzer.display()

# H∆∞·ªõng d·∫´n s·ª≠ d·ª•ng
def show_usage_guide():
    """
    Hi·ªÉn th·ªã h∆∞·ªõng d·∫´n s·ª≠ d·ª•ng ·ª©ng d·ª•ng
    """
    guide = """
    üìñ H∆Ø·ªöNG D·∫™N S·ª¨ D·ª§NG ·ª®NG D·ª§NG PH√ÇN T√çCH DANH M·ª§C ƒê·∫¶U T∆Ø
    
    üîß B∆Ø·ªöC 1: C√ÄI ƒê·∫∂T BAN ƒê·∫¶U
    ‚îú‚îÄ‚îÄ C·∫≠p nh·∫≠t t·ª∑ gi√° KRW/VND hi·ªán t·∫°i
    ‚îú‚îÄ‚îÄ Import d·ªØ li·ªáu t·ª´ file finance_data_savings.csv
    ‚îî‚îÄ‚îÄ Thi·∫øt l·∫≠p t·ª∑ l·ªá ph√¢n b·ªï m·ª•c ti√™u cho t·ª´ng lo·∫°i t√†i s·∫£n
    
    üí∞ B∆Ø·ªöC 2: C·∫¨P NH·∫¨T GI√Å T√ÄI S·∫¢N (t√πy ch·ªçn)
    ‚îú‚îÄ‚îÄ Ch·ªçn t√†i s·∫£n t·ª´ dropdown
    ‚îú‚îÄ‚îÄ Nh·∫≠p gi√° hi·ªán t·∫°i v√† ƒë∆°n v·ªã ti·ªÅn t·ªá
    ‚îî‚îÄ‚îÄ C·∫≠p nh·∫≠t ƒë·ªÉ ph√¢n t√≠ch hi·ªáu su·∫•t ch√≠nh x√°c
    
    üìä B∆Ø·ªöC 3: PH√ÇN T√çCH DANH M·ª§C
    ‚îú‚îÄ‚îÄ T·ªïng quan Danh m·ª•c - Xem ph√¢n b·ªï t·ªïng th·ªÉ
    ‚îú‚îÄ‚îÄ Hi·ªáu su·∫•t ƒê·∫ßu t∆∞ - Ph√¢n t√≠ch xu h∆∞·ªõng ƒë·∫ßu t∆∞
    ‚îú‚îÄ‚îÄ Ph√¢n t√≠ch Ph√¢n b·ªï - So s√°nh v·ªõi m·ª•c ti√™u
    ‚îú‚îÄ‚îÄ Khuy·∫øn ngh·ªã C√¢n b·∫±ng - H√†nh ƒë·ªông c·∫ßn th·ª±c hi·ªán
    ‚îî‚îÄ‚îÄ Ph√¢n t√≠ch R·ªßi ro - ƒê√°nh gi√° m·ª©c ƒë·ªô r·ªßi ro
    
    üî¨ B∆Ø·ªöC 4: PH√ÇN T√çCH N√ÇNG CAO
    ‚îú‚îÄ‚îÄ Xu h∆∞·ªõng ƒê·∫ßu t∆∞ - Ph√¢n t√≠ch theo th·ªùi gian
    ‚îú‚îÄ‚îÄ ƒêa d·∫°ng h√≥a - ƒê√°nh gi√° m·ª©c ƒë·ªô ƒëa d·∫°ng
    ‚îî‚îÄ‚îÄ T·ªïng T√†i s·∫£n - Quy ƒë·ªïi ti·ªÅn t·ªá
    
    üìÑ B∆Ø·ªöC 5: XU·∫§T B√ÅO C√ÅO
    ‚îî‚îÄ‚îÄ Xu·∫•t file Excel chi ti·∫øt v·ªõi t·∫•t c·∫£ ph√¢n t√≠ch
    
    üíæ L∆ØU √ù:
    ‚Ä¢ D·ªØ li·ªáu s·∫Ω ƒë∆∞·ª£c l∆∞u t·ª± ƒë·ªông v√†o c√°c file CSV
    ‚Ä¢ C√≥ th·ªÉ import d·ªØ li·ªáu t·ª´ ·ª©ng d·ª•ng finance tracker
    ‚Ä¢ H·ªó tr·ª£ ƒë·∫ßy ƒë·ªß VND v√† KRW v·ªõi t·ª∑ gi√° linh ho·∫°t
    """
    
    print(guide)

# Ch·∫°y ·ª©ng d·ª•ng
investment_app = create_investment_analyzer()
display(investment_app)
