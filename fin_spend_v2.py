import pandas as pd
import matplotlib.pyplot as plt
import seaborn as sns
import numpy as np
from datetime import datetime, date, timedelta
import ipywidgets as widgets
from IPython.display import display, clear_output
import warnings
warnings.filterwarnings('ignore')

# Thi·∫øt l·∫≠p style
plt.style.use('default')
sns.set_palette("husl")
plt.rcParams['font.size'] = 10
plt.rcParams['figure.figsize'] = (12, 8)

class InvestmentPortfolioAnalyzer:
    def __init__(self):
        # Kh·ªüi t·∫°o d·ªØ li·ªáu
        self.investment_data = []
        self.current_prices = {}
        self.target_allocation = {}
        self.exchange_rate = 18.0  # KRW to VND
        
        # Mapping t·ª´ savings type sang investment category - C·∫¨P NH·∫¨T CHI TI·∫æT H·ªÜ TH·ªêNG QU·ª∏
        self.investment_mapping = {
            'ƒê·∫ßu t∆∞ ch·ª©ng kho√°n': 'C·ªï phi·∫øu',
            'Qu·ªπ ƒë·∫ßu t∆∞': 'Qu·ªπ c√¢n b·∫±ng',  # Qu·ªπ ƒë·∫ßu t∆∞ c√¢n b·∫±ng
            'Qu·ªπ ƒë·∫ßu t∆∞ c√¢n b·∫±ng': 'Qu·ªπ c√¢n b·∫±ng',
            'Qu·ªπ tr√°i phi·∫øu': 'Qu·ªπ tr√°i phi·∫øu',  # Qu·ªπ ƒë·∫ßu t∆∞ tr√°i phi·∫øu
            'Qu·ªπ ƒë·∫ßu t∆∞ tr√°i phi·∫øu': 'Qu·ªπ tr√°i phi·∫øu',
            'Qu·ªπ c·ªï phi·∫øu': 'Qu·ªπ c·ªï phi·∫øu',  # Qu·ªπ ƒë·∫ßu t∆∞ c·ªï phi·∫øu
            'Qu·ªπ ƒë·∫ßu t∆∞ c·ªï phi·∫øu': 'Qu·ªπ c·ªï phi·∫øu',
            'Ti·∫øt ki·ªám ng√¢n h√†ng': 'Ti·ªÅn g·ª≠i',
            'V√†ng': 'V√†ng',
            'B·∫•t ƒë·ªông s·∫£n': 'B·∫•t ƒë·ªông s·∫£n',
            'Crypto': 'Crypto',
            'Kh√°c': 'Kh√°c'
        }
        
        # C·∫¨P NH·∫¨T R·ª¶I RO V√Ä L·ª¢I NHU·∫¨N THEO LO·∫†I QU·ª∏
        self.asset_risk_levels = {
            'Ti·ªÅn g·ª≠i': {'risk': 1, 'expected_return': 6.0, 'volatility': 0.5},
            'Qu·ªπ tr√°i phi·∫øu': {'risk': 2, 'expected_return': 8.0, 'volatility': 3.0},  # Th·∫•p nh·∫•t trong c√°c qu·ªπ
            'V√†ng': {'risk': 2, 'expected_return': 7.5, 'volatility': 12.0},
            'Qu·ªπ c√¢n b·∫±ng': {'risk': 3, 'expected_return': 10.0, 'volatility': 8.0},  # C√¢n b·∫±ng r·ªßi ro/l·ª£i nhu·∫≠n
            'B·∫•t ƒë·ªông s·∫£n': {'risk': 3, 'expected_return': 12.0, 'volatility': 15.0},
            'Qu·ªπ c·ªï phi·∫øu': {'risk': 4, 'expected_return': 15.0, 'volatility': 18.0},  # Cao nh·∫•t trong c√°c qu·ªπ
            'C·ªï phi·∫øu': {'risk': 4, 'expected_return': 16.0, 'volatility': 20.0},
            'Crypto': {'risk': 5, 'expected_return': 25.0, 'volatility': 35.0},
            'Kh√°c': {'risk': 3, 'expected_return': 10.0, 'volatility': 10.0}
        }
        
        # File paths
        self.data_files = {
            'savings': 'finance_data_savings.csv',
            'investment_prices': 'investment_current_prices.csv',
            'target_allocation': 'target_allocation.csv',
            'settings': 'investment_settings.csv'
        }
        
        # T·∫°o widgets
        self.create_widgets()
        
        # Load data
        self.load_data()
        
        # Create layout
        self.create_layout()


def create_widgets(self):
        # Header
        self.title = widgets.HTML(
            value="<h2 style='text-align: center; color: #2E86AB;'>üìà PH√ÇN T√çCH DANH M·ª§C ƒê·∫¶U T∆Ø - PHI√äN B·∫¢N QU·ª∏ N√ÇNG CAO</h2>"
        )
        
        # Settings Section
        self.settings_header = widgets.HTML(
            value="<h3 style='color: #17A2B8;'>‚öôÔ∏è C√ÄI ƒê·∫∂T</h3>"
        )
        self.exchange_rate_input = widgets.FloatText(
            value=18.0,
            description="T·ª∑ gi√° (1 KRW =):",
            style={'description_width': 'initial'},
            layout={'width': '200px'}
        )
        self.exchange_rate_unit = widgets.HTML(value="<span style='margin-left: 5px;'>VND</span>")
        self.update_exchange_btn = widgets.Button(
            description="C·∫≠p nh·∫≠t T·ª∑ gi√°",
            button_style='info',
            icon='refresh'
        )
        
        self.currency_display = widgets.Dropdown(
            options=[('VND', 'VND'), ('KRW', 'KRW')],
            value='VND',
            description="Hi·ªÉn th·ªã:",
            style={'description_width': 'initial'}
        )
        
        # Data Import Section
        self.import_header = widgets.HTML(
            value="<h3 style='color: #28A745;'>üìÇ IMPORT D·ªÆ LI·ªÜU</h3>"
        )
        self.import_file_path = widgets.Text(
            value='finance_data_savings.csv',
            placeholder='Nh·∫≠p ƒë∆∞·ªùng d·∫´n file CSV...',
            description="File CSV:",
            style={'description_width': 'initial'},
            layout={'width': '400px'}
        )
        self.import_data_btn = widgets.Button(
            description="Import D·ªØ li·ªáu ƒê·∫ßu t∆∞",
            button_style='success',
            icon='upload'
        )
        
        # Current Price Management
        self.price_header = widgets.HTML(
            value="<h3 style='color: #FF6B35;'>üí∞ C·∫¨P NH·∫¨T GI√Å HI·ªÜN T·∫†I</h3>"
        )
        self.asset_dropdown = widgets.Dropdown(
            options=[('-- Ch·ªçn t√†i s·∫£n --', '')],
            description="T√†i s·∫£n:",
            style={'description_width': 'initial'},
            layout={'width': '300px'}
        )
        self.current_price_input = widgets.FloatText(
            value=0.0,
            description="Gi√° hi·ªán t·∫°i:",
            style={'description_width': 'initial'}
        )
        self.price_currency = widgets.Dropdown(
            options=[('VND', 'VND'), ('KRW', 'KRW')],
            value='VND',
            description="ƒê∆°n v·ªã:",
            style={'description_width': 'initial'}
        )
        self.price_date = widgets.DatePicker(
            description="Ng√†y:",
            value=date.today(),
            style={'description_width': 'initial'}
        )
        self.update_price_btn = widgets.Button(
            description="C·∫≠p nh·∫≠t Gi√°",
            button_style='warning',
            icon='edit'
        )
        
        # Target Allocation Management - C·∫¨P NH·∫¨T DANH S√ÅCH LO·∫†I T√ÄI S·∫¢N
        self.allocation_header = widgets.HTML(
            value="<h3 style='color: #6F42C1;'>üéØ PH√ÇN B·ªî M·ª§C TI√äU</h3>"
        )
        self.allocation_type = widgets.Dropdown(
            options=[
                'C·ªï phi·∫øu', 
                'Qu·ªπ c·ªï phi·∫øu',      # R·ªßi ro cao, l·ª£i nhu·∫≠n cao
                'Qu·ªπ c√¢n b·∫±ng',      # R·ªßi ro trung b√¨nh
                'Qu·ªπ tr√°i phi·∫øu',    # R·ªßi ro th·∫•p, l·ª£i nhu·∫≠n th·∫•p
                'Ti·ªÅn g·ª≠i', 
                'V√†ng', 
                'B·∫•t ƒë·ªông s·∫£n', 
                'Crypto', 
                'Kh√°c'
            ],
            description="Lo·∫°i t√†i s·∫£n:",
            style={'description_width': 'initial'}
        )
        self.target_percent = widgets.FloatText(
            value=0.0,
            description="T·ª∑ l·ªá m·ª•c ti√™u (%):",
            style={'description_width': 'initial'}
        )
        self.set_allocation_btn = widgets.Button(
            description="Thi·∫øt l·∫≠p T·ª∑ l·ªá",
            button_style='info',
            icon='target'
        )
        self.clear_allocation_btn = widgets.Button(
            description="X√≥a T·∫•t c·∫£",
            button_style='danger',
            icon='trash'
        )
        
        # Analysis Buttons
        self.analysis_header = widgets.HTML(
            value="<h3 style='color: #DC3545;'>üìä PH√ÇN T√çCH DANH M·ª§C</h3>"
        )
        self.show_portfolio_overview_btn = widgets.Button(
            description="T·ªïng quan Danh m·ª•c",
            button_style='info',
            icon='chart-pie'
        )
        self.show_performance_btn = widgets.Button(
            description="Hi·ªáu su·∫•t ƒê·∫ßu t∆∞",
            button_style='success',
            icon='chart-line'
        )
        self.show_allocation_analysis_btn = widgets.Button(
            description="Ph√¢n t√≠ch Ph√¢n b·ªï",
            button_style='warning',
            icon='balance-scale'
        )
        self.show_rebalance_recommendation_btn = widgets.Button(
            description="Khuy·∫øn ngh·ªã C√¢n b·∫±ng",
            button_style='primary',
            icon='sync-alt'
        )
        self.show_risk_analysis_btn = widgets.Button(
            description="Ph√¢n t√≠ch R·ªßi ro",
            button_style='danger',
            icon='exclamation-triangle'
        )
        
        # TH√äM BUTTON PH√ÇN T√çCH QU·ª∏ ƒê·∫¶U T∆Ø
        self.show_fund_analysis_btn = widgets.Button(
            description="Ph√¢n t√≠ch Qu·ªπ ƒê·∫ßu t∆∞",
            button_style='info',
            icon='chart-bar',
            tooltip="Ph√¢n t√≠ch chi ti·∫øt 3 lo·∫°i qu·ªπ: Tr√°i phi·∫øu, C√¢n b·∫±ng, C·ªï phi·∫øu"
        )
        
        # Advanced Analysis
        self.advanced_header = widgets.HTML(
            value="<h3 style='color: #17A2B8;'>üî¨ PH√ÇN T√çCH N√ÇNG CAO</h3>"
        )
        self.time_period = widgets.Dropdown(
            options=[('3 th√°ng', 90), ('6 th√°ng', 180), ('1 nƒÉm', 365), ('2 nƒÉm', 730)],
            value=365,
            description="Th·ªùi gian:",
            style={'description_width': 'initial'}
        )
        self.show_trend_analysis_btn = widgets.Button(
            description="Xu h∆∞·ªõng ƒê·∫ßu t∆∞",
            button_style='info',
            icon='chart-area'
        )
        self.show_diversification_btn = widgets.Button(
            description="ƒêa d·∫°ng h√≥a",
            button_style='success',
            icon='sitemap'
        )
        self.export_report_btn = widgets.Button(
            description="Xu·∫•t B√°o c√°o",
            button_style='',
            icon='file-export'
        )
        
        # Data Management
        self.data_mgmt_header = widgets.HTML(
            value="<h3 style='color: #6C757D;'>üíæ QU·∫¢N L√ù D·ªÆ LI·ªÜU</h3>"
        )
        self.save_all_btn = widgets.Button(
            description="L∆∞u T·∫•t c·∫£",
            button_style='success',
            icon='save'
        )
        self.load_all_btn = widgets.Button(
            description="T·∫£i D·ªØ li·ªáu",
            button_style='info',
            icon='folder-open'
        )
        self.clear_all_btn = widgets.Button(
            description="X√≥a T·∫•t c·∫£",
            button_style='danger',
            icon='trash-alt'
        )
        
        # Output
        self.output = widgets.Output()
        
        # Bind events
        self.update_exchange_btn.on_click(self.update_exchange_rate)
        self.import_data_btn.on_click(self.import_investment_data)
        self.update_price_btn.on_click(self.update_current_price)
        self.set_allocation_btn.on_click(self.set_target_allocation)
        self.clear_allocation_btn.on_click(self.clear_target_allocation)
        
        # Analysis events
        self.show_portfolio_overview_btn.on_click(self.show_portfolio_overview)
        self.show_performance_btn.on_click(self.show_performance_analysis)
        self.show_allocation_analysis_btn.on_click(self.show_allocation_analysis)
        self.show_rebalance_recommendation_btn.on_click(self.show_rebalance_recommendation)
        self.show_risk_analysis_btn.on_click(self.show_risk_analysis)
        self.show_fund_analysis_btn.on_click(self.show_fund_analysis)  # TH√äM EVENT
        
        # Advanced analysis events
        self.show_trend_analysis_btn.on_click(self.show_trend_analysis)
        self.show_diversification_btn.on_click(self.show_diversification_analysis)
        self.export_report_btn.on_click(self.export_investment_report)
        
        # Data management events
        self.save_all_btn.on_click(self.save_all_data)
        self.load_all_btn.on_click(self.load_all_data)
        self.clear_all_btn.on_click(self.clear_all_data)

    def create_layout(self):
        # Settings tab
        settings_tab = widgets.VBox([
            self.settings_header,
            widgets.HBox([self.exchange_rate_input, self.exchange_rate_unit, self.update_exchange_btn]),
            widgets.HBox([self.currency_display]),
            
            self.import_header,
            widgets.HBox([self.import_file_path, self.import_data_btn]),
            
            self.price_header,
            widgets.HBox([self.asset_dropdown, self.current_price_input]),
            widgets.HBox([self.price_currency, self.price_date, self.update_price_btn]),
            
            self.allocation_header,
            widgets.HBox([self.allocation_type, self.target_percent]),
            widgets.HBox([self.set_allocation_btn, self.clear_allocation_btn])
        ])
        
        # Analysis tab - TH√äM BUTTON PH√ÇN T√çCH QU·ª∏
        analysis_tab = widgets.VBox([
            self.analysis_header,
            widgets.HBox([self.show_portfolio_overview_btn, self.show_performance_btn]),
            widgets.HBox([self.show_allocation_analysis_btn, self.show_rebalance_recommendation_btn]),
            widgets.HBox([self.show_risk_analysis_btn, self.show_fund_analysis_btn]),  # TH√äM V√ÄO ƒê√ÇY
            
            self.advanced_header,
            widgets.HBox([self.time_period, self.show_trend_analysis_btn]),
            widgets.HBox([self.show_diversification_btn, self.export_report_btn]),
            
            self.data_mgmt_header,
            widgets.HBox([self.save_all_btn, self.load_all_btn, self.clear_all_btn])
        ])
        
        # Create tabs
        tabs = widgets.Tab()
        tabs.children = [settings_tab, analysis_tab]
        tabs.titles = ['C√†i ƒë·∫∑t & D·ªØ li·ªáu', 'Ph√¢n t√≠ch Danh m·ª•c']
        
        self.main_layout = widgets.VBox([
            self.title,
            tabs,
            self.output
        ])


        def convert_currency(self, amount, from_currency, to_currency):
        """Chuy·ªÉn ƒë·ªïi ti·ªÅn t·ªá"""
        if from_currency == to_currency:
            return amount
        elif from_currency == 'KRW' and to_currency == 'VND':
            return amount * self.exchange_rate
        elif from_currency == 'VND' and to_currency == 'KRW':
            return amount / self.exchange_rate
        return amount
    
    def format_currency(self, amount, currency):
        """Format hi·ªÉn th·ªã ti·ªÅn t·ªá"""
        if currency == 'VND':
            return f"{amount:,.0f}ƒë"
        elif currency == 'KRW':
            return f"{amount:,.0f}‚Ç©"
        return f"{amount:,.0f}"
    
    def calculate_gini_coefficient(self, values):
        """T√≠nh h·ªá s·ªë Gini ƒë·ªÉ ƒëo ƒë·ªô b·∫•t b√¨nh ƒë·∫≥ng ph√¢n b·ªï"""
        if not values or len(values) == 1:
            return 0
        
        sorted_values = sorted(values)
        n = len(sorted_values)
        cumsum = np.cumsum(sorted_values)
        
        return (n + 1 - 2 * sum((n + 1 - i) * y for i, y in enumerate(sorted_values, 1))) / (n * sum(sorted_values))


def show_fund_analysis(self, button):
        """Ph√¢n t√≠ch chi ti·∫øt 3 lo·∫°i qu·ªπ ƒë·∫ßu t∆∞"""
        if not self.investment_data:
            with self.output:
                clear_output()
                print("‚ùå Ch∆∞a c√≥ d·ªØ li·ªáu ƒë·∫ßu t∆∞!")
            return
        
        display_currency = self.currency_display.value
        
        # L·ªçc d·ªØ li·ªáu qu·ªπ ƒë·∫ßu t∆∞
        fund_types = ['Qu·ªπ tr√°i phi·∫øu', 'Qu·ªπ c√¢n b·∫±ng', 'Qu·ªπ c·ªï phi·∫øu']
        fund_data = [inv for inv in self.investment_data if inv['type'] in fund_types]
        
        if not fund_data:
            with self.output:
                clear_output()
                print("‚ùå Kh√¥ng c√≥ d·ªØ li·ªáu qu·ªπ ƒë·∫ßu t∆∞ ƒë·ªÉ ph√¢n t√≠ch!")
                print("üí° H√£y ƒë·∫ßu t∆∞ v√†o c√°c qu·ªπ: Qu·ªπ tr√°i phi·∫øu, Qu·ªπ c√¢n b·∫±ng, ho·∫∑c Qu·ªπ c·ªï phi·∫øu")
            return
        
        with self.output:
            clear_output()
            
            print("="*80)
            print("üèõÔ∏è  PH√ÇN T√çCH CHI TI·∫æT QU·ª∏ ƒê·∫¶U T∆Ø")
            print("="*80)
            
            # T√≠nh to√°n th·ªëng k√™ qu·ªπ
            fund_summary = {}
            total_fund_value = 0
            
            for inv in fund_data:
                fund_type = inv['type']
                amount = self.convert_currency(inv['amount'], inv['currency'], display_currency)
                
                if fund_type not in fund_summary:
                    fund_summary[fund_type] = {
                        'value': 0,
                        'count': 0,
                        'risk_level': self.asset_risk_levels[fund_type]['risk'],
                        'expected_return': self.asset_risk_levels[fund_type]['expected_return'],
                        'volatility': self.asset_risk_levels[fund_type]['volatility']
                    }
                
                fund_summary[fund_type]['value'] += amount
                fund_summary[fund_type]['count'] += 1
                total_fund_value += amount
            
            # T·∫°o visualizations
            fig, ((ax1, ax2), (ax3, ax4)) = plt.subplots(2, 2, figsize=(16, 12))
            
            # 1. Ph√¢n b·ªï gi√° tr·ªã qu·ªπ
            fund_names = list(fund_summary.keys())
            fund_values = [fund_summary[name]['value'] for name in fund_names]
            colors = ['lightgreen', 'gold', 'lightcoral']  # Xanh (tr√°i phi·∫øu), V√†ng (c√¢n b·∫±ng), ƒê·ªè (c·ªï phi·∫øu)
            
            wedges, texts, autotexts = ax1.pie(fund_values, labels=fund_names, autopct='%1.1f%%', 
                                              colors=colors[:len(fund_names)], startangle=90)
            ax1.set_title('Ph√¢n B·ªï Gi√° Tr·ªã Qu·ªπ ƒê·∫ßu T∆∞')
            
            # 2. So s√°nh r·ªßi ro vs l·ª£i nhu·∫≠n
            risk_levels = [fund_summary[name]['risk_level'] for name in fund_names]
            expected_returns = [fund_summary[name]['expected_return'] for name in fund_names]
            
            scatter = ax2.scatter(risk_levels, expected_returns, 
                                s=[val/max(fund_values)*500 + 100 for val in fund_values],
                                c=colors[:len(fund_names)], alpha=0.7)
            
            # Th√™m labels cho t·ª´ng ƒëi·ªÉm
            for i, name in enumerate(fund_names):
                ax2.annotate(name.replace('Qu·ªπ ', ''), 
                           (risk_levels[i], expected_returns[i]),
                           xytext=(5, 5), textcoords='offset points', fontsize=10)
            
            ax2.set_xlabel('M·ª©c ƒë·ªô R·ªßi ro (1-5)')
            ax2.set_ylabel('L·ª£i nhu·∫≠n K·ª≥ v·ªçng (%/nƒÉm)')
            ax2.set_title('Ma Tr·∫≠n R·ªßi ro - L·ª£i nhu·∫≠n Qu·ªπ')
            ax2.grid(True, alpha=0.3)
            ax2.set_xlim(0.5, 5.5)
            
            # 3. Bi·ªÉu ƒë·ªì c·ªôt so s√°nh c√°c ch·ªâ s·ªë
            x = np.arange(len(fund_names))
            width = 0.25
            
            risk_vals = [fund_summary[name]['risk_level'] for name in fund_names]
            return_vals = [fund_summary[name]['expected_return']/3 for name in fund_names]  # Scale down for display
            volatility_vals = [fund_summary[name]['volatility']/4 for name in fund_names]  # Scale down for display
            
            bars1 = ax3.bar(x - width, risk_vals, width, label='R·ªßi ro (1-5)', color='red', alpha=0.7)
            bars2 = ax3.bar(x, return_vals, width, label='L·ª£i nhu·∫≠n (%/3)', color='green', alpha=0.7)
            bars3 = ax3.bar(x + width, volatility_vals, width, label='Bi·∫øn ƒë·ªông (%/4)', color='orange', alpha=0.7)
            
            ax3.set_xlabel('Lo·∫°i Qu·ªπ')
            ax3.set_ylabel('Gi√° tr·ªã (ƒê√£ chu·∫©n h√≥a)')
            ax3.set_title('So S√°nh C√°c Ch·ªâ S·ªë Qu·ªπ')
            ax3.set_xticks(x)
            ax3.set_xticklabels([name.replace('Qu·ªπ ', '') for name in fund_names])
            ax3.legend()
            ax3.grid(True, alpha=0.3)
            
            # 4. Hi·ªáu su·∫•t theo th·ªùi gian (n·∫øu c√≥ nhi·ªÅu giao d·ªãch)
            fund_df = pd.DataFrame(fund_data)
            fund_df['date'] = pd.to_datetime(fund_df['date'])
            fund_df['amount_display'] = fund_df.apply(
                lambda row: self.convert_currency(row['amount'], row['currency'], display_currency), 
                axis=1
            )
            
            # T√≠ch l≈©y theo t·ª´ng lo·∫°i qu·ªπ
            fund_cumulative = fund_df.groupby(['date', 'type'])['amount_display'].sum().unstack(fill_value=0).cumsum()
            
            if not fund_cumulative.empty and len(fund_cumulative) > 1:
                for fund_type in fund_cumulative.columns:
                    color_map = {'Qu·ªπ tr√°i phi·∫øu': 'green', 'Qu·ªπ c√¢n b·∫±ng': 'orange', 'Qu·ªπ c·ªï phi·∫øu': 'red'}
                    ax4.plot(fund_cumulative.index, fund_cumulative[fund_type], 
                           marker='o', label=fund_type.replace('Qu·ªπ ', ''), 
                           color=color_map.get(fund_type, 'blue'), linewidth=2)
                
                ax4.set_title('T√≠ch L≈©y ƒê·∫ßu T∆∞ Theo Lo·∫°i Qu·ªπ')
                ax4.set_ylabel(f'T·ªïng ƒë·∫ßu t∆∞ ({display_currency})')
                ax4.legend()
                ax4.grid(True, alpha=0.3)
            else:
                ax4.text(0.5, 0.5, 'Ch∆∞a ƒë·ªß d·ªØ li·ªáu\nƒë·ªÉ hi·ªÉn th·ªã xu h∆∞·ªõng', 
                        ha='center', va='center', transform=ax4.transAxes, fontsize=12)
                ax4.set_title('Xu H∆∞·ªõng ƒê·∫ßu T∆∞ Theo Th·ªùi Gian')
            
            plt.tight_layout()
            plt.show()
            
            # In b√°o c√°o chi ti·∫øt
            print(f"üí∞ T·ªïng gi√° tr·ªã qu·ªπ ƒë·∫ßu t∆∞: {self.format_currency(total_fund_value, display_currency)}")
            print(f"üìä S·ªë lo·∫°i qu·ªπ ƒëang ƒë·∫ßu t∆∞: {len(fund_summary)}/3")
            print("-"*80)
            
            # Ph√¢n t√≠ch t·ª´ng lo·∫°i

# Ph√¢n t√≠ch t·ª´ng lo·∫°i qu·ªπ
            for fund_type in sorted(fund_summary.keys(), key=lambda x: fund_summary[x]['risk_level']):
                data = fund_summary[fund_type]
                percentage = (data['value'] / total_fund_value) * 100
                
                print(f"\nüèõÔ∏è  {fund_type.upper()}")
                print(f"   üí∞ Gi√° tr·ªã: {self.format_currency(data['value'], display_currency)} ({percentage:.1f}%)")
                print(f"   üìä S·ªë giao d·ªãch: {data['count']}")
                print(f"   ‚ö†Ô∏è  M·ª©c r·ªßi ro: {data['risk_level']}/5 ({'Th·∫•p' if data['risk_level'] <= 2 else 'Trung b√¨nh' if data['risk_level'] <= 3 else 'Cao'})")
                print(f"   üìà L·ª£i nhu·∫≠n k·ª≥ v·ªçng: {data['expected_return']:.1f}%/nƒÉm")
                print(f"   üìâ ƒê·ªô bi·∫øn ƒë·ªông: {data['volatility']:.1f}%")
                
                # ƒê√°nh gi√° v√† khuy·∫øn ngh·ªã
                if fund_type == 'Qu·ªπ tr√°i phi·∫øu':
                    print(f"   üí° ƒê·∫∑c ƒëi·ªÉm: An to√†n, ·ªïn ƒë·ªãnh, ph√π h·ª£p b·∫£o to√†n v·ªën")
                    if percentage > 50:
                        print(f"   üü° C·∫£nh b√°o: T·ª∑ tr·ªçng cao, c√≥ th·ªÉ h·∫°n ch·∫ø tƒÉng tr∆∞·ªüng")
                elif fund_type == 'Qu·ªπ c√¢n b·∫±ng':
                    print(f"   üí° ƒê·∫∑c ƒëi·ªÉm: C√¢n b·∫±ng r·ªßi ro-l·ª£i nhu·∫≠n, linh ho·∫°t")
                    if percentage > 60:
                        print(f"   üü° G·ª£i √Ω: C√≥ th·ªÉ ƒëa d·∫°ng th√™m sang c√°c lo·∫°i kh√°c")
                elif fund_type == 'Qu·ªπ c·ªï phi·∫øu':
                    print(f"   üí° ƒê·∫∑c ƒëi·ªÉm: Ti·ªÅm nƒÉng tƒÉng tr∆∞·ªüng cao, bi·∫øn ƒë·ªông l·ªõn")
                    if percentage > 40:
                        print(f"   üî¥ C·∫£nh b√°o: R·ªßi ro cao, c·∫ßn c√¢n nh·∫Øc c√¢n b·∫±ng")
            
            # Ph√¢n t√≠ch portfolio qu·ªπ t·ªïng th·ªÉ
            print(f"\n" + "="*80)
            print("üìä PH√ÇN T√çCH PORTFOLIO QU·ª∏ T·ªîNG TH·ªÇ")
            print("="*80)
            
            # T√≠nh ƒëi·ªÉm r·ªßi ro v√† l·ª£i nhu·∫≠n trung b√¨nh c√≥ tr·ªçng s·ªë
            weighted_risk = sum(fund_summary[name]['risk_level'] * fund_summary[name]['value'] 
                               for name in fund_names) / total_fund_value
            weighted_return = sum(fund_summary[name]['expected_return'] * fund_summary[name]['value'] 
                                 for name in fund_names) / total_fund_value
            weighted_volatility = sum(fund_summary[name]['volatility'] * fund_summary[name]['value'] 
                                     for name in fund_names) / total_fund_value
            
            print(f"‚ö° ƒêi·ªÉm r·ªßi ro trung b√¨nh: {weighted_risk:.2f}/5")
            print(f"üìà L·ª£i nhu·∫≠n k·ª≥ v·ªçng trung b√¨nh: {weighted_return:.1f}%/nƒÉm")
            print(f"üìä ƒê·ªô bi·∫øn ƒë·ªông trung b√¨nh: {weighted_volatility:.1f}%")
            
            # ƒê√°nh gi√° portfolio
            if weighted_risk <= 2.5:
                risk_assessment = "üü¢ B·∫£o th·ªß - ∆Øu ti√™n an to√†n"
                recommendation = "C√≥ th·ªÉ tƒÉng t·ª∑ tr·ªçng qu·ªπ c·ªï phi·∫øu ƒë·ªÉ tƒÉng l·ª£i nhu·∫≠n"
            elif weighted_risk <= 3.5:
                risk_assessment = "üü° C√¢n b·∫±ng - H√†i h√≤a r·ªßi ro v√† l·ª£i nhu·∫≠n"
                recommendation = "Portfolio qu·ªπ ƒë√£ c√¢n b·∫±ng t·ªët"
            else:
                risk_assessment = "üî¥ T√≠ch c·ª±c - ∆Øu ti√™n tƒÉng tr∆∞·ªüng"
                recommendation = "C·∫ßn tƒÉng t·ª∑ tr·ªçng qu·ªπ tr√°i phi·∫øu ƒë·ªÉ gi·∫£m r·ªßi ro"
            
            print(f"üéØ ƒê√°nh gi√° portfolio: {risk_assessment}")
            print(f"üí° Khuy·∫øn ngh·ªã: {recommendation}")
            
            # Khuy·∫øn ngh·ªã ph√¢n b·ªï t·ªëi ∆∞u
            print(f"\nüí° KHUY·∫æN NGH·ªä PH√ÇN B·ªî QU·ª∏ T·ªêI ∆ØU:")
            
            # D·ª±a tr√™n risk profile ƒë·ªÉ ƒë∆∞a ra khuy·∫øn ngh·ªã
            if weighted_risk < 2.0:
                print("   üîπ Qu·ªπ tr√°i phi·∫øu: 30-50% (hi·ªán t·∫°i c·∫ßn gi·∫£m)")
                print("   üîπ Qu·ªπ c√¢n b·∫±ng: 30-40% (c√≥ th·ªÉ tƒÉng)")
                print("   üîπ Qu·ªπ c·ªï phi·∫øu: 20-30% (n√™n tƒÉng ƒë√°ng k·ªÉ)")
            elif weighted_risk < 3.0:
                print("   üîπ Qu·ªπ tr√°i phi·∫øu: 25-35% (t√πy ƒëi·ªÅu ch·ªânh)")
                print("   üîπ Qu·ªπ c√¢n b·∫±ng: 35-45% (duy tr√¨)")
                print("   üîπ Qu·ªπ c·ªï phi·∫øu: 20-35% (c√≥ th·ªÉ tƒÉng nh·∫π)")
            else:
                print("   üîπ Qu·ªπ tr√°i phi·∫øu: 20-30% (c·∫ßn tƒÉng)")
                print("   üîπ Qu·ªπ c√¢n b·∫±ng: 30-40% (duy tr√¨)")
                print("   üîπ Qu·ªπ c·ªï phi·∫øu: 25-35% (c·∫ßn gi·∫£m)")
            
            # Ph√¢n t√≠ch thi·∫øu h·ª•t
            missing_funds = [fund for fund in fund_types if fund not in fund_summary]
            if missing_funds:
                print(f"\n‚ö†Ô∏è  THI·∫æU H·ª§T LO·∫†I QU·ª∏:")
                for missing_fund in missing_funds:
                    risk_info = self.asset_risk_levels[missing_fund]
                    print(f"   üî∏ {missing_fund}: R·ªßi ro {risk_info['risk']}/5, L·ª£i nhu·∫≠n {risk_info['expected_return']}%")
                    if missing_fund == 'Qu·ªπ tr√°i phi·∫øu':
                        print("      ‚Üí Gi√∫p ·ªïn ƒë·ªãnh danh m·ª•c, gi·∫£m r·ªßi ro")
                    elif missing_fund == 'Qu·ªπ c√¢n b·∫±ng':
                        print("      ‚Üí C√¢n b·∫±ng gi·ªØa an to√†n v√† tƒÉng tr∆∞·ªüng")
                    elif missing_fund == 'Qu·ªπ c·ªï phi·∫øu':
                        print("      ‚Üí TƒÉng ti·ªÅm nƒÉng l·ª£i nhu·∫≠n d√†i h·∫°n")
            
            # T√≠nh to√°n l·ª£i nhu·∫≠n d·ª± ki·∫øn
            print(f"\nüìä D·ª∞ B√ÅO L·ª¢I NHU·∫¨N V√Ä R·ª¶I RO:")
            expected_annual_return = total_fund_value * weighted_return / 100
            expected_volatility_range = total_fund_value * weighted_volatility / 100
            
            print(f"   üìà L·ª£i nhu·∫≠n d·ª± ki·∫øn/nƒÉm: {self.format_currency(expected_annual_return, display_currency)}")
            print(f"   üìä Bi√™n ƒë·ªô dao ƒë·ªông: ¬±{self.format_currency(expected_volatility_range, display_currency)}")
            print(f"   üéØ K·ªãch b·∫£n t·ªët: {self.format_currency(total_fund_value + expected_annual_return + expected_volatility_range, display_currency)}")
            print(f"   ‚ö†Ô∏è  K·ªãch b·∫£n x·∫•u: {self.format_currency(total_fund_value + expected_annual_return - expected_volatility_range, display_currency)}")
            
            # So s√°nh v·ªõi t·ªïng portfolio
            total_portfolio_value = sum(self.convert_currency(inv['amount'], inv['currency'], display_currency) 
                                       for inv in self.investment_data)
            fund_percentage_in_portfolio = (total_fund_value / total_portfolio_value) * 100
            
            print(f"\nüîç V·ªä TR√ç TRONG T·ªîNG DANH M·ª§C:")
            print(f"   üìä T·ª∑ tr·ªçng qu·ªπ trong t·ªïng danh m·ª•c: {fund_percentage_in_portfolio:.1f}%")
            
            if fund_percentage_in_portfolio < 30:
                print("   üí° T·ª∑ tr·ªçng qu·ªπ th·∫•p - c√≥ th·ªÉ tƒÉng ƒë·ªÉ ƒëa d·∫°ng h√≥a")
            elif fund_percentage_in_portfolio > 70:
                print("   ‚ö†Ô∏è  T·ª∑ tr·ªçng qu·ªπ cao - c√¢n nh·∫Øc ƒëa d·∫°ng sang t√†i s·∫£n kh√°c")
            else:
                print("   ‚úÖ T·ª∑ tr·ªçng qu·ªπ h·ª£p l√Ω trong t·ªïng danh m·ª•c")


def update_exchange_rate(self, button):
        """C·∫≠p nh·∫≠t t·ª∑ gi√°"""
        if self.exchange_rate_input.value > 0:
            self.exchange_rate = self.exchange_rate_input.value
            self.save_settings()
            
            with self.output:
                clear_output()
                print(f"‚úÖ ƒê√£ c·∫≠p nh·∫≠t t·ª∑ gi√°: 1 KRW = {self.exchange_rate} VND")
        else:
            with self.output:
                clear_output()
                print("‚ùå T·ª∑ gi√° ph·∫£i l·ªõn h∆°n 0!")
    
    def import_investment_data(self, button):
        """Import d·ªØ li·ªáu ƒë·∫ßu t∆∞ t·ª´ file CSV c·ªßa finance tracker"""
        try:
            file_path = self.import_file_path.value
            df = pd.read_csv(file_path, encoding='utf-8-sig')
            
            # Clear existing data
            self.investment_data = []
            
            # Process data
            for _, row in df.iterrows():
                investment_type = self.investment_mapping.get(row['type'], 'Kh√°c')
                
                self.investment_data.append({
                    'date': pd.to_datetime(row['date']).date(),
                    'type': investment_type,
                    'description': row['description'],
                    'amount': float(row['amount']),
                    'currency': row.get('currency', 'VND'),
                    'original_type': row['type']
                })
            
            # Update asset dropdown
            self.update_asset_dropdown()
            
            with self.output:
                clear_output()
                print(f"‚úÖ ƒê√£ import {len(self.investment_data)} b·∫£n ghi ƒë·∫ßu t∆∞ t·ª´ {file_path}")
                print("üìä Ph√¢n lo·∫°i ƒë·∫ßu t∆∞:")
                
                # Show investment breakdown
                type_summary = {}
                for inv in self.investment_data:
                    inv_type = inv['type']
                    amount_vnd = self.convert_currency(inv['amount'], inv['currency'], 'VND')
                    type_summary[inv_type] = type_summary.get(inv_type, 0) + amount_vnd
                
                for inv_type, total in type_summary.items():
                    print(f"   ‚Ä¢ {inv_type}: {total:,.0f}ƒë")
                    
        except Exception as e:
            with self.output:
                clear_output()
                print(f"‚ùå L·ªói khi import d·ªØ li·ªáu: {str(e)}")
    
    def update_asset_dropdown(self):
        """C·∫≠p nh·∫≠t dropdown danh s√°ch t√†i s·∫£n"""
        options = [('-- Ch·ªçn t√†i s·∫£n --', '')]
        
        # Group by type and description
        assets = set()
        for inv in self.investment_data:
            asset_key = f"{inv['type']} - {inv['description']}"
            assets.add(asset_key)
        
        for asset in sorted(assets):
            options.append((asset, asset))
        
        self.asset_dropdown.options = options
    
    def update_current_price(self, button):
        """C·∫≠p nh·∫≠t gi√° hi·ªán t·∫°i c·ªßa t√†i s·∫£n"""
        if self.asset_dropdown.value and self.current_price_input.value > 0:
            asset_key = self.asset_dropdown.value
            price_info = {
                'price': self.current_price_input.value,
                'currency': self.price_currency.value,
                'date': self.price_date.value
            }
            
            self.current_prices[asset_key] = price_info
            self.save_current_prices()
            
            with self.output:
                clear_output()
                formatted_price = self.format_currency(self.current_price_input.value, self.price_currency.value)
                print(f"‚úÖ ƒê√£ c·∫≠p nh·∫≠t gi√° {asset_key}: {formatted_price}")
        else:
            with self.output:
                clear_output()
                print("‚ùå Vui l√≤ng ch·ªçn t√†i s·∫£n v√† nh·∫≠p gi√° h·ª£p l·ªá!")
    
    def set_target_allocation(self, button):
        """Thi·∫øt l·∫≠p t·ª∑ l·ªá ph√¢n b·ªï m·ª•c ti√™u"""
        if self.target_percent.value >= 0:
            self.target_allocation[self.allocation_type.value] = self.target_percent.value
            self.save_target_allocation()
            
            with self.output:
                clear_output()
                print(f"‚úÖ ƒê√£ thi·∫øt l·∫≠p t·ª∑ l·ªá m·ª•c ti√™u cho {self.allocation_type.value}: {self.target_percent.value}%")
                
                # Show current allocation targets
                print("\nüéØ Ph√¢n b·ªï m·ª•c ti√™u hi·ªán t·∫°i:")
                total_percent = 0
                for asset_type, percent in self.target_allocation.items():
                    print(f"   ‚Ä¢ {asset_type}: {percent}%")
                    total_percent += percent
                print(f"   üìä T·ªïng: {total_percent}%")
                
                if total_percent != 100:
                    print(f"   ‚ö†Ô∏è  Ch∆∞a ƒë·∫°t 100% (c√≤n {100-total_percent}%)")
        else:
            with self.output:
                clear_output()
                print("‚ùå T·ª∑ l·ªá ph·∫ßn trƒÉm ph·∫£i >= 0!")
    
    def clear_target_allocation(self, button):
        """X√≥a t·∫•t c·∫£ t·ª∑ l·ªá ph√¢n b·ªï m·ª•c ti√™u"""
        self.target_allocation = {}
        self.save_target_allocation()
        
        with self.output:
            clear_output()
            print("üóëÔ∏è ƒê√£ x√≥a t·∫•t c·∫£ t·ª∑ l·ªá ph√¢n b·ªï m·ª•c ti√™u")

def save_settings(self):
        """L∆∞u c√†i ƒë·∫∑t t·ª∑ gi√°"""
        try:
            settings_df = pd.DataFrame([{
                'parameter': 'exchange_rate',
                'value': self.exchange_rate,
                'updated_date': datetime.now().date()
            }])
            settings_df.to_csv(self.data_files['settings'], index=False, encoding='utf-8-sig')
        except Exception as e:
            print(f"L·ªói khi l∆∞u c√†i ƒë·∫∑t: {str(e)}")
    
    def save_current_prices(self):
        """L∆∞u gi√° hi·ªán t·∫°i"""
        try:
            if self.current_prices:
                prices_data = []
                for asset_key, price_info in self.current_prices.items():
                    prices_data.append({
                        'asset': asset_key,
                        'price': price_info['price'],
                        'currency': price_info['currency'],
                        'date': price_info['date']
                    })
                
                prices_df = pd.DataFrame(prices_data)
                prices_df.to_csv(self.data_files['investment_prices'], index=False, encoding='utf-8-sig')
        except Exception as e:
            print(f"L·ªói khi l∆∞u gi√°: {str(e)}")
    
    def save_target_allocation(self):
        """L∆∞u t·ª∑ l·ªá ph√¢n b·ªï m·ª•c ti√™u"""
        try:
            if self.target_allocation:
                allocation_data = []
                for asset_type, target_pct in self.target_allocation.items():
                    allocation_data.append({
                        'asset_type': asset_type,
                        'target_percent': target_pct
                    })
                
                allocation_df = pd.DataFrame(allocation_data)
                allocation_df.to_csv(self.data_files['target_allocation'], index=False, encoding='utf-8-sig')
        except Exception as e:
            print(f"L·ªói khi l∆∞u ph√¢n b·ªï m·ª•c ti√™u: {str(e)}")
    
    def load_data(self):
        """T·∫£i d·ªØ li·ªáu t·ª´ c√°c file"""
        # Load settings
        try:
            df = pd.read_csv(self.data_files['settings'], encoding='utf-8-sig')
            for _, row in df.iterrows():
                if row['parameter'] == 'exchange_rate':
                    self.exchange_rate = float(row['value'])
                    self.exchange_rate_input.value = self.exchange_rate
            print(f"‚úÖ ƒê√£ load c√†i ƒë·∫∑t t·ª∑ gi√°: {self.exchange_rate}")
        except FileNotFoundError:
            print("üìù Ch∆∞a c√≥ file c√†i ƒë·∫∑t - s·ª≠ d·ª•ng m·∫∑c ƒë·ªãnh")
        except Exception as e:
            print(f"‚ö†Ô∏è  L·ªói khi load c√†i ƒë·∫∑t: {str(e)}")
        
        # Load current prices
        try:
            df = pd.read_csv(self.data_files['investment_prices'], encoding='utf-8-sig')
            self.current_prices = {}
            for _, row in df.iterrows():
                self.current_prices[row['asset']] = {
                    'price': float(row['price']),
                    'currency': row['currency'],
                    'date': pd.to_datetime(row['date']).date()
                }
            print(f"‚úÖ ƒê√£ load {len(self.current_prices)} gi√° t√†i s·∫£n")
        except FileNotFoundError:
            print("üìù Ch∆∞a c√≥ file gi√° t√†i s·∫£n")
        except Exception as e:
            print(f"‚ö†Ô∏è  L·ªói khi load gi√°: {str(e)}")
        
        # Load target allocation
        try:
            df = pd.read_csv(self.data_files['target_allocation'], encoding='utf-8-sig')
            self.target_allocation = {}
            for _, row in df.iterrows():
                self.target_allocation[row['asset_type']] = float(row['target_percent'])
            print(f"‚úÖ ƒê√£ load t·ª∑ l·ªá ph√¢n b·ªï m·ª•c ti√™u cho {len(self.target_allocation)} lo·∫°i t√†i s·∫£n")
        except FileNotFoundError:
            print("üìù Ch∆∞a c√≥ file ph√¢n b·ªï m·ª•c ti√™u")
        except Exception as e:
            print(f"‚ö†Ô∏è  L·ªói khi load ph√¢n b·ªï m·ª•c ti√™u: {str(e)}")
    
    def save_all_data(self, button):
        """L∆∞u t·∫•t c·∫£ d·ªØ li·ªáu"""
        try:
            self.save_settings()
            self.save_current_prices()
            self.save_target_allocation()
            
            with self.output:
                clear_output()
                print("‚úÖ ƒê√£ l∆∞u t·∫•t c·∫£ d·ªØ li·ªáu!")
                print("üìÅ C√°c file ƒë∆∞·ª£c t·∫°o:")
                print("   ‚Ä¢ investment_settings.csv - C√†i ƒë·∫∑t t·ª∑ gi√°")
                print("   ‚Ä¢ investment_current_prices.csv - Gi√° hi·ªán t·∫°i")
                print("   ‚Ä¢ target_allocation.csv - Ph√¢n b·ªï m·ª•c ti√™u")
        except Exception as e:
            with self.output:
                clear_output()
                print(f"‚ùå L·ªói khi l∆∞u d·ªØ li·ªáu: {str(e)}")
    
    def load_all_data(self, button):
        """T·∫£i l·∫°i t·∫•t c·∫£ d·ªØ li·ªáu"""
        try:
            self.load_data()
            self.update_asset_dropdown()
            
            with self.output:
                clear_output()
                print("‚úÖ ƒê√£ t·∫£i l·∫°i t·∫•t c·∫£ d·ªØ li·ªáu!")
                print(f"üìä T·ª∑ gi√°: 1 KRW = {self.exchange_rate} VND")
                print(f"üìä Gi√° t√†i s·∫£n: {len(self.current_prices)} m·ª•c")
                print(f"üìä Ph√¢n b·ªï m·ª•c ti√™u: {len(self.target_allocation)} lo·∫°i")
        except Exception as e:
            with self.output:
                clear_output()
                print(f"‚ùå L·ªói khi t·∫£i d·ªØ li·ªáu: {str(e)}")
    
    def clear_all_data(self, button):
        """X√≥a t·∫•t c·∫£ d·ªØ li·ªáu"""
        import os
        
        try:
            # Clear memory data
            self.investment_data = []
            self.current_prices = {}
            self.target_allocation = {}
            self.exchange_rate = 18.0
            
            # Update UI
            self.exchange_rate_input.value = 18.0
            self.update_asset_dropdown()
            
            # Remove files
            for filename in self.data_files.values():
                if os.path.exists(filename):
                    os.remove(filename)
            
            with self.output:
                clear_output()
                print("‚ö†Ô∏è  ƒê√£ x√≥a to√†n b·ªô d·ªØ li·ªáu v√† file!")
                print("üìù B·∫°n c√≥ th·ªÉ b·∫Øt ƒë·∫ßu import d·ªØ li·ªáu m·ªõi.")
        except Exception as e:
            with self.output:
                clear_output()
                print(f"‚ùå L·ªói khi x√≥a d·ªØ li·ªáu: {str(e)}")
    
    def display(self):
        return self.main_layout

def show_allocation_analysis(self, button):
        """Ph√¢n t√≠ch ph√¢n b·ªï danh m·ª•c so v·ªõi m·ª•c ti√™u"""
        if not self.investment_data:
            with self.output:
                clear_output()
                print("‚ùå Ch∆∞a c√≥ d·ªØ li·ªáu ƒë·∫ßu t∆∞!")
            return
        
        if not self.target_allocation:
            with self.output:
                clear_output()
                print("‚ùå Ch∆∞a thi·∫øt l·∫≠p t·ª∑ l·ªá ph√¢n b·ªï m·ª•c ti√™u!")
            return
        
        display_currency = self.currency_display.value
        
        with self.output:
            clear_output()

            # Calculate current allocation
            current_allocation = {}
            total_value = 0
            
            for inv in self.investment_data:
                inv_type = inv['type']
                amount = self.convert_currency(inv['amount'], inv['currency'], display_currency)
                
                current_allocation[inv_type] = current_allocation.get(inv_type, 0) + amount
                total_value += amount
            
            # Convert to percentages
            current_allocation_pct = {
                asset_type: (value / total_value) * 100 
                for asset_type, value in current_allocation.items()
            }

            print("="*70)
            print(f"üéØ PH√ÇN T√çCH PH√ÇN B·ªî DANH M·ª§C ({display_currency})")
            print("="*70)
            print(f"üí∞ T·ªïng gi√° tr·ªã danh m·ª•c: {self.format_currency(total_value, display_currency)}")
            print("-"*70)
            
            # Create comparison visualization
            fig, ((ax1, ax2), (ax3, ax4)) = plt.subplots(2, 2, figsize=(16, 12))
            
            # Get all asset types from both current and target
            all_asset_types = set(list(current_allocation_pct.keys()) + list(self.target_allocation.keys()))
            
            # Prepare data for comparison
            comparison_data = []
            for asset_type in all_asset_types:
                current_pct = current_allocation_pct.get(asset_type, 0)
                target_pct = self.target_allocation.get(asset_type, 0)
                deviation = current_pct - target_pct
                
                comparison_data.append({
                    'asset_type': asset_type,
                    'current_pct': current_pct,
                    'target_pct': target_pct,
                    'deviation': deviation,
                    'current_value': current_allocation.get(asset_type, 0),
                    'target_value': (target_pct / 100) * total_value if total_value > 0 else 0,
                    'adjustment_needed': ((target_pct / 100) * total_value) - current_allocation.get(asset_type, 0)
                })
            
            # Sort by absolute deviation for better visualization
            comparison_data.sort(key=lambda x: abs(x['deviation']), reverse=True)
            
            # 1. Current vs Target Allocation (Bar Chart)
            asset_types = [item['asset_type'] for item in comparison_data]
            current_values = [item['current_pct'] for item in comparison_data]
            target_values = [item['target_pct'] for item in comparison_data]
            
            x = np.arange(len(asset_types))
            width = 0.35
            
            bars1 = ax1.bar(x - width/2, current_values, width, label='Hi·ªán t·∫°i', color='lightblue', alpha=0.8)
            bars2 = ax1.bar(x + width/2, target_values, width, label='M·ª•c ti√™u', color='lightcoral', alpha=0.8)
            
            ax1.set_xlabel('Lo·∫°i T√†i S·∫£n')
            ax1.set_ylabel('T·ª∑ l·ªá (%)')
            ax1.set_title('So S√°nh Ph√¢n B·ªï Hi·ªán T·∫°i vs M·ª•c Ti√™u')
            ax1.set_xticks(x)
            ax1.set_xticklabels(asset_types, rotation=45, ha='right')
            ax1.legend()
            ax1.grid(True, alpha=0.3)
            
            # Add value labels on bars
            for bar in bars1:
                height = bar.get_height()
                ax1.text(bar.get_x() + bar.get_width()/2., height + 0.5,
                        f'{height:.1f}%', ha='center', va='bottom', fontsize=9)
            
            for bar in bars2:
                height = bar.get_height()
                ax1.text(bar.get_x() + bar.get_width()/2., height + 0.5,
                        f'{height:.1f}%', ha='center', va='bottom', fontsize=9)
            
            # 2. Deviation Analysis
            deviations = [item['deviation'] for item in comparison_data]
            colors = ['red' if dev < -5 else 'orange' if dev < -2 else 'lightgreen' if abs(dev) <= 2 else 'yellow' if dev

colors = ['red' if dev < -5 else 'orange' if dev < -2 else 'lightgreen' if abs(dev) <= 2 else 'yellow' if dev < 5 else 'red' for dev in deviations]
            
            bars = ax2.barh(asset_types, deviations, color=colors, alpha=0.7)
            ax2.set_xlabel('ƒê·ªô l·ªách (%)')
            ax2.set_title('ƒê·ªô L·ªách So V·ªõi M·ª•c Ti√™u')
            ax2.axvline(x=0, color='black', linestyle='-', linewidth=1)
            ax2.grid(True, alpha=0.3)
            
            # Add deviation labels
            for i, (bar, dev) in enumerate(zip(bars, deviations)):
                ax2.text(dev + (0.5 if dev >= 0 else -0.5), i,
                        f'{dev:+.1f}%', va='center', ha='left' if dev >= 0 else 'right', fontweight='bold')
            
            # 3. Current Allocation Pie Chart
            current_types = [k for k, v in current_allocation_pct.items() if v > 0]
            current_pcts = [current_allocation_pct[k] for k in current_types]
            
            colors_pie = plt.cm.Set3(np.linspace(0, 1, len(current_types)))
            ax3.pie(current_pcts, labels=current_types, autopct='%1.1f%%', colors=colors_pie, startangle=90)
            ax3.set_title('Ph√¢n B·ªï Hi·ªán T·∫°i')
            
            # 4. Target Allocation Pie Chart
            target_types = [k for k, v in self.target_allocation.items() if v > 0]
            target_pcts = [self.target_allocation[k] for k in target_types]
            
            ax4.pie(target_pcts, labels=target_types, autopct='%1.1f%%', colors=colors_pie, startangle=90)
            ax4.set_title('Ph√¢n B·ªï M·ª•c Ti√™u')
            
            plt.tight_layout()
            plt.show()
            
            # Print detailed analysis
            print("üìä CHI TI·∫æT PH√ÇN T√çCH PH√ÇN B·ªî:")
            print(f"{'Lo·∫°i t√†i s·∫£n':<20} {'Hi·ªán t·∫°i':<12} {'M·ª•c ti√™u':<12} {'ƒê·ªô l·ªách':<12} {'Tr·∫°ng th√°i':<15}")
            print("-"*85)
            
            total_deviation = 0
            critical_deviations = 0
            
            for item in comparison_data:
                asset_type = item['asset_type']
                current_pct = item['current_pct']
                target_pct = item['target_pct']
                deviation = item['deviation']
                
                # Determine status
                if abs(deviation) <= 2:
                    status = "üü¢ T·ªët"
                elif abs(deviation) <= 5:
                    status = "üü° Ch·∫•p nh·∫≠n ƒë∆∞·ª£c"
                elif deviation > 5:
                    status = "üî¥ Qu√° cao"
                    critical_deviations += 1
                else:
                    status = "üîµ Qu√° th·∫•p"
                    critical_deviations += 1
                
                print(f"{asset_type:<20} {current_pct:>8.1f}% {target_pct:>8.1f}% {deviation:>+8.1f}% {status:<15}")
                total_deviation += abs(deviation)
            
            # Overall assessment
            print("-"*85)
            print(f"üìà ƒê√ÅNH GI√Å T·ªîNG QUAN:")
            print(f"   ‚Ä¢ T·ªïng ƒë·ªô l·ªách tuy·ªát ƒë·ªëi: {total_deviation:.1f}%")
            print(f"   ‚Ä¢ S·ªë lo·∫°i t√†i s·∫£n c·∫ßn ƒëi·ªÅu ch·ªânh: {critical_deviations}")
            
            if total_deviation <= 10:
                overall_status = "üü¢ Danh m·ª•c c√¢n b·∫±ng t·ªët"
            elif total_deviation <= 20:
                overall_status = "üü° C·∫ßn ƒëi·ªÅu ch·ªânh nh·∫π"
            else:
                overall_status = "üî¥ C·∫ßn t√°i c√¢n b·∫±ng m·∫°nh"
            
            print(f"   ‚Ä¢ Tr·∫°ng th√°i t·ªïng th·ªÉ: {overall_status}")
            
            # Rebalancing recommendations
            print(f"\nüí° KHUY·∫æN NGH·ªä T√ÅI C√ÇN B·∫∞NG:")
            
            rebalance_needed = False
            for item in comparison_data:
                if abs(item['deviation']) > 5:
                    rebalance_needed = True
                    asset_type = item['asset_type']
                    deviation = item['deviation']
                    adjustment_value = abs(item['adjustment_needed'])
                    
                    if deviation > 5:
                        action = "Gi·∫£m"
                        print(f"   üîª {action} {asset_type}: {self.format_currency(adjustment_value, display_currency)}")
                    else:
                        action = "TƒÉng"
                        print(f"   üî∫ {action} {asset_type}: {self.format_currency(adjustment_value, display_currency)}")
            
            if not rebalance_needed:
                print("   ‚úÖ Danh m·ª•c hi·ªán t·∫°i ƒë√£ kh√° c√¢n b·∫±ng, kh√¥ng c·∫ßn ƒëi·ªÅu ch·ªânh l·ªõn!")
            
            # Risk assessment cho t·ª´ng lo·∫°i qu·ªπ
            print(f"\n‚ö†Ô∏è  ƒê√ÅNH GI√Å R·ª¶I RO PH√ÇN B·ªî QU·ª∏:")
            
            # Ki·ªÉm tra ph√¢n b·ªï qu·ªπ
            fund_allocation = {}
            for item in comparison_data:
                asset_type = item['asset_type']
                if 'Qu·ªπ' in asset_type:
                    fund_allocation[asset_type] = {
                        'current': item['current_pct'],
                        'target': item['target_pct'],
                        'deviation': item['deviation']
                    }
            
            if fund_allocation:
                print("   üìä Ph√¢n t√≠ch qu·ªπ ƒë·∫ßu t∆∞:")
                for fund_type, data in fund_allocation.items():
                    risk_level = self.asset_risk_levels.get(fund_type, {}).get('risk', 3)
                    expected_return = self.asset_risk_levels.get(fund_type, {}).get('expected_return', 10)
                    
                    print(f"   ‚Ä¢ {fund_type}:")
                    print(f"     - Hi·ªán t·∫°i: {data['current']:.1f}%, M·ª•c ti√™u: {data['target']:.1f}%")
                    print(f"     - R·ªßi ro: {risk_level}/5, L·ª£i nhu·∫≠n KV: {expected_return}%/nƒÉm")
                    
                    if abs(data['deviation']) > 5:
                        if fund_type == 'Qu·ªπ tr√°i phi·∫øu' and data['deviation'] < -5:
                            print(f"     - ‚ö†Ô∏è Thi·∫øu qu·ªπ an to√†n, c√≥ th·ªÉ tƒÉng r·ªßi ro danh m·ª•c")
                        elif fund_type == 'Qu·ªπ c·ªï phi·∫øu' and data['deviation'] > 5:
                            print(f"     - ‚ö†Ô∏è Qu√° nhi·ªÅu qu·ªπ r·ªßi ro cao, c·∫ßn c√¢n b·∫±ng")
                        elif fund_type == 'Qu·ªπ c√¢n b·∫±ng':
                            if data['deviation'] > 5:
                                print(f"     - üí° C√≥ th·ªÉ ph√¢n b·ªï sang c√°c qu·ªπ chuy√™n bi·ªát h∆°n")
                            else:
                                print(f"     - üí° C·∫ßn tƒÉng ƒë·ªÉ c√¢n b·∫±ng danh m·ª•c")
            
            # Timeline recommendation
            if critical_deviations > 0:
                print(f"\nüìÖ L·ªäCH TR√åNH ƒê·ªÄ XU·∫§T:")
                print(f"   ‚Ä¢ T√°i c√¢n b·∫±ng ngay: {critical_deviations} lo·∫°i t√†i s·∫£n c·∫ßn ƒëi·ªÅu ch·ªânh m·∫°nh")
                print(f"   ‚Ä¢ Theo d√µi h√†ng th√°ng: C√°c lo·∫°i t√†i s·∫£n kh√°c")
                print(f"   ‚Ä¢ ƒê√°nh gi√° l·∫°i m·ª•c ti√™u: Sau 3-6 th√°ng")

# H√†m t·∫°o ·ª©ng d·ª•ng
def create_investment_analyzer():
    """
    H√†m kh·ªüi t·∫°o ·ª©ng d·ª•ng ph√¢n t√≠ch danh m·ª•c ƒë·∫ßu t∆∞
    """
    analyzer = InvestmentPortfolioAnalyzer()
    return analyzer.display()

# H∆∞·ªõng d·∫´n s·ª≠ d·ª•ng
def show_usage_guide():
    """
    Hi·ªÉn th·ªã h∆∞·ªõng d·∫´n s·ª≠ d·ª•ng ·ª©ng d·ª•ng
    """
    guide = """
    üìñ H∆Ø·ªöNG D·∫™N S·ª¨ D·ª§NG ·ª®NG D·ª§NG PH√ÇN T√çCH DANH M·ª§C ƒê·∫¶U T∆Ø - PHI√äN B·∫¢N QU·ª∏ N√ÇNG CAO
    
    üîß B∆Ø·ªöC 1: C√ÄI ƒê·∫∂T BAN ƒê·∫¶U
    ‚îú‚îÄ‚îÄ C·∫≠p nh·∫≠t t·ª∑ gi√° KRW/VND hi·ªán t·∫°i
    ‚îú‚îÄ‚îÄ Import d·ªØ li·ªáu t·ª´ file finance_data_savings.csv
    ‚îî‚îÄ‚îÄ Thi·∫øt l·∫≠p t·ª∑ l·ªá ph√¢n b·ªï m·ª•c ti√™u cho t·ª´ng lo·∫°i t√†i s·∫£n
    
    üí∞ B∆Ø·ªöC 2: C·∫¨P NH·∫¨T GI√Å T√ÄI S·∫¢N (t√πy ch·ªçn)
    ‚îú‚îÄ‚îÄ Ch·ªçn t√†i s·∫£n t·ª´ dropdown
    ‚îú‚îÄ‚îÄ Nh·∫≠p gi√° hi·ªán t·∫°i v√† ƒë∆°n v·ªã ti·ªÅn t·ªá
    ‚îî‚îÄ‚îÄ C·∫≠p nh·∫≠t ƒë·ªÉ ph√¢n t√≠ch hi·ªáu su·∫•t ch√≠nh x√°c
    
    üìä B∆Ø·ªöC 3: PH√ÇN T√çCH DANH M·ª§C
    ‚îú‚îÄ‚îÄ T·ªïng quan Danh m·ª•c - Xem ph√¢n b·ªï t·ªïng th·ªÉ
    ‚îú‚îÄ‚îÄ Hi·ªáu su·∫•t ƒê·∫ßu t∆∞ - Ph√¢n t√≠ch xu h∆∞·ªõng ƒë·∫ßu t∆∞
    ‚îú‚îÄ‚îÄ Ph√¢n t√≠ch Ph√¢n b·ªï - So s√°nh v·ªõi m·ª•c ti√™u
    ‚îú‚îÄ‚îÄ Khuy·∫øn ngh·ªã C√¢n b·∫±ng - H√†nh ƒë·ªông c·∫ßn th·ª±c hi·ªán
    ‚îú‚îÄ‚îÄ Ph√¢n t√≠ch R·ªßi ro - ƒê√°nh gi√° m·ª©c ƒë·ªô r·ªßi ro
    ‚îî‚îÄ‚îÄ Ph√¢n t√≠ch Qu·ªπ ƒê·∫ßu t∆∞ - Chi ti·∫øt 3 lo·∫°i qu·ªπ ‚≠ê M·ªöI
    
    üî¨ B∆Ø·ªöC 4: PH√ÇN T√çCH N√ÇNG CAO
    ‚îú‚îÄ‚îÄ Xu h∆∞·ªõng ƒê·∫ßu t∆∞ - Ph√¢n t√≠ch theo th·ªùi gian
    ‚îú‚îÄ‚îÄ ƒêa d·∫°ng h√≥a - ƒê√°nh gi√° m·ª©c ƒë·ªô ƒëa d·∫°ng
    ‚îî‚îÄ‚îÄ T·ªïng T√†i s·∫£n - Quy ƒë·ªïi ti·ªÅn t·ªá
    
    üìÑ B∆Ø·ªöC 5: XU·∫§T B√ÅO C√ÅO
    ‚îî‚îÄ‚îÄ Xu·∫•t file Excel chi ti·∫øt v·ªõi t·∫•t c·∫£ ph√¢n t√≠ch
    
    üíæ ƒê·∫∂C ƒêI·ªÇM M·ªöI - PH√ÇN T√çCH QU·ª∏:
    ‚Ä¢ Qu·ªπ Tr√°i phi·∫øu: R·ªßi ro th·∫•p (2/5), L·ª£i nhu·∫≠n 8%/nƒÉm
    ‚Ä¢ Qu·ªπ C√¢n b·∫±ng: R·ªßi ro trung b√¨nh (3/5), L·ª£i nhu·∫≠n 10%/nƒÉm  
    ‚Ä¢ Qu·ªπ C·ªï phi·∫øu: R·ªßi ro cao (4/5), L·ª£i nhu·∫≠n 15%/nƒÉm
    ‚Ä¢ Ma tr·∫≠n r·ªßi ro-l·ª£i nhu·∫≠n v·ªõi khuy·∫øn ngh·ªã ph√¢n b·ªï t·ªëi ∆∞u
    ‚Ä¢ D·ª± b√°o l·ª£i nhu·∫≠n v√† k·ªãch b·∫£n r·ªßi ro
    
    üí° L∆ØU √ù:
    ‚Ä¢ D·ªØ li·ªáu s·∫Ω ƒë∆∞·ª£c l∆∞u t·ª± ƒë·ªông v√†o c√°c file CSV
    ‚Ä¢ C√≥ th·ªÉ import d·ªØ li·ªáu t·ª´ ·ª©ng d·ª•ng finance tracker
    ‚Ä¢ H·ªó tr·ª£ ƒë·∫ßy ƒë·ªß VND v√† KRW v·ªõi t·ª∑ gi√° linh ho·∫°t
    ‚Ä¢ H·ªá th·ªëng mapping t·ª± ƒë·ªông t·ª´ "Qu·ªπ ƒë·∫ßu t∆∞" sang 3 lo·∫°i qu·ªπ chi ti·∫øt
    """
    
    print(guide)

# Kh·ªüi ch·∫°y ·ª©ng d·ª•ng
if __name__ == "__main__":
    print("üöÄ Kh·ªüi ƒë·ªông ·ª©ng d·ª•ng ph√¢n t√≠ch danh m·ª•c ƒë·∫ßu t∆∞ - Phi√™n b·∫£n Qu·ªπ N√¢ng cao...")
    show_usage_guide()
    print("\n" + "="*50)
    print("üì± Ch·∫°y l·ªánh sau ƒë·ªÉ b·∫Øt ƒë·∫ßu:")
    print("investment_app = create_investment_analyzer()")
    print("display(investment_app)")
    print("="*50)



        
